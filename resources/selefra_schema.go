// Code generated by https://github.com/selefra/selefra-terraform-provider-scaffolding DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***
package resources


import (
	"context"
	"github.com/selefra/selefra-provider-sdk/provider/schema"
	"github.com/selefra/selefra-provider-sdk/table_schema_generator"
    "github.com/selefra/selefra-provider-sdk/terraform/bridge"
    "github.com/selefra/selefra-provider-sdk/terraform/column_value_extractor" 
)




// azurerm_maintenance_configuration
func TableSchemaGenerator_azurerm_maintenance_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_maintenance_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_maintenance_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_maintenance_configuration
func GetColumns_azurerm_maintenance_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("window").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("visibility").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_servicebus_namespace_network_rule_set
func TableSchemaGenerator_azurerm_servicebus_namespace_network_rule_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_servicebus_namespace_network_rule_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_servicebus_namespace_network_rule_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_servicebus_namespace_network_rule_set
func GetColumns_azurerm_servicebus_namespace_network_rule_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_action").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trusted_services_allowed").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_connection
func TableSchemaGenerator_azurerm_automation_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_connection
func GetColumns_azurerm_automation_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("values").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_machine_learning_inference_cluster
func TableSchemaGenerator_azurerm_machine_learning_inference_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_machine_learning_inference_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_machine_learning_inference_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_machine_learning_inference_cluster
func GetColumns_azurerm_machine_learning_inference_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_purpose").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kubernetes_cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("machine_learning_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_subscription_policy_remediation
func TableSchemaGenerator_azurerm_subscription_policy_remediation() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_subscription_policy_remediation().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_subscription_policy_remediation()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_subscription_policy_remediation
func GetColumns_azurerm_subscription_policy_remediation() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("failure_percentage").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location_filters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_reference_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_discovery_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parallel_deployments").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_assignment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_server_extended_auditing_policy
func TableSchemaGenerator_azurerm_mssql_server_extended_auditing_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_server_extended_auditing_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_server_extended_auditing_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_server_extended_auditing_policy
func GetColumns_azurerm_mssql_server_extended_auditing_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_in_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_monitoring_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key_is_secondary").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_security_rule
func TableSchemaGenerator_azurerm_network_security_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_security_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_security_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_security_rule
func GetColumns_azurerm_network_security_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("network_security_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_application_security_group_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_port_range").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_port_ranges").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_address_prefixes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("direction").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_address_prefix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_address_prefixes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_application_security_group_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_port_range").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_port_ranges").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_address_prefix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_netapp_account
func TableSchemaGenerator_azurerm_netapp_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_netapp_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_netapp_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_netapp_account
func GetColumns_azurerm_netapp_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("active_directory").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_nginx_certificate
func TableSchemaGenerator_azurerm_nginx_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_nginx_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_nginx_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_nginx_certificate
func GetColumns_azurerm_nginx_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_secret_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_virtual_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("nginx_deployment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_virtual_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_key_vault_managed_storage_account_sas_token_definition
func TableSchemaGenerator_azurerm_key_vault_managed_storage_account_sas_token_definition() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_key_vault_managed_storage_account_sas_token_definition().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_key_vault_managed_storage_account_sas_token_definition()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_key_vault_managed_storage_account_sas_token_definition
func GetColumns_azurerm_key_vault_managed_storage_account_sas_token_definition() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sas_template_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sas_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("validity_period").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secret_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_nat_gateway_public_ip_association
func TableSchemaGenerator_azurerm_nat_gateway_public_ip_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_nat_gateway_public_ip_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_nat_gateway_public_ip_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_nat_gateway_public_ip_association
func GetColumns_azurerm_nat_gateway_public_ip_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("public_ip_address_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("nat_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_maps_creator
func TableSchemaGenerator_azurerm_maps_creator() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_maps_creator().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_maps_creator()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_maps_creator
func GetColumns_azurerm_maps_creator() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maps_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_units").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_private_link_scope
func TableSchemaGenerator_azurerm_monitor_private_link_scope() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_private_link_scope().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_private_link_scope()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_private_link_scope
func GetColumns_azurerm_monitor_private_link_scope() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_endpoint_storage_container
func TableSchemaGenerator_azurerm_iothub_endpoint_storage_container() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_endpoint_storage_container().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_endpoint_storage_container()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_endpoint_storage_container
func GetColumns_azurerm_iothub_endpoint_storage_container() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("file_name_format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_chunk_size_in_bytes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("batch_frequency_in_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encoding").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_function_app
func TableSchemaGenerator_azurerm_function_app() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_function_app().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_function_app()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_function_app
func GetColumns_azurerm_function_app() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auth_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_builtin_logging").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_reference_identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_plan_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_cert_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_control").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_domain_verification_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("daily_memory_time_quota").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_container_registry_token
func TableSchemaGenerator_azurerm_container_registry_token() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_container_registry_token().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_container_registry_token()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_container_registry_token
func GetColumns_azurerm_container_registry_token() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("container_registry_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope_map_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_webhook
func TableSchemaGenerator_azurerm_automation_webhook() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_webhook().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_webhook()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_webhook
func GetColumns_azurerm_automation_webhook() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expiry_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("run_on_worker_group").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("runbook_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_hpc_cache_blob_nfs_target
func TableSchemaGenerator_azurerm_hpc_cache_blob_nfs_target() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_hpc_cache_blob_nfs_target().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_hpc_cache_blob_nfs_target()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_hpc_cache_blob_nfs_target
func GetColumns_azurerm_hpc_cache_blob_nfs_target() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("access_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("usage_model").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cache_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_machine_learning_workspace
func TableSchemaGenerator_azurerm_machine_learning_workspace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_machine_learning_workspace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_machine_learning_workspace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_machine_learning_workspace
func GetColumns_azurerm_machine_learning_workspace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("application_insights_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_registry_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("image_build_compute_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_user_assigned_identity").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_access_behind_virtual_network_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("v1_legacy_mode_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("discovery_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("friendly_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("high_business_impact").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_action_group
func TableSchemaGenerator_azurerm_monitor_action_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_action_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_action_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_action_group
func GetColumns_azurerm_monitor_action_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_runbook_receiver").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_function_receiver").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logic_app_receiver").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("email_receiver").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_hub_receiver").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("short_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_app_push_receiver").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sms_receiver").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("voice_receiver").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("arm_role_receiver").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("itsm_receiver").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("webhook_receiver").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_cname_record
func TableSchemaGenerator_azurerm_private_dns_cname_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_cname_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_cname_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_cname_record
func GetColumns_azurerm_private_dns_cname_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("record").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_group
func TableSchemaGenerator_azurerm_api_management_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_group
func GetColumns_azurerm_api_management_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("external_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mysql_flexible_server_configuration
func TableSchemaGenerator_azurerm_mysql_flexible_server_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mysql_flexible_server_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mysql_flexible_server_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mysql_flexible_server_configuration
func GetColumns_azurerm_mysql_flexible_server_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_profile
func TableSchemaGenerator_azurerm_cdn_profile() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_profile().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_profile()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_profile
func GetColumns_azurerm_cdn_profile() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_static_site
func TableSchemaGenerator_azurerm_static_site() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_static_site().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_static_site()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_static_site
func GetColumns_azurerm_static_site() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("default_host_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_security_center_setting
func TableSchemaGenerator_azurerm_security_center_setting() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_security_center_setting().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_security_center_setting()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_security_center_setting
func GetColumns_azurerm_security_center_setting() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("setting_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_server_security_alert_policy
func TableSchemaGenerator_azurerm_mssql_server_security_alert_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_server_security_alert_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_server_security_alert_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_server_security_alert_policy
func GetColumns_azurerm_mssql_server_security_alert_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("email_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("state").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disabled_alerts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("email_account_admins").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_lb_outbound_rule
func TableSchemaGenerator_azurerm_lb_outbound_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_lb_outbound_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_lb_outbound_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_lb_outbound_rule
func GetColumns_azurerm_lb_outbound_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_address_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("loadbalancer_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_ip_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allocated_outbound_ports").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_tcp_reset").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("idle_timeout_in_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kusto_cluster_managed_private_endpoint
func TableSchemaGenerator_azurerm_kusto_cluster_managed_private_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kusto_cluster_managed_private_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kusto_cluster_managed_private_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kusto_cluster_managed_private_endpoint
func GetColumns_azurerm_kusto_cluster_managed_private_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("private_link_resource_region").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_link_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("request_message").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_java_deployment
func TableSchemaGenerator_azurerm_spring_cloud_java_deployment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_java_deployment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_java_deployment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_java_deployment
func GetColumns_azurerm_spring_cloud_java_deployment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("instance_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("quota").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("runtime_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("environment_variables").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("jvm_options").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_credential
func TableSchemaGenerator_azurerm_automation_credential() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_credential().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_credential()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_credential
func GetColumns_azurerm_automation_credential() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_consumption_budget_management_group
func TableSchemaGenerator_azurerm_consumption_budget_management_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_consumption_budget_management_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_consumption_budget_management_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_consumption_budget_management_group
func GetColumns_azurerm_consumption_budget_management_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("etag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_grain").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notification").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_period").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("amount").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_vpn_gateway
func TableSchemaGenerator_azurerm_vpn_gateway() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_vpn_gateway().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_vpn_gateway()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_vpn_gateway
func GetColumns_azurerm_vpn_gateway() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scale_unit").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("routing_preference").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_hub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bgp_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bgp_route_translation_for_nat_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_security_center_assessment
func TableSchemaGenerator_azurerm_security_center_assessment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_security_center_assessment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_security_center_assessment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_security_center_assessment
func GetColumns_azurerm_security_center_assessment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_data").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("assessment_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_resource_deployment_script_azure_cli
func TableSchemaGenerator_azurerm_resource_deployment_script_azure_cli() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_resource_deployment_script_azure_cli().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_resource_deployment_script_azure_cli()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_resource_deployment_script_azure_cli
func GetColumns_azurerm_resource_deployment_script_azure_cli() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cleanup_preference").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("force_update_tag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("environment_variable").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_script_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_interval").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("command_line").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outputs").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("supporting_script_uris").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeout").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kusto_database_principal_assignment
func TableSchemaGenerator_azurerm_kusto_database_principal_assignment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kusto_database_principal_assignment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kusto_database_principal_assignment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kusto_database_principal_assignment
func GetColumns_azurerm_kusto_database_principal_assignment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dashboard
func TableSchemaGenerator_azurerm_dashboard() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dashboard().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dashboard()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dashboard
func GetColumns_azurerm_dashboard() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dashboard_properties").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mariadb_virtual_network_rule
func TableSchemaGenerator_azurerm_mariadb_virtual_network_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mariadb_virtual_network_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mariadb_virtual_network_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mariadb_virtual_network_rule
func GetColumns_azurerm_mariadb_virtual_network_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_hdinsight_spark_cluster
func TableSchemaGenerator_azurerm_hdinsight_spark_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_hdinsight_spark_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_hdinsight_spark_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_hdinsight_spark_cluster
func GetColumns_azurerm_hdinsight_spark_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("component_version").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("roles").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_gen2").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssh_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compute_isolation").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_encryption").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extension").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("security_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("monitor").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption_in_transit_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tls_min_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metastores").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_srv_record
func TableSchemaGenerator_azurerm_private_dns_srv_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_srv_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_srv_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_srv_record
func GetColumns_azurerm_private_dns_srv_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("record").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sql_managed_instance_failover_group
func TableSchemaGenerator_azurerm_sql_managed_instance_failover_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sql_managed_instance_failover_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sql_managed_instance_failover_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sql_managed_instance_failover_group
func GetColumns_azurerm_sql_managed_instance_failover_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("partner_managed_instance_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("readonly_endpoint_failover_policy_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_instance_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partner_region").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("read_write_endpoint_failover_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_web_application_firewall_policy
func TableSchemaGenerator_azurerm_web_application_firewall_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_web_application_firewall_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_web_application_firewall_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_web_application_firewall_policy
func GetColumns_azurerm_web_application_firewall_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("path_based_rule_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_listener_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_device_update_instance
func TableSchemaGenerator_azurerm_iothub_device_update_instance() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_device_update_instance().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_device_update_instance()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_device_update_instance
func GetColumns_azurerm_iothub_device_update_instance() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("device_update_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("diagnostic_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("diagnostic_storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_alert_rule_machine_learning_behavior_analytics
func TableSchemaGenerator_azurerm_sentinel_alert_rule_machine_learning_behavior_analytics() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_alert_rule_machine_learning_behavior_analytics().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_alert_rule_machine_learning_behavior_analytics()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_alert_rule_machine_learning_behavior_analytics
func GetColumns_azurerm_sentinel_alert_rule_machine_learning_behavior_analytics() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alert_rule_template_guid").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_output_servicebus_queue
func TableSchemaGenerator_azurerm_stream_analytics_output_servicebus_queue() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_output_servicebus_queue().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_output_servicebus_queue()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_output_servicebus_queue
func GetColumns_azurerm_stream_analytics_output_servicebus_queue() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("property_columns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("queue_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("system_property_columns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("serialization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("servicebus_namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_express_route_circuit_peering
func TableSchemaGenerator_azurerm_express_route_circuit_peering() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_express_route_circuit_peering().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_express_route_circuit_peering()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_express_route_circuit_peering
func GetColumns_azurerm_express_route_circuit_peering() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("peer_asn").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_azure_port").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("microsoft_peering_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ipv4_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("route_filter_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_peer_address_prefix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ipv6").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_asn").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("peering_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vlan_id").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("express_route_circuit_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_azure_port").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_peer_address_prefix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway_manager_etag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_search_service
func TableSchemaGenerator_azurerm_search_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_search_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_search_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_search_service
func GetColumns_azurerm_search_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query_keys").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allowed_ips").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("replica_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_hpc_cache
func TableSchemaGenerator_azurerm_hpc_cache() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_hpc_cache().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_hpc_cache()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_hpc_cache
func GetColumns_azurerm_hpc_cache() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("dns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("directory_active_directory").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("directory_flat_file").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automatically_rotate_key_to_latest_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_access_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("directory_ldap").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cache_size_in_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mount_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ntp_server").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mtu").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sql_managed_instance
func TableSchemaGenerator_azurerm_sql_managed_instance() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sql_managed_instance().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sql_managed_instance()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sql_managed_instance
func GetColumns_azurerm_sql_managed_instance() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("collation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("minimum_tls_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_size_in_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timezone_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_zone_partner_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proxy_override").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_data_endpoint_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vcores").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_security_center_auto_provisioning
func TableSchemaGenerator_azurerm_security_center_auto_provisioning() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_security_center_auto_provisioning().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_security_center_auto_provisioning()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_security_center_auto_provisioning
func GetColumns_azurerm_security_center_auto_provisioning() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_provision").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_azure_active_directory
func TableSchemaGenerator_azurerm_sentinel_data_connector_azure_active_directory() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_azure_active_directory().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_azure_active_directory()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_azure_active_directory
func GetColumns_azurerm_sentinel_data_connector_azure_active_directory() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_workspace_vulnerability_assessment
func TableSchemaGenerator_azurerm_synapse_workspace_vulnerability_assessment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_workspace_vulnerability_assessment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_workspace_vulnerability_assessment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_workspace_vulnerability_assessment
func GetColumns_azurerm_synapse_workspace_vulnerability_assessment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_sas_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_security_alert_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recurring_scans").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_blob
func TableSchemaGenerator_azurerm_storage_blob() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_blob().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_blob()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_blob
func GetColumns_azurerm_storage_blob() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cache_control").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parallelism").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_md5").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("size").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_virtual_network_rule
func TableSchemaGenerator_azurerm_mssql_virtual_network_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_virtual_network_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_virtual_network_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_virtual_network_rule
func GetColumns_azurerm_mssql_virtual_network_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ignore_missing_vnet_service_endpoint").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_share_dataset_kusto_database
func TableSchemaGenerator_azurerm_data_share_dataset_kusto_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_share_dataset_kusto_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_share_dataset_kusto_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_share_dataset_kusto_database
func GetColumns_azurerm_data_share_dataset_kusto_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("share_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kusto_cluster_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kusto_database_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_site_recovery_fabric
func TableSchemaGenerator_azurerm_site_recovery_fabric() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_site_recovery_fabric().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_site_recovery_fabric()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_site_recovery_fabric
func GetColumns_azurerm_site_recovery_fabric() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_disk_pool_iscsi_target
func TableSchemaGenerator_azurerm_disk_pool_iscsi_target() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_disk_pool_iscsi_target().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_disk_pool_iscsi_target()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_disk_pool_iscsi_target
func GetColumns_azurerm_disk_pool_iscsi_target() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoints").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_iqn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("acl_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disks_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_channel_alexa
func TableSchemaGenerator_azurerm_bot_channel_alexa() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_channel_alexa().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_channel_alexa()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_channel_alexa
func GetColumns_azurerm_bot_channel_alexa() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("skill_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_managed_application_definition
func TableSchemaGenerator_azurerm_managed_application_definition() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_managed_application_definition().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_managed_application_definition()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_managed_application_definition
func GetColumns_azurerm_managed_application_definition() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("lock_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("package_file_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authorization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("package_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_ui_definition").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("main_template").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_app
func TableSchemaGenerator_azurerm_spring_cloud_app() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_app().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_app()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_app
func GetColumns_azurerm_spring_cloud_app() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("addon_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_public").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tls_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_persistent_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ingress_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("persistent_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_endpoint_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_relay_namespace_authorization_rule
func TableSchemaGenerator_azurerm_relay_namespace_authorization_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_relay_namespace_authorization_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_relay_namespace_authorization_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_relay_namespace_authorization_rule
func GetColumns_azurerm_relay_namespace_authorization_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("listen").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("manage").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_certificate
func TableSchemaGenerator_azurerm_api_management_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_certificate
func GetColumns_azurerm_api_management_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subject").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expiration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_identity_client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_secret_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_source_control
func TableSchemaGenerator_azurerm_app_service_source_control() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_source_control().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_source_control()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_source_control
func GetColumns_azurerm_app_service_source_control() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("rollback_enabled").ColumnType(schema.ColumnTypeBool).Description("Should the Deployment Rollback be enabled? Defaults to `false`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scm_type").ColumnType(schema.ColumnTypeString).Description("The SCM Type in use. This value is decoded by the service from the repository information supplied.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_mercurial").ColumnType(schema.ColumnTypeBool).Description("The repository specified is Mercurial. Defaults to `false`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("github_action_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_id").ColumnType(schema.ColumnTypeString).Description("The ID of the Windows or Linux Web App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_local_git").ColumnType(schema.ColumnTypeBool).Description("Should the App use local Git configuration.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_manual_integration").ColumnType(schema.ColumnTypeBool).Description("Should code be deployed manually. Set to `false` to enable continuous integration, such as webhooks into online repos such as GitHub. Defaults to `false`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("uses_github_action").ColumnType(schema.ColumnTypeBool).Description("Indicates if the Slot uses a GitHub action for deployment. This value is decoded by the service from the repository information supplied.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("branch").ColumnType(schema.ColumnTypeString).Description("The branch name to use for deployments.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("repo_url").ColumnType(schema.ColumnTypeString).Description("The URL for the repository.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_gallery_application
func TableSchemaGenerator_azurerm_gallery_application() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_gallery_application().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_gallery_application()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_gallery_application
func GetColumns_azurerm_gallery_application() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("supported_os_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_of_life_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("privacy_statement_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("release_note_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eula").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_dps_certificate
func TableSchemaGenerator_azurerm_iothub_dps_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_dps_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_dps_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_dps_certificate
func GetColumns_azurerm_iothub_dps_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iot_dps_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_verified").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_function_app_hybrid_connection
func TableSchemaGenerator_azurerm_function_app_hybrid_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_function_app_hybrid_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_function_app_hybrid_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_function_app_hybrid_connection
func GetColumns_azurerm_function_app_hybrid_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("function_app_id").ColumnType(schema.ColumnTypeString).Description("The ID of the Function App for this Hybrid Connection.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname").ColumnType(schema.ColumnTypeString).Description("The hostname of the endpoint.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Description("The name of the Relay Namespace.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_key_name").ColumnType(schema.ColumnTypeString).Description("The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_key_value").ColumnType(schema.ColumnTypeString).Description("The Primary Access Key for the `send_key_name`").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_bus_namespace").ColumnType(schema.ColumnTypeString).Description("The Service Bus Namespace.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_bus_suffix").ColumnType(schema.ColumnTypeString).Description("The suffix for the endpoint.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("port").ColumnType(schema.ColumnTypeFloat).Description("The port to use for the endpoint").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("relay_id").ColumnType(schema.ColumnTypeString).Description("The ID of the Relay Hybrid Connection to use.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("relay_name").ColumnType(schema.ColumnTypeString).Description("The name of the Relay in use.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_pipeline
func TableSchemaGenerator_azurerm_data_factory_pipeline() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_pipeline().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_pipeline()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_pipeline
func GetColumns_azurerm_data_factory_pipeline() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("variables").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("concurrency").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("activities_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("moniter_metrics_after_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_machine_learning_compute_instance
func TableSchemaGenerator_azurerm_machine_learning_compute_instance() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_machine_learning_compute_instance().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_machine_learning_compute_instance()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_machine_learning_compute_instance
func GetColumns_azurerm_machine_learning_compute_instance() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authorization_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_auth_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("machine_learning_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("assign_to_user").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssh").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_custom_domain
func TableSchemaGenerator_azurerm_api_management_custom_domain() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_custom_domain().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_custom_domain()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_custom_domain
func GetColumns_azurerm_api_management_custom_domain() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("developer_portal").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("portal").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scm").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_managed_disk_sas_token
func TableSchemaGenerator_azurerm_managed_disk_sas_token() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_managed_disk_sas_token().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_managed_disk_sas_token()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_managed_disk_sas_token
func GetColumns_azurerm_managed_disk_sas_token() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("duration_in_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_disk_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sas_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_dataset_parquet
func TableSchemaGenerator_azurerm_data_factory_dataset_parquet() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_dataset_parquet().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_dataset_parquet()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_dataset_parquet
func GetColumns_azurerm_data_factory_dataset_parquet() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_server_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compression_codec").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compression_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_blob_storage_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_column").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_orbital_contact_profile
func TableSchemaGenerator_azurerm_orbital_contact_profile() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_orbital_contact_profile().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_orbital_contact_profile()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_orbital_contact_profile
func GetColumns_azurerm_orbital_contact_profile() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("links").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_tracking").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_hub_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("minimum_elevation_degrees").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("minimum_variable_contact_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_configuration_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_account_customer_managed_key
func TableSchemaGenerator_azurerm_storage_account_customer_managed_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_account_customer_managed_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_account_customer_managed_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_account_customer_managed_key
func GetColumns_azurerm_storage_account_customer_managed_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("user_assigned_identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kusto_attached_database_configuration
func TableSchemaGenerator_azurerm_kusto_attached_database_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kusto_attached_database_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kusto_attached_database_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kusto_attached_database_configuration
func GetColumns_azurerm_kusto_attached_database_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sharing").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("attached_database_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_principal_modification_kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_vpn_server_configuration
func TableSchemaGenerator_azurerm_vpn_server_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_vpn_server_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_vpn_server_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_vpn_server_configuration
func GetColumns_azurerm_vpn_server_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_revoked_certificate").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ipsec_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_active_directory_authentication").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_root_certificate").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("radius").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vpn_authentication_types").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vpn_protocols").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_output_powerbi
func TableSchemaGenerator_azurerm_stream_analytics_output_powerbi() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_output_powerbi().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_output_powerbi()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_output_powerbi
func GetColumns_azurerm_stream_analytics_output_powerbi() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("token_user_display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token_user_principal_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dataset").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_windows_web_app_slot
func TableSchemaGenerator_azurerm_windows_web_app_slot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_windows_web_app_slot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_windows_web_app_slot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_windows_web_app_slot
func GetColumns_azurerm_windows_web_app_slot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("logs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_domain_verification_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auth_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_affinity_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_exclusion_paths").ColumnType(schema.ColumnTypeString).Description("Paths to exclude when using client certificates, separated by ;").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zip_deploy_file").ColumnType(schema.ColumnTypeString).Description("The local path and filename of the Zip packaged application to deploy to this Windows Web App. **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` on the App in `app_settings`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_reference_identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_redis_enterprise_database
func TableSchemaGenerator_azurerm_redis_enterprise_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_redis_enterprise_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_redis_enterprise_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_redis_enterprise_database
func GetColumns_azurerm_redis_enterprise_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eviction_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("clustering_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_database_id").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_database_group_nickname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("module").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_reference_input_mssql
func TableSchemaGenerator_azurerm_stream_analytics_reference_input_mssql() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_reference_input_mssql().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_reference_input_mssql()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_reference_input_mssql
func GetColumns_azurerm_stream_analytics_reference_input_mssql() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("refresh_interval_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("refresh_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("delta_snapshot_query").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("full_snapshot_query").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_share_dataset_data_lake_gen2
func TableSchemaGenerator_azurerm_data_share_dataset_data_lake_gen2() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_share_dataset_data_lake_gen2().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_share_dataset_data_lake_gen2()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_share_dataset_data_lake_gen2
func GetColumns_azurerm_data_share_dataset_data_lake_gen2() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("file_system_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("file_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("share_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_data_collection_endpoint
func TableSchemaGenerator_azurerm_monitor_data_collection_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_data_collection_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_data_collection_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_data_collection_endpoint
func GetColumns_azurerm_monitor_data_collection_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("configuration_access_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logs_ingestion_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_resolver_dns_forwarding_ruleset
func TableSchemaGenerator_azurerm_private_dns_resolver_dns_forwarding_ruleset() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_resolver_dns_forwarding_ruleset().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_resolver_dns_forwarding_ruleset()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_resolver_dns_forwarding_ruleset
func GetColumns_azurerm_private_dns_resolver_dns_forwarding_ruleset() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_dns_resolver_outbound_endpoint_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_traffic_manager_profile
func TableSchemaGenerator_azurerm_traffic_manager_profile() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_traffic_manager_profile().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_traffic_manager_profile()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_traffic_manager_profile
func GetColumns_azurerm_traffic_manager_profile() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_return").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("monitor_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("profile_status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("traffic_routing_method").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("traffic_view_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_desktop_application
func TableSchemaGenerator_azurerm_virtual_desktop_application() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_desktop_application().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_desktop_application()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_desktop_application
func GetColumns_azurerm_virtual_desktop_application() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("command_line_argument_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("command_line_arguments").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("icon_index").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("icon_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("show_in_portal").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("friendly_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_integration_account_partner
func TableSchemaGenerator_azurerm_logic_app_integration_account_partner() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_integration_account_partner().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_integration_account_partner()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_integration_account_partner
func GetColumns_azurerm_logic_app_integration_account_partner() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("business_identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_variable_bool
func TableSchemaGenerator_azurerm_automation_variable_bool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_variable_bool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_variable_bool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_variable_bool
func GetColumns_azurerm_automation_variable_bool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encrypted").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_account
func TableSchemaGenerator_azurerm_cosmosdb_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_account
func GetColumns_azurerm_cosmosdb_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_strings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_identity_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_free_tier").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_acl_bypass_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_readonly_sql_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_sql_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_range_filter").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("offer_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("capabilities").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("geo_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_authentication_disabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_acl_bypass_for_azure_services").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_readonly_sql_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("read_endpoints").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cors_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("analytical_storage_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_readonly_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("consistency_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("restore").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_multiple_write_locations").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_virtual_network_filter_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_readonly_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_sql_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("write_endpoints").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("capacity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mongo_server_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_key_metadata_writes_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_automatic_failover").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("analytical_storage").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_site_recovery_protection_container_mapping
func TableSchemaGenerator_azurerm_site_recovery_protection_container_mapping() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_site_recovery_protection_container_mapping().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_site_recovery_protection_container_mapping()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_site_recovery_protection_container_mapping
func GetColumns_azurerm_site_recovery_protection_container_mapping() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_fabric_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_source_protection_container_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_replication_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_target_protection_container_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_web_app_active_slot
func TableSchemaGenerator_azurerm_web_app_active_slot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_web_app_active_slot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_web_app_active_slot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_web_app_active_slot
func GetColumns_azurerm_web_app_active_slot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("last_successful_swap").ColumnType(schema.ColumnTypeString).Description("The timestamp of the last successful swap with `Production`").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("overwrite_network_config").ColumnType(schema.ColumnTypeBool).Description("The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("slot_id").ColumnType(schema.ColumnTypeString).Description("The ID of the Slot to swap with `Production`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spatial_anchors_account
func TableSchemaGenerator_azurerm_spatial_anchors_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spatial_anchors_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spatial_anchors_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spatial_anchors_account
func GetColumns_azurerm_spatial_anchors_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_domain").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_windows_web_app
func TableSchemaGenerator_azurerm_windows_web_app() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_windows_web_app().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_windows_web_app()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_windows_web_app
func GetColumns_azurerm_windows_web_app() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_affinity_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_exclusion_paths").ColumnType(schema.ColumnTypeString).Description("Paths to exclude when using client certificates, separated by ;").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zip_deploy_file").ColumnType(schema.ColumnTypeString).Description("The local path and filename of the Zip packaged application to deploy to this Windows Web App. **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` on the App in `app_settings`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sticky_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auth_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_domain_verification_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_reference_identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_plan_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_media_asset_filter
func TableSchemaGenerator_azurerm_media_asset_filter() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_media_asset_filter().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_media_asset_filter()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_media_asset_filter
func GetColumns_azurerm_media_asset_filter() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("asset_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("first_quality_bitrate").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("presentation_time_range").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("track_selection").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_traffic_manager_external_endpoint
func TableSchemaGenerator_azurerm_traffic_manager_external_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_traffic_manager_external_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_traffic_manager_external_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_traffic_manager_external_endpoint
func GetColumns_azurerm_traffic_manager_external_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("geo_mappings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("profile_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("weight").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_header").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_public_ip
func TableSchemaGenerator_azurerm_public_ip() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_public_ip().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_public_ip()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_public_ip
func GetColumns_azurerm_public_ip() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("ddos_protection_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ddos_protection_plan_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("reverse_fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("domain_name_label").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allocation_method").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("idle_timeout_in_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_ip_prefix_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edge_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_watchlist
func TableSchemaGenerator_azurerm_sentinel_watchlist() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_watchlist().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_watchlist()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_watchlist
func GetColumns_azurerm_sentinel_watchlist() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("item_search_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("labels").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_dev_tool_portal
func TableSchemaGenerator_azurerm_spring_cloud_dev_tool_portal() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_dev_tool_portal().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_dev_tool_portal()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_dev_tool_portal
func GetColumns_azurerm_spring_cloud_dev_tool_portal() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("application_accelerator_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_live_view_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sso").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service
func TableSchemaGenerator_azurerm_app_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service
func GetColumns_azurerm_app_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_domain_verification_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_site_hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_affinity_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_control").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_reference_identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auth_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_cert_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_cert_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_plan_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_table
func TableSchemaGenerator_azurerm_cosmosdb_table() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_table().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_table()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_table
func GetColumns_azurerm_cosmosdb_table() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("throughput").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("autoscale_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_datadog_monitor_sso_configuration
func TableSchemaGenerator_azurerm_datadog_monitor_sso_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_datadog_monitor_sso_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_datadog_monitor_sso_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_datadog_monitor_sso_configuration
func GetColumns_azurerm_datadog_monitor_sso_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("datadog_monitor_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enterprise_application_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("login_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("single_sign_on_enabled").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_lb_backend_address_pool_address
func TableSchemaGenerator_azurerm_lb_backend_address_pool_address() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_lb_backend_address_pool_address().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_lb_backend_address_pool_address()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_lb_backend_address_pool_address
func GetColumns_azurerm_lb_backend_address_pool_address() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_id").ColumnType(schema.ColumnTypeString).Description("For regional load balancer, user needs to specify `virtual_network_id` and `ip_address`").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_address_ip_configuration_id").ColumnType(schema.ColumnTypeString).Description("For global load balancer, user needs to specify the `backend_address_ip_configuration_id` of the added regional load balancers").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_address_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("inbound_nat_rule_port_mapping").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_public_certificate
func TableSchemaGenerator_azurerm_app_service_public_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_public_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_public_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_public_certificate
func GetColumns_azurerm_app_service_public_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("blob").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_signalr_shared_private_link_resource
func TableSchemaGenerator_azurerm_signalr_shared_private_link_resource() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_signalr_shared_private_link_resource().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_signalr_shared_private_link_resource()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_signalr_shared_private_link_resource
func GetColumns_azurerm_signalr_shared_private_link_resource() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sub_resource_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("request_message").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("signalr_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_signalr_service
func TableSchemaGenerator_azurerm_signalr_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_signalr_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_signalr_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_signalr_service
func GetColumns_azurerm_signalr_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connectivity_logs_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("live_trace").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("messaging_logs_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cors").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("live_trace_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("upstream_endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_managed_instance_vulnerability_assessment
func TableSchemaGenerator_azurerm_mssql_managed_instance_vulnerability_assessment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_managed_instance_vulnerability_assessment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_managed_instance_vulnerability_assessment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_managed_instance_vulnerability_assessment
func GetColumns_azurerm_mssql_managed_instance_vulnerability_assessment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_sas_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recurring_scans").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_instance_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_connection
func TableSchemaGenerator_azurerm_spring_cloud_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_connection
func GetColumns_azurerm_spring_cloud_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vnet_solution").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_custom_domain_association
func TableSchemaGenerator_azurerm_cdn_frontdoor_custom_domain_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_custom_domain_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_custom_domain_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_custom_domain_association
func GetColumns_azurerm_cdn_frontdoor_custom_domain_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_custom_domain_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_route_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_firewall_rule
func TableSchemaGenerator_azurerm_mssql_firewall_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_firewall_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_firewall_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_firewall_rule
func GetColumns_azurerm_mssql_firewall_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("end_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_azure_table_storage
func TableSchemaGenerator_azurerm_data_factory_linked_service_azure_table_storage() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_azure_table_storage().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_azure_table_storage()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_azure_table_storage
func GetColumns_azurerm_data_factory_linked_service_azure_table_storage() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_frontdoor_rules_engine
func TableSchemaGenerator_azurerm_frontdoor_rules_engine() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_frontdoor_rules_engine().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_frontdoor_rules_engine()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_frontdoor_rules_engine
func GetColumns_azurerm_frontdoor_rules_engine() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontdoor_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_hpc_cache_blob_target
func TableSchemaGenerator_azurerm_hpc_cache_blob_target() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_hpc_cache_blob_target().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_hpc_cache_blob_target()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_hpc_cache_blob_target
func GetColumns_azurerm_hpc_cache_blob_target() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cache_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_private_link_hub
func TableSchemaGenerator_azurerm_synapse_private_link_hub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_private_link_hub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_private_link_hub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_private_link_hub
func GetColumns_azurerm_synapse_private_link_hub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_gateway_api
func TableSchemaGenerator_azurerm_api_management_gateway_api() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_gateway_api().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_gateway_api()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_gateway_api
func GetColumns_azurerm_api_management_gateway_api() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_profile
func TableSchemaGenerator_azurerm_network_profile() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_profile().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_profile()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_profile
func GetColumns_azurerm_network_profile() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_network_interface").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_network_interface_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_active_deployment
func TableSchemaGenerator_azurerm_spring_cloud_active_deployment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_active_deployment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_active_deployment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_active_deployment
func GetColumns_azurerm_spring_cloud_active_deployment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("deployment_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_application_security_group
func TableSchemaGenerator_azurerm_application_security_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_application_security_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_application_security_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_application_security_group
func GetColumns_azurerm_application_security_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_function_javascript_uda
func TableSchemaGenerator_azurerm_stream_analytics_function_javascript_uda() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_function_javascript_uda().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_function_javascript_uda()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_function_javascript_uda
func GetColumns_azurerm_stream_analytics_function_javascript_uda() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("input").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("output").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_security_center_server_vulnerability_assessment
func TableSchemaGenerator_azurerm_security_center_server_vulnerability_assessment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_security_center_server_vulnerability_assessment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_security_center_server_vulnerability_assessment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_security_center_server_vulnerability_assessment
func GetColumns_azurerm_security_center_server_vulnerability_assessment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("hybrid_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_digital_twins_endpoint_eventgrid
func TableSchemaGenerator_azurerm_digital_twins_endpoint_eventgrid() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_digital_twins_endpoint_eventgrid().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_digital_twins_endpoint_eventgrid()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_digital_twins_endpoint_eventgrid
func GetColumns_azurerm_digital_twins_endpoint_eventgrid() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dead_letter_storage_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("digital_twins_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventgrid_topic_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventgrid_topic_primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventgrid_topic_secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_vpn_server_configuration_policy_group
func TableSchemaGenerator_azurerm_vpn_server_configuration_policy_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_vpn_server_configuration_policy_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_vpn_server_configuration_policy_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_vpn_server_configuration_policy_group
func GetColumns_azurerm_vpn_server_configuration_policy_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_default").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vpn_server_configuration_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_disk_encryption_set
func TableSchemaGenerator_azurerm_disk_encryption_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_disk_encryption_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_disk_encryption_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_disk_encryption_set
func GetColumns_azurerm_disk_encryption_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_key_rotation_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("federated_client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_web_pubsub_hub
func TableSchemaGenerator_azurerm_web_pubsub_hub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_web_pubsub_hub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_web_pubsub_hub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_web_pubsub_hub
func GetColumns_azurerm_web_pubsub_hub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("anonymous_connections_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("web_pubsub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_handler").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventgrid_domain_topic
func TableSchemaGenerator_azurerm_eventgrid_domain_topic() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventgrid_domain_topic().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventgrid_domain_topic()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventgrid_domain_topic
func GetColumns_azurerm_eventgrid_domain_topic() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("domain_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_api_operation_tag
func TableSchemaGenerator_azurerm_api_management_api_operation_tag() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_api_operation_tag().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_api_operation_tag()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_api_operation_tag
func GetColumns_azurerm_api_management_api_operation_tag() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_operation_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_policy_virtual_machine_configuration_assignment
func TableSchemaGenerator_azurerm_policy_virtual_machine_configuration_assignment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_policy_virtual_machine_configuration_assignment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_policy_virtual_machine_configuration_assignment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_policy_virtual_machine_configuration_assignment
func GetColumns_azurerm_policy_virtual_machine_configuration_assignment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_machine_scale_set_packet_capture
func TableSchemaGenerator_azurerm_virtual_machine_scale_set_packet_capture() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_machine_scale_set_packet_capture().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_machine_scale_set_packet_capture()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_machine_scale_set_packet_capture
func GetColumns_azurerm_virtual_machine_scale_set_packet_capture() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_bytes_per_session").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_capture_duration_in_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_watcher_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("machine_scope").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_bytes_per_packet").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_scale_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_channel_direct_line_speech
func TableSchemaGenerator_azurerm_bot_channel_direct_line_speech() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_channel_direct_line_speech().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_channel_direct_line_speech()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_channel_direct_line_speech
func GetColumns_azurerm_bot_channel_direct_line_speech() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cognitive_service_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_speech_model_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cognitive_service_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_voice_deployment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_protection_backup_policy_blob_storage
func TableSchemaGenerator_azurerm_data_protection_backup_policy_blob_storage() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_protection_backup_policy_blob_storage().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_protection_backup_policy_blob_storage()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_protection_backup_policy_blob_storage
func GetColumns_azurerm_data_protection_backup_policy_blob_storage() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_encryption_scope
func TableSchemaGenerator_azurerm_storage_encryption_scope() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_encryption_scope().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_encryption_scope()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_encryption_scope
func GetColumns_azurerm_storage_encryption_scope() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("infrastructure_encryption_required").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_subnet_network_security_group_association
func TableSchemaGenerator_azurerm_subnet_network_security_group_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_subnet_network_security_group_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_subnet_network_security_group_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_subnet_network_security_group_association
func GetColumns_azurerm_subnet_network_security_group_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_security_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_group_user
func TableSchemaGenerator_azurerm_api_management_group_user() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_group_user().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_group_user()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_group_user
func GetColumns_azurerm_api_management_group_user() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_recovery_services_vault
func TableSchemaGenerator_azurerm_recovery_services_vault() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_recovery_services_vault().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_recovery_services_vault()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_recovery_services_vault
func GetColumns_azurerm_recovery_services_vault() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("soft_delete_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_mode_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cross_region_restore_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_certificate
func TableSchemaGenerator_azurerm_spring_cloud_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_certificate
func GetColumns_azurerm_spring_cloud_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_certificate_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_signalr_service_network_acl
func TableSchemaGenerator_azurerm_signalr_service_network_acl() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_signalr_service_network_acl().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_signalr_service_network_acl()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_signalr_service_network_acl
func GetColumns_azurerm_signalr_service_network_acl() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("default_action").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("signalr_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_lighthouse_assignment
func TableSchemaGenerator_azurerm_lighthouse_assignment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_lighthouse_assignment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_lighthouse_assignment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_lighthouse_assignment
func GetColumns_azurerm_lighthouse_assignment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lighthouse_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_vmware_cluster
func TableSchemaGenerator_azurerm_vmware_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_vmware_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_vmware_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_vmware_cluster
func GetColumns_azurerm_vmware_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("vmware_cloud_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_node_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_number").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hosts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logz_sub_account_tag_rule
func TableSchemaGenerator_azurerm_logz_sub_account_tag_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logz_sub_account_tag_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logz_sub_account_tag_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logz_sub_account_tag_rule
func GetColumns_azurerm_logz_sub_account_tag_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logz_sub_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_aad_logs").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_activity_logs").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_subscription_logs").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tag_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_application_insights_workbook
func TableSchemaGenerator_azurerm_application_insights_workbook() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_application_insights_workbook().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_application_insights_workbook()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_application_insights_workbook
func GetColumns_azurerm_application_insights_workbook() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("category").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mysql_configuration
func TableSchemaGenerator_azurerm_mysql_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mysql_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mysql_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mysql_configuration
func GetColumns_azurerm_mysql_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_packet_capture
func TableSchemaGenerator_azurerm_network_packet_capture() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_packet_capture().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_packet_capture()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_packet_capture
func GetColumns_azurerm_network_packet_capture() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_bytes_per_packet").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_bytes_per_session").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_capture_duration").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_watcher_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventhub_namespace_disaster_recovery_config
func TableSchemaGenerator_azurerm_eventhub_namespace_disaster_recovery_config() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventhub_namespace_disaster_recovery_config().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventhub_namespace_disaster_recovery_config()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventhub_namespace_disaster_recovery_config
func GetColumns_azurerm_eventhub_namespace_disaster_recovery_config() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partner_namespace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_build_deployment
func TableSchemaGenerator_azurerm_spring_cloud_build_deployment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_build_deployment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_build_deployment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_build_deployment
func GetColumns_azurerm_spring_cloud_build_deployment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("quota").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("build_result_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("environment_variables").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("addon_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("instance_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_outbound_firewall_rule
func TableSchemaGenerator_azurerm_mssql_outbound_firewall_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_outbound_firewall_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_outbound_firewall_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_outbound_firewall_rule
func GetColumns_azurerm_mssql_outbound_firewall_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iot_time_series_insights_access_policy
func TableSchemaGenerator_azurerm_iot_time_series_insights_access_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iot_time_series_insights_access_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iot_time_series_insights_access_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iot_time_series_insights_access_policy
func GetColumns_azurerm_iot_time_series_insights_access_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("roles").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_series_insights_environment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_object_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_vmware_private_cloud
func TableSchemaGenerator_azurerm_vmware_private_cloud() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_vmware_private_cloud().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_vmware_private_cloud()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_vmware_private_cloud
func GetColumns_azurerm_vmware_private_cloud() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("circuit").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internet_connection_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("nsxt_certificate_thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("nsxt_manager_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("nsxt_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hcx_cloud_manager_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_subnet_cidr").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("provisioning_subnet_cidr").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vcenter_certificate_thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_cluster").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_subnet_cidr").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vcenter_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vcsa_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vmotion_subnet_cidr").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dedicated_host
func TableSchemaGenerator_azurerm_dedicated_host() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dedicated_host().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dedicated_host()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dedicated_host
func GetColumns_azurerm_dedicated_host() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_replace_on_failure").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dedicated_host_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("platform_fault_domain").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_confidential_ledger
func TableSchemaGenerator_azurerm_confidential_ledger() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_confidential_ledger().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_confidential_ledger()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_confidential_ledger
func GetColumns_azurerm_confidential_ledger() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity_service_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ledger_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azuread_based_service_principal").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ledger_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_based_security_principal").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_environment_v3
func TableSchemaGenerator_azurerm_app_service_environment_v3() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_environment_v3().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_environment_v3()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_environment_v3
func GetColumns_azurerm_app_service_environment_v3() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_redundant").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("external_inbound_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("inbound_network_dependencies").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internal_inbound_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linux_outbound_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pricing_tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_suffix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internal_load_balancing_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_ssl_address_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("windows_outbound_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_setting").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_new_private_endpoint_connections").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dedicated_host_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_advanced_threat_protection
func TableSchemaGenerator_azurerm_advanced_threat_protection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_advanced_threat_protection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_advanced_threat_protection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_advanced_threat_protection
func GetColumns_azurerm_advanced_threat_protection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_machine_learning_compute_cluster
func TableSchemaGenerator_azurerm_machine_learning_compute_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_machine_learning_compute_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_machine_learning_compute_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_machine_learning_compute_cluster
func GetColumns_azurerm_machine_learning_compute_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("ssh_public_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vm_priority").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_auth_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssh").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vm_size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("machine_learning_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scale_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_stream_input_eventhub
func TableSchemaGenerator_azurerm_stream_analytics_stream_input_eventhub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_stream_input_eventhub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_stream_input_eventhub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_stream_input_eventhub
func GetColumns_azurerm_stream_analytics_stream_input_eventhub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("servicebus_namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("serialization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_consumer_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_connection_certificate
func TableSchemaGenerator_azurerm_automation_connection_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_connection_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_connection_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_connection_certificate
func GetColumns_azurerm_automation_connection_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_certificate_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_certificate_order
func TableSchemaGenerator_azurerm_app_service_certificate_order() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_certificate_order().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_certificate_order()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_certificate_order
func GetColumns_azurerm_app_service_certificate_order() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_certificate_not_renewable_reasons").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("signed_certificate_thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("intermediate_thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificates").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("csr").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("distinguished_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("domain_verification_token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expiration_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("validity_in_years").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_renew").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_private_key_external").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("product_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("root_thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_size").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_public_ip_prefix
func TableSchemaGenerator_azurerm_public_ip_prefix() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_public_ip_prefix().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_public_ip_prefix()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_public_ip_prefix
func GetColumns_azurerm_public_ip_prefix() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("prefix_length").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_prefix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_route_table
func TableSchemaGenerator_azurerm_route_table() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_route_table().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_route_table()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_route_table
func GetColumns_azurerm_route_table() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("disable_bgp_route_propagation").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("route").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnets").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_app_mysql_association
func TableSchemaGenerator_azurerm_spring_cloud_app_mysql_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_app_mysql_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_app_mysql_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_app_mysql_association
func GetColumns_azurerm_spring_cloud_app_mysql_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mysql_server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_product
func TableSchemaGenerator_azurerm_api_management_product() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_product().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_product()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_product
func GetColumns_azurerm_api_management_product() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("approval_required").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("product_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("published").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_required").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscriptions_limit").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("terms").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_maintenance_assignment_virtual_machine_scale_set
func TableSchemaGenerator_azurerm_maintenance_assignment_virtual_machine_scale_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_maintenance_assignment_virtual_machine_scale_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_maintenance_assignment_virtual_machine_scale_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_maintenance_assignment_virtual_machine_scale_set
func GetColumns_azurerm_maintenance_assignment_virtual_machine_scale_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maintenance_configuration_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_scale_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_protection_resource_guard
func TableSchemaGenerator_azurerm_data_protection_resource_guard() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_protection_resource_guard().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_protection_resource_guard()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_protection_resource_guard
func GetColumns_azurerm_data_protection_resource_guard() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vault_critical_operation_exclusion_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_workflow
func TableSchemaGenerator_azurerm_logic_app_workflow() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_workflow().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_workflow()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_workflow
func GetColumns_azurerm_logic_app_workflow() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workflow_outbound_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workflow_parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_control").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connector_endpoint_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workflow_schema").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_service_environment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workflow_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connector_outbound_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logic_app_integration_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workflow_endpoint_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_healthcare_dicom_service
func TableSchemaGenerator_azurerm_healthcare_dicom_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_healthcare_dicom_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_healthcare_dicom_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_healthcare_dicom_service
func GetColumns_azurerm_healthcare_dicom_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_channel_email
func TableSchemaGenerator_azurerm_bot_channel_email() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_channel_email().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_channel_email()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_channel_email
func GetColumns_azurerm_bot_channel_email() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("email_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("email_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_managed_instance_transparent_data_encryption
func TableSchemaGenerator_azurerm_mssql_managed_instance_transparent_data_encryption() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_managed_instance_transparent_data_encryption().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_managed_instance_transparent_data_encryption()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_managed_instance_transparent_data_encryption
func GetColumns_azurerm_mssql_managed_instance_transparent_data_encryption() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_rotation_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_instance_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_orchestrated_virtual_machine_scale_set
func TableSchemaGenerator_azurerm_orchestrated_virtual_machine_scale_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_orchestrated_virtual_machine_scale_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_orchestrated_virtual_machine_scale_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_orchestrated_virtual_machine_scale_set
func GetColumns_azurerm_orchestrated_virtual_machine_scale_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("capacity_reservation_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_image_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption_at_host_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eviction_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extensions_time_budget").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_bid_price").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_balance").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_capabilities").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("boot_diagnostics").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("termination_notification").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automatic_instance_repair").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extension_operations_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("platform_fault_domain_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extension").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("instances").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proximity_placement_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("single_placement_group").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_data_base64").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("unique_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_image_reference").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_security_center_workspace
func TableSchemaGenerator_azurerm_security_center_workspace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_security_center_workspace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_security_center_workspace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_security_center_workspace
func GetColumns_azurerm_security_center_workspace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_subnet_nat_gateway_association
func TableSchemaGenerator_azurerm_subnet_nat_gateway_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_subnet_nat_gateway_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_subnet_nat_gateway_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_subnet_nat_gateway_association
func GetColumns_azurerm_subnet_nat_gateway_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("nat_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_identity_provider_twitter
func TableSchemaGenerator_azurerm_api_management_identity_provider_twitter() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_identity_provider_twitter().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_identity_provider_twitter()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_identity_provider_twitter
func GetColumns_azurerm_api_management_identity_provider_twitter() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_secret_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_subscription_template_deployment
func TableSchemaGenerator_azurerm_subscription_template_deployment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_subscription_template_deployment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_subscription_template_deployment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_subscription_template_deployment
func GetColumns_azurerm_subscription_template_deployment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("debug_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("output_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template_spec_version_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_lab_service_plan
func TableSchemaGenerator_azurerm_lab_service_plan() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_lab_service_plan().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_lab_service_plan()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_lab_service_plan
func GetColumns_azurerm_lab_service_plan() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("default_network_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_auto_shutdown").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_connection").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("support").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allowed_regions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_gallery_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_disk_pool_iscsi_target_lun
func TableSchemaGenerator_azurerm_disk_pool_iscsi_target_lun() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_disk_pool_iscsi_target_lun().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_disk_pool_iscsi_target_lun()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_disk_pool_iscsi_target_lun
func GetColumns_azurerm_disk_pool_iscsi_target_lun() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iscsi_target_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lun").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_pool_managed_disk_attachment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_secret
func TableSchemaGenerator_azurerm_cdn_frontdoor_secret() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_secret().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_secret()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_secret
func GetColumns_azurerm_cdn_frontdoor_secret() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_profile_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_profile_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secret").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_media_job
func TableSchemaGenerator_azurerm_media_job() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_media_job().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_media_job()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_media_job
func GetColumns_azurerm_media_job() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("transform_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("media_services_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("input_asset").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("output_asset").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_resource_policy_remediation
func TableSchemaGenerator_azurerm_resource_policy_remediation() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_resource_policy_remediation().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_resource_policy_remediation()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_resource_policy_remediation
func GetColumns_azurerm_resource_policy_remediation() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location_filters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parallel_deployments").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_assignment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("failure_percentage").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_reference_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_discovery_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_capacity_reservation
func TableSchemaGenerator_azurerm_capacity_reservation() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_capacity_reservation().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_capacity_reservation()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_capacity_reservation
func GetColumns_azurerm_capacity_reservation() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("capacity_reservation_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_logger
func TableSchemaGenerator_azurerm_api_management_logger() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_logger().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_logger()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_logger
func GetColumns_azurerm_api_management_logger() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_insights").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("buffered").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_application_insights_workbook_template
func TableSchemaGenerator_azurerm_application_insights_workbook_template() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_application_insights_workbook_template().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_application_insights_workbook_template()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_application_insights_workbook_template
func GetColumns_azurerm_application_insights_workbook_template() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("galleries").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("localized").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("author").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_subnet
func TableSchemaGenerator_azurerm_subnet() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_subnet().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_subnet()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_subnet
func GetColumns_azurerm_subnet() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enforce_private_link_service_network_policies").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_endpoint_network_policies_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_endpoint_policy_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_endpoints").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("delegation").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("address_prefixes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enforce_private_link_endpoint_network_policies").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_link_service_network_policies_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_media_streaming_locator
func TableSchemaGenerator_azurerm_media_streaming_locator() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_media_streaming_locator().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_media_streaming_locator()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_media_streaming_locator
func GetColumns_azurerm_media_streaming_locator() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("streaming_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("asset_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_content_key_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("media_services_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("streaming_locator_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alternative_media_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_network_gateway_connection
func TableSchemaGenerator_azurerm_virtual_network_gateway_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_network_gateway_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_network_gateway_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_network_gateway_connection
func GetColumns_azurerm_virtual_network_gateway_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_bgp").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("routing_weight").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_policy_based_traffic_selectors").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_bgp_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("egress_nat_rule_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("peer_virtual_network_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authorization_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ingress_nat_rule_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_azure_ip_address_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("traffic_selector_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dpd_timeout_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("express_route_circuit_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("express_route_gateway_bypass").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_network_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ipsec_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_route_filter
func TableSchemaGenerator_azurerm_route_filter() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_route_filter().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_route_filter()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_route_filter
func GetColumns_azurerm_route_filter() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_container_connected_registry
func TableSchemaGenerator_azurerm_container_connected_registry() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_container_connected_registry().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_container_connected_registry()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_container_connected_registry
func GetColumns_azurerm_container_connected_registry() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("container_registry_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sync_schedule").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("audit_log_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sync_window").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notification").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sync_message_ttl").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parent_registry_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sync_token_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_token_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_gateway_custom_domain
func TableSchemaGenerator_azurerm_spring_cloud_gateway_custom_domain() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_gateway_custom_domain().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_gateway_custom_domain()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_gateway_custom_domain
func GetColumns_azurerm_spring_cloud_gateway_custom_domain() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_endpoint
func TableSchemaGenerator_azurerm_private_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_endpoint
func GetColumns_azurerm_private_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("private_service_connection").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_dns_configs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_dns_zone_configs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_dns_zone_group").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_network_interface_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_role_definition
func TableSchemaGenerator_azurerm_role_definition() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_role_definition().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_role_definition()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_role_definition
func GetColumns_azurerm_role_definition() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("permissions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("assignable_scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role_definition_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_fluid_relay_server
func TableSchemaGenerator_azurerm_fluid_relay_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_fluid_relay_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_fluid_relay_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_fluid_relay_server
func GetColumns_azurerm_fluid_relay_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_endpoints").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_endpoints").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frs_tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("orderer_endpoints").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_postgresql_configuration
func TableSchemaGenerator_azurerm_postgresql_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_postgresql_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_postgresql_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_postgresql_configuration
func GetColumns_azurerm_postgresql_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_api_operation
func TableSchemaGenerator_azurerm_api_management_api_operation() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_api_operation().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_api_operation()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_api_operation
func GetColumns_azurerm_api_management_api_operation() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("response").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template_parameter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("method").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("operation_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url_template").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("request").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_shared_image_version
func TableSchemaGenerator_azurerm_shared_image_version() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_shared_image_version().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_shared_image_version()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_shared_image_version
func GetColumns_azurerm_shared_image_version() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("exclude_from_latest").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("replication_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("image_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_image_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_region").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("blob_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_of_life_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_disk_snapshot_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_postgresql_server
func TableSchemaGenerator_azurerm_postgresql_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_postgresql_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_postgresql_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_postgresql_server
func GetColumns_azurerm_postgresql_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_grow_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("geo_redundant_backup_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_enforcement_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("threat_detection_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("infrastructure_encryption_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("restore_point_in_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_minimal_tls_version_enforced").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_mb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("creation_source_server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_odata
func TableSchemaGenerator_azurerm_data_factory_linked_service_odata() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_odata().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_odata()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_odata
func GetColumns_azurerm_data_factory_linked_service_odata() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("basic_authentication").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventhub_namespace_authorization_rule
func TableSchemaGenerator_azurerm_eventhub_namespace_authorization_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventhub_namespace_authorization_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventhub_namespace_authorization_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventhub_namespace_authorization_rule
func GetColumns_azurerm_eventhub_namespace_authorization_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("listen").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("manage").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logz_sub_account
func TableSchemaGenerator_azurerm_logz_sub_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logz_sub_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logz_sub_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logz_sub_account
func GetColumns_azurerm_logz_sub_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("user").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logz_monitor_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_container_registry_agent_pool
func TableSchemaGenerator_azurerm_container_registry_agent_pool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_container_registry_agent_pool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_container_registry_agent_pool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_container_registry_agent_pool
func GetColumns_azurerm_container_registry_agent_pool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("instance_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_registry_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_route
func TableSchemaGenerator_azurerm_route() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_route().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_route()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_route
func GetColumns_azurerm_route() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("next_hop_in_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("next_hop_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("route_table_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("address_prefix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_subscription_policy_exemption
func TableSchemaGenerator_azurerm_subscription_policy_exemption() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_subscription_policy_exemption().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_subscription_policy_exemption()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_subscription_policy_exemption
func GetColumns_azurerm_subscription_policy_exemption() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("exemption_category").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expires_on").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_assignment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_reference_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_runbook
func TableSchemaGenerator_azurerm_automation_runbook() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_runbook().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_runbook()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_runbook
func GetColumns_azurerm_automation_runbook() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("log_activity_trace_level").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_verbose").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("runbook_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("draft").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_progress").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("publish_content_link").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("job_schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_policy_set_definition
func TableSchemaGenerator_azurerm_policy_set_definition() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_policy_set_definition().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_policy_set_definition()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_policy_set_definition
func GetColumns_azurerm_policy_set_definition() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_group").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_reference").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_link_service
func TableSchemaGenerator_azurerm_private_link_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_link_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_link_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_link_service
func GetColumns_azurerm_private_link_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_proxy_protocol").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("load_balancer_frontend_ip_configuration_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_approval_subscription_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("visibility_subscription_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("nat_ip_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_database_migration_project
func TableSchemaGenerator_azurerm_database_migration_project() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_database_migration_project().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_database_migration_project()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_database_migration_project
func GetColumns_azurerm_database_migration_project() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_platform").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_platform").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventgrid_system_topic_event_subscription
func TableSchemaGenerator_azurerm_eventgrid_system_topic_event_subscription() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventgrid_system_topic_event_subscription().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventgrid_system_topic_event_subscription()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventgrid_system_topic_event_subscription
func GetColumns_azurerm_eventgrid_system_topic_event_subscription() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("delivery_identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subject_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_delivery_schema").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expiration_time_utc").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("labels").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_bus_topic_endpoint_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("advanced_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hybrid_connection_endpoint_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_function_endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dead_letter_identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_queue_endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("included_event_types").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_bus_queue_endpoint_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("webhook_endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retry_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_blob_dead_letter_destination").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("advanced_filtering_on_arrays_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_endpoint_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("system_topic").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("delivery_property").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_origin_group
func TableSchemaGenerator_azurerm_cdn_frontdoor_origin_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_origin_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_origin_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_origin_group
func GetColumns_azurerm_cdn_frontdoor_origin_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_profile_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("restore_traffic_time_to_healed_or_new_endpoint_in_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("session_affinity_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("health_probe").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("load_balancing").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_channel_web_chat
func TableSchemaGenerator_azurerm_bot_channel_web_chat() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_channel_web_chat().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_channel_web_chat()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_channel_web_chat
func GetColumns_azurerm_bot_channel_web_chat() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dns_txt_record
func TableSchemaGenerator_azurerm_dns_txt_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dns_txt_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dns_txt_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dns_txt_record
func GetColumns_azurerm_dns_txt_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("record").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_portal_dashboard
func TableSchemaGenerator_azurerm_portal_dashboard() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_portal_dashboard().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_portal_dashboard()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_portal_dashboard
func GetColumns_azurerm_portal_dashboard() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dashboard_properties").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_output_servicebus_topic
func TableSchemaGenerator_azurerm_stream_analytics_output_servicebus_topic() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_output_servicebus_topic().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_output_servicebus_topic()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_output_servicebus_topic
func GetColumns_azurerm_stream_analytics_output_servicebus_topic() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("property_columns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("servicebus_namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("system_property_columns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("serialization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("topic_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_managed_instance_active_directory_administrator
func TableSchemaGenerator_azurerm_mssql_managed_instance_active_directory_administrator() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_managed_instance_active_directory_administrator().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_managed_instance_active_directory_administrator()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_managed_instance_active_directory_administrator
func GetColumns_azurerm_mssql_managed_instance_active_directory_administrator() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azuread_authentication_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("login_username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_instance_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("object_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_custom_dataset
func TableSchemaGenerator_azurerm_data_factory_custom_dataset() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_custom_dataset().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_custom_dataset()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_custom_dataset
func GetColumns_azurerm_data_factory_custom_dataset() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_service").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type_properties_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_linux_web_app_slot
func TableSchemaGenerator_azurerm_linux_web_app_slot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_linux_web_app_slot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_linux_web_app_slot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_linux_web_app_slot
func GetColumns_azurerm_linux_web_app_slot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_exclusion_paths").ColumnType(schema.ColumnTypeString).Description("Paths to exclude when using client certificates, separated by ;").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_affinity_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_domain_verification_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zip_deploy_file").ColumnType(schema.ColumnTypeString).Description("The local path and filename of the Zip packaged application to deploy to this Windows Web App. **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` on the App in `app_settings`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_reference_identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auth_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_linux_function_app
func TableSchemaGenerator_azurerm_linux_function_app() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_linux_function_app().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_linux_function_app()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_linux_function_app
func GetColumns_azurerm_linux_function_app() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_domain_verification_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auth_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sticky_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_mode").ColumnType(schema.ColumnTypeString).Description("The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser` ").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Description("The access key which will be used to access the storage account for the Function App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("builtin_logging_enabled").ColumnType(schema.ColumnTypeBool).Description("Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Description("Is the Linux Function App enabled.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Description("Can the Function App only be accessed via HTTPS?").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_plan_id").ColumnType(schema.ColumnTypeString).Description("The ID of the App Service Plan within which to create this Function App").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_share_force_disabled").ColumnType(schema.ColumnTypeBool).Description("Force disable the content share settings.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("daily_memory_time_quota").ColumnType(schema.ColumnTypeFloat).Description("The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps in Consumption Plans.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Description("The backend storage account name which will be used by this Function App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).Description("A map of key-value pairs for [App Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_enabled").ColumnType(schema.ColumnTypeBool).Description("Should the function app use Client Certificates").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_exclusion_paths").ColumnType(schema.ColumnTypeString).Description("Paths to exclude when using client certificates, separated by ;").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("functions_extension_version").ColumnType(schema.ColumnTypeString).Description("The runtime version associated with the Function App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_reference_identity_id").ColumnType(schema.ColumnTypeString).Description("The User Assigned Identity to use for Key Vault access.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Description("Specifies the name of the Function App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_key_vault_secret_id").ColumnType(schema.ColumnTypeString).Description("The Key Vault Secret ID, including version, that contains the Connection String to connect to the storage account for this Function App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_uses_managed_identity").ColumnType(schema.ColumnTypeBool).Description("Should the Function App use its Managed Identity to access storage?").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_lb_probe
func TableSchemaGenerator_azurerm_lb_probe() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_lb_probe().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_lb_probe()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_lb_probe
func GetColumns_azurerm_lb_probe() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("number_of_probes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("probe_threshold").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("interval_in_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("load_balancer_rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("request_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("loadbalancer_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_key_vault
func TableSchemaGenerator_azurerm_key_vault() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_key_vault().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_key_vault()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_key_vault
func GetColumns_azurerm_key_vault() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled_for_template_deployment").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("soft_delete_retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vault_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled_for_deployment").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("contact").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_rbac_authorization").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled_for_disk_encryption").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_acls").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("purge_protection_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_servicebus_subscription_rule
func TableSchemaGenerator_azurerm_servicebus_subscription_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_servicebus_subscription_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_servicebus_subscription_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_servicebus_subscription_rule
func GetColumns_azurerm_servicebus_subscription_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("filter_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("correlation_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_filter").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_filter_compatibility_level").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_slot
func TableSchemaGenerator_azurerm_app_service_slot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_slot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_slot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_slot
func GetColumns_azurerm_app_service_slot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_reference_identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_affinity_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auth_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_site_hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_plan_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_machine
func TableSchemaGenerator_azurerm_virtual_machine() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_machine().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_machine()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_machine
func GetColumns_azurerm_virtual_machine() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("delete_data_disks_on_termination").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("delete_os_disk_on_termination").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_image_reference").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_os_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proximity_placement_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vm_size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_capabilities").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("boot_diagnostics").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_profile_linux_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_profile_windows_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_data_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("availability_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_network_interface_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_profile_secrets").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventhub_namespace_customer_managed_key
func TableSchemaGenerator_azurerm_eventhub_namespace_customer_managed_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventhub_namespace_customer_managed_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventhub_namespace_customer_managed_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventhub_namespace_customer_managed_key
func GetColumns_azurerm_eventhub_namespace_customer_managed_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_namespace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_postgresql_firewall_rule
func TableSchemaGenerator_azurerm_postgresql_firewall_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_postgresql_firewall_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_postgresql_firewall_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_postgresql_firewall_rule
func GetColumns_azurerm_postgresql_firewall_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_datasource_windows_performance_counter
func TableSchemaGenerator_azurerm_log_analytics_datasource_windows_performance_counter() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_datasource_windows_performance_counter().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_datasource_windows_performance_counter()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_datasource_windows_performance_counter
func GetColumns_azurerm_log_analytics_datasource_windows_performance_counter() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("instance_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("object_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("interval_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("counter_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_endpoint_servicebus_queue
func TableSchemaGenerator_azurerm_iothub_endpoint_servicebus_queue() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_endpoint_servicebus_queue().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_endpoint_servicebus_queue()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_endpoint_servicebus_queue
func GetColumns_azurerm_iothub_endpoint_servicebus_queue() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("entity_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventhub
func TableSchemaGenerator_azurerm_eventhub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventhub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventhub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventhub
func GetColumns_azurerm_eventhub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("capture_description").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("message_retention").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_identity_provider_microsoft
func TableSchemaGenerator_azurerm_api_management_identity_provider_microsoft() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_identity_provider_microsoft().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_identity_provider_microsoft()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_identity_provider_microsoft
func GetColumns_azurerm_api_management_identity_provider_microsoft() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sql_database
func TableSchemaGenerator_azurerm_sql_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sql_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sql_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sql_database
func GetColumns_azurerm_sql_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_redundant").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("import").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("threat_detection_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edition").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("read_scale").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("requested_service_objective_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("restore_point_in_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("collation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("creation_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_secondary_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_database_deletion_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("requested_service_objective_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_database_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("elastic_pool_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_size_bytes").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_size_gb").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cognitive_account_customer_managed_key
func TableSchemaGenerator_azurerm_cognitive_account_customer_managed_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cognitive_account_customer_managed_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cognitive_account_customer_managed_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cognitive_account_customer_managed_key
func GetColumns_azurerm_cognitive_account_customer_managed_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cognitive_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity_client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sql_virtual_network_rule
func TableSchemaGenerator_azurerm_sql_virtual_network_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sql_virtual_network_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sql_virtual_network_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sql_virtual_network_rule
func GetColumns_azurerm_sql_virtual_network_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ignore_missing_vnet_service_endpoint").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_virtual_network_swift_connection
func TableSchemaGenerator_azurerm_app_service_virtual_network_swift_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_virtual_network_swift_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_virtual_network_swift_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_virtual_network_swift_connection
func GetColumns_azurerm_app_service_virtual_network_swift_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dns_ptr_record
func TableSchemaGenerator_azurerm_dns_ptr_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dns_ptr_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dns_ptr_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dns_ptr_record
func GetColumns_azurerm_dns_ptr_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("records").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kubernetes_fleet_manager
func TableSchemaGenerator_azurerm_kubernetes_fleet_manager() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kubernetes_fleet_manager().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kubernetes_fleet_manager()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kubernetes_fleet_manager
func GetColumns_azurerm_kubernetes_fleet_manager() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("hub_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sql_firewall_rule
func TableSchemaGenerator_azurerm_sql_firewall_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sql_firewall_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sql_firewall_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sql_firewall_rule
func GetColumns_azurerm_sql_firewall_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_module
func TableSchemaGenerator_azurerm_automation_module() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_module().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_module()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_module
func GetColumns_azurerm_automation_module() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("module_link").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_sql_trigger
func TableSchemaGenerator_azurerm_cosmosdb_sql_trigger() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_sql_trigger().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_sql_trigger()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_sql_trigger
func GetColumns_azurerm_cosmosdb_sql_trigger() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("operation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sql_elasticpool
func TableSchemaGenerator_azurerm_sql_elasticpool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sql_elasticpool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sql_elasticpool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sql_elasticpool
func GetColumns_azurerm_sql_elasticpool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("db_dtu_max").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("db_dtu_min").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dtu").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edition").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("creation_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pool_size").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_maps_account
func TableSchemaGenerator_azurerm_maps_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_maps_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_maps_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_maps_account
func GetColumns_azurerm_maps_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("x_ms_client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_lb_backend_address_pool
func TableSchemaGenerator_azurerm_lb_backend_address_pool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_lb_backend_address_pool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_lb_backend_address_pool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_lb_backend_address_pool
func GetColumns_azurerm_lb_backend_address_pool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("load_balancing_rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("loadbalancer_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("inbound_nat_rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tunnel_interface").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_ip_configurations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_hpc_cache_nfs_target
func TableSchemaGenerator_azurerm_hpc_cache_nfs_target() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_hpc_cache_nfs_target().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_hpc_cache_nfs_target()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_hpc_cache_nfs_target
func GetColumns_azurerm_hpc_cache_nfs_target() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_junction").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cache_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_host_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("usage_model").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_schedule
func TableSchemaGenerator_azurerm_automation_schedule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_schedule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_schedule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_schedule
func GetColumns_azurerm_automation_schedule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("expiry_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("interval").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("week_days").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("monthly_occurrence").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frequency").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("month_days").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timezone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_iot
func TableSchemaGenerator_azurerm_sentinel_data_connector_iot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_iot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_iot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_iot
func GetColumns_azurerm_sentinel_data_connector_iot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_gremlin_database
func TableSchemaGenerator_azurerm_cosmosdb_gremlin_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_gremlin_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_gremlin_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_gremlin_database
func GetColumns_azurerm_cosmosdb_gremlin_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("throughput").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("autoscale_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_alert_rule_fusion
func TableSchemaGenerator_azurerm_sentinel_alert_rule_fusion() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_alert_rule_fusion().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_alert_rule_fusion()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_alert_rule_fusion
func GetColumns_azurerm_sentinel_alert_rule_fusion() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alert_rule_template_guid").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_sql_dedicated_gateway
func TableSchemaGenerator_azurerm_cosmosdb_sql_dedicated_gateway() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_sql_dedicated_gateway().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_sql_dedicated_gateway()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_sql_dedicated_gateway
func GetColumns_azurerm_cosmosdb_sql_dedicated_gateway() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("instance_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("instance_size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cosmosdb_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_job_agent
func TableSchemaGenerator_azurerm_mssql_job_agent() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_job_agent().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_job_agent()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_job_agent
func GetColumns_azurerm_mssql_job_agent() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kusto_database
func TableSchemaGenerator_azurerm_kusto_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kusto_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kusto_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kusto_database
func GetColumns_azurerm_kusto_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("soft_delete_period").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("size").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hot_cache_period").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_subscription_cost_management_export
func TableSchemaGenerator_azurerm_subscription_cost_management_export() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_subscription_cost_management_export().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_subscription_cost_management_export()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_subscription_cost_management_export
func GetColumns_azurerm_subscription_cost_management_export() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("export_data_options").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recurrence_period_start_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recurrence_period_end_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recurrence_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("export_data_storage_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("active").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_backup_policy_file_share
func TableSchemaGenerator_azurerm_backup_policy_file_share() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_backup_policy_file_share().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_backup_policy_file_share()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_backup_policy_file_share
func GetColumns_azurerm_backup_policy_file_share() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_daily").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_monthly").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_weekly").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_yearly").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timezone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_diagnostic_setting
func TableSchemaGenerator_azurerm_monitor_diagnostic_setting() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_diagnostic_setting().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_diagnostic_setting()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_diagnostic_setting
func GetColumns_azurerm_monitor_diagnostic_setting() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metric").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_authorization_rule_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_destination_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partner_solution_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_rule_set
func TableSchemaGenerator_azurerm_cdn_frontdoor_rule_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_rule_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_rule_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_rule_set
func GetColumns_azurerm_cdn_frontdoor_rule_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_profile_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_resource_policy_assignment
func TableSchemaGenerator_azurerm_resource_policy_assignment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_resource_policy_assignment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_resource_policy_assignment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_resource_policy_assignment
func GetColumns_azurerm_resource_policy_assignment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enforce").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("non_compliance_message").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("not_scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_security_center_server_vulnerability_assessment_virtual_machine
func TableSchemaGenerator_azurerm_security_center_server_vulnerability_assessment_virtual_machine() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_security_center_server_vulnerability_assessment_virtual_machine().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_security_center_server_vulnerability_assessment_virtual_machine()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_security_center_server_vulnerability_assessment_virtual_machine
func GetColumns_azurerm_security_center_server_vulnerability_assessment_virtual_machine() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_application_insights_web_test
func TableSchemaGenerator_azurerm_application_insights_web_test() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_application_insights_web_test().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_application_insights_web_test()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_application_insights_web_test
func GetColumns_azurerm_application_insights_web_test() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("frequency").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retry_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synthetic_monitor_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("configuration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("geo_locations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeout").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_insights_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_protection_backup_instance_disk
func TableSchemaGenerator_azurerm_data_protection_backup_instance_disk() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_protection_backup_instance_disk().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_protection_backup_instance_disk()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_protection_backup_instance_disk
func GetColumns_azurerm_data_protection_backup_instance_disk() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("snapshot_resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_cassandra_datacenter
func TableSchemaGenerator_azurerm_cosmosdb_cassandra_datacenter() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_cassandra_datacenter().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_cassandra_datacenter()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_cassandra_datacenter
func GetColumns_azurerm_cosmosdb_cassandra_datacenter() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("availability_zones_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_storage_customer_key_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cassandra_cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_disk_customer_key_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("base64_encoded_yaml_fragment").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("delegated_management_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_variable_string
func TableSchemaGenerator_azurerm_automation_variable_string() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_variable_string().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_variable_string()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_variable_string
func GetColumns_azurerm_automation_variable_string() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encrypted").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_vpn_gateway_connection
func TableSchemaGenerator_azurerm_vpn_gateway_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_vpn_gateway_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_vpn_gateway_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_vpn_gateway_connection
func GetColumns_azurerm_vpn_gateway_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internet_security_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vpn_link").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("traffic_selector_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("remote_vpn_site_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vpn_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("routing").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_gateway_certificate_authority
func TableSchemaGenerator_azurerm_api_management_gateway_certificate_authority() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_gateway_certificate_authority().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_gateway_certificate_authority()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_gateway_certificate_authority
func GetColumns_azurerm_api_management_gateway_certificate_authority() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_trusted").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_identity_provider_aad
func TableSchemaGenerator_azurerm_api_management_identity_provider_aad() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_identity_provider_aad().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_identity_provider_aad()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_identity_provider_aad
func GetColumns_azurerm_api_management_identity_provider_aad() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("signin_tenant").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allowed_tenants").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_trigger_recurrence
func TableSchemaGenerator_azurerm_logic_app_trigger_recurrence() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_trigger_recurrence().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_trigger_recurrence()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_trigger_recurrence
func GetColumns_azurerm_logic_app_trigger_recurrence() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frequency").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("interval").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logic_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_firewall_nat_rule_collection
func TableSchemaGenerator_azurerm_firewall_nat_rule_collection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_firewall_nat_rule_collection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_firewall_nat_rule_collection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_firewall_nat_rule_collection
func GetColumns_azurerm_firewall_nat_rule_collection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_firewall_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_slot_custom_hostname_binding
func TableSchemaGenerator_azurerm_app_service_slot_custom_hostname_binding() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_slot_custom_hostname_binding().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_slot_custom_hostname_binding()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_slot_custom_hostname_binding
func GetColumns_azurerm_app_service_slot_custom_hostname_binding() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_ip").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_slot_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_state").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_hub_route_table
func TableSchemaGenerator_azurerm_virtual_hub_route_table() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_hub_route_table().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_hub_route_table()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_hub_route_table
func GetColumns_azurerm_virtual_hub_route_table() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_hub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("route").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("labels").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_azure_file_storage
func TableSchemaGenerator_azurerm_data_factory_linked_service_azure_file_storage() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_azure_file_storage().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_azure_file_storage()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_azure_file_storage
func GetColumns_azurerm_data_factory_linked_service_azure_file_storage() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_password").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("file_share").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_slot_virtual_network_swift_connection
func TableSchemaGenerator_azurerm_app_service_slot_virtual_network_swift_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_slot_virtual_network_swift_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_slot_virtual_network_swift_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_slot_virtual_network_swift_connection
func GetColumns_azurerm_app_service_slot_virtual_network_swift_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("slot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_application_live_view
func TableSchemaGenerator_azurerm_spring_cloud_application_live_view() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_application_live_view().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_application_live_view()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_application_live_view
func GetColumns_azurerm_spring_cloud_application_live_view() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_managed_certificate
func TableSchemaGenerator_azurerm_app_service_managed_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_managed_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_managed_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_managed_certificate
func GetColumns_azurerm_app_service_managed_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("subject_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("issue_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("issuer").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("friendly_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("canonical_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_hostname_binding_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expiration_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_job_credential
func TableSchemaGenerator_azurerm_mssql_job_credential() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_job_credential().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_job_credential()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_job_credential
func GetColumns_azurerm_mssql_job_credential() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("job_agent_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_connection_monitor
func TableSchemaGenerator_azurerm_network_connection_monitor() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_connection_monitor().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_connection_monitor()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_connection_monitor
func GetColumns_azurerm_network_connection_monitor() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notes").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("test_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("test_group").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_watcher_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("output_workspace_resource_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_api_diagnostic
func TableSchemaGenerator_azurerm_api_management_api_diagnostic() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_api_diagnostic().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_api_diagnostic()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_api_diagnostic
func GetColumns_azurerm_api_management_api_diagnostic() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("http_correlation_protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sampling_percentage").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identifier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("operation_name_format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("always_log_errors").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_logger_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_client_ip").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("verbosity").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_request").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_response").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_request").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_response").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_backup_policy_vm_workload
func TableSchemaGenerator_azurerm_backup_policy_vm_workload() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_backup_policy_vm_workload().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_backup_policy_vm_workload()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_backup_policy_vm_workload
func GetColumns_azurerm_backup_policy_vm_workload() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workload_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protection_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_share_account
func TableSchemaGenerator_azurerm_data_share_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_share_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_share_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_share_account
func GetColumns_azurerm_data_share_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iot_time_series_insights_reference_data_set
func TableSchemaGenerator_azurerm_iot_time_series_insights_reference_data_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iot_time_series_insights_reference_data_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iot_time_series_insights_reference_data_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iot_time_series_insights_reference_data_set
func GetColumns_azurerm_iot_time_series_insights_reference_data_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("data_string_comparison_behavior").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_series_insights_environment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_property").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dev_test_policy
func TableSchemaGenerator_azurerm_dev_test_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dev_test_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dev_test_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dev_test_policy
func GetColumns_azurerm_dev_test_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("lab_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fact_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_set_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("threshold").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("evaluator_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_alert_rule_nrt
func TableSchemaGenerator_azurerm_sentinel_alert_rule_nrt() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_alert_rule_nrt().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_alert_rule_nrt()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_alert_rule_nrt
func GetColumns_azurerm_sentinel_alert_rule_nrt() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_details").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("entity_mapping").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("incident").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alert_rule_template_guid").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alert_rule_template_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("suppression_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tactics").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("techniques").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("severity").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("suppression_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alert_details_override").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_threat_intelligence
func TableSchemaGenerator_azurerm_sentinel_data_connector_threat_intelligence() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_threat_intelligence().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_threat_intelligence()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_threat_intelligence
func GetColumns_azurerm_sentinel_data_connector_threat_intelligence() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_vpn_site
func TableSchemaGenerator_azurerm_vpn_site() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_vpn_site().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_vpn_site()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_vpn_site
func GetColumns_azurerm_vpn_site() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("link").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("o365_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("device_model").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("device_vendor").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("address_cidrs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_wan_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_blob_inventory_policy
func TableSchemaGenerator_azurerm_storage_blob_inventory_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_blob_inventory_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_blob_inventory_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_blob_inventory_policy
func GetColumns_azurerm_storage_blob_inventory_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_channel_sms
func TableSchemaGenerator_azurerm_bot_channel_sms() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_channel_sms().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_channel_sms()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_channel_sms
func GetColumns_azurerm_bot_channel_sms() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("phone_number").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sms_channel_account_security_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sms_channel_auth_token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_global_schema
func TableSchemaGenerator_azurerm_api_management_global_schema() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_global_schema().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_global_schema()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_global_schema
func GetColumns_azurerm_api_management_global_schema() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_desktop_scaling_plan
func TableSchemaGenerator_azurerm_virtual_desktop_scaling_plan() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_desktop_scaling_plan().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_desktop_scaling_plan()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_desktop_scaling_plan
func GetColumns_azurerm_virtual_desktop_scaling_plan() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_pool").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("exclusion_tag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("friendly_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_site_recovery_network_mapping
func TableSchemaGenerator_azurerm_site_recovery_network_mapping() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_site_recovery_network_mapping().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_site_recovery_network_mapping()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_site_recovery_network_mapping
func GetColumns_azurerm_site_recovery_network_mapping() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_network_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_recovery_fabric_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_network_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_recovery_fabric_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_sql_stored_procedure
func TableSchemaGenerator_azurerm_cosmosdb_sql_stored_procedure() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_sql_stored_procedure().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_sql_stored_procedure()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_sql_stored_procedure
func GetColumns_azurerm_cosmosdb_sql_stored_procedure() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_dynamics_365
func TableSchemaGenerator_azurerm_sentinel_data_connector_dynamics_365() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_dynamics_365().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_dynamics_365()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_dynamics_365
func GetColumns_azurerm_sentinel_data_connector_dynamics_365() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_connection
func TableSchemaGenerator_azurerm_app_service_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_connection
func GetColumns_azurerm_app_service_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("client_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vnet_solution").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_origin
func TableSchemaGenerator_azurerm_cdn_frontdoor_origin() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_origin().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_origin()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_origin
func GetColumns_azurerm_cdn_frontdoor_origin() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_name_check_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_link").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("health_probes_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("origin_host_header").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_origin_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("weight").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_container_registry_token_password
func TableSchemaGenerator_azurerm_container_registry_token_password() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_container_registry_token_password().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_container_registry_token_password()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_container_registry_token_password
func GetColumns_azurerm_container_registry_token_password() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("container_registry_token_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password1").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password2").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_attestation_provider
func TableSchemaGenerator_azurerm_attestation_provider() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_attestation_provider().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_attestation_provider()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_attestation_provider
func GetColumns_azurerm_attestation_provider() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("attestation_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_signing_certificate_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trust_model").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_cluster
func TableSchemaGenerator_azurerm_stream_analytics_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_cluster
func GetColumns_azurerm_stream_analytics_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("streaming_capacity").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_protection_backup_instance_postgresql
func TableSchemaGenerator_azurerm_data_protection_backup_instance_postgresql() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_protection_backup_instance_postgresql().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_protection_backup_instance_postgresql()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_protection_backup_instance_postgresql
func GetColumns_azurerm_data_protection_backup_instance_postgresql() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_credential_key_vault_secret_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_source_control_token
func TableSchemaGenerator_azurerm_source_control_token() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_source_control_token().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_source_control_token()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_source_control_token
func GetColumns_azurerm_source_control_token() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_service_azure_bot
func TableSchemaGenerator_azurerm_bot_service_azure_bot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_service_azure_bot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_service_azure_bot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_service_azure_bot
func GetColumns_azurerm_bot_service_azure_bot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("microsoft_app_msi_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("developer_app_insights_application_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("luis_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("microsoft_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("microsoft_app_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("streaming_endpoint_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("luis_app_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("developer_app_insights_api_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("developer_app_insights_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("microsoft_app_tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_security_center_subscription_pricing
func TableSchemaGenerator_azurerm_security_center_subscription_pricing() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_security_center_subscription_pricing().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_security_center_subscription_pricing()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_security_center_subscription_pricing
func GetColumns_azurerm_security_center_subscription_pricing() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subplan").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_action_rule_action_group
func TableSchemaGenerator_azurerm_monitor_action_rule_action_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_action_rule_action_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_action_rule_action_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_action_rule_action_group
func GetColumns_azurerm_monitor_action_rule_action_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("action_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("condition").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_machine_scale_set
func TableSchemaGenerator_azurerm_virtual_machine_scale_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_machine_scale_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_machine_scale_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_machine_scale_set
func GetColumns_azurerm_virtual_machine_scale_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("automatic_os_upgrade").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_profile_image_reference").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rolling_upgrade_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("health_probe_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_profile_windows_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proximity_placement_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("upgrade_policy_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("boot_diagnostics").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extension").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_profile_linux_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("single_placement_group").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eviction_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_profile_data_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("overprovision").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_profile_secrets").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_profile_os_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_workspace
func TableSchemaGenerator_azurerm_synapse_workspace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_workspace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_workspace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_workspace
func GetColumns_azurerm_synapse_workspace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_identity_control_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_data_lake_gen2_filesystem_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("github_repo").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_virtual_network_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("purview_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_aad_admin").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_administrator_login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_devops_repo").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("aad_admin").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_exfiltration_protection_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linking_allowed_for_aad_tenant_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compute_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_administrator_login_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("customer_managed_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connectivity_endpoints").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_security_center_contact
func TableSchemaGenerator_azurerm_security_center_contact() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_security_center_contact().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_security_center_contact()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_security_center_contact
func GetColumns_azurerm_security_center_contact() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alert_notifications").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alerts_to_admins").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("email").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("phone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_channel_directline
func TableSchemaGenerator_azurerm_bot_channel_directline() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_channel_directline().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_channel_directline()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_channel_directline
func GetColumns_azurerm_bot_channel_directline() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_media_streaming_endpoint
func TableSchemaGenerator_azurerm_media_streaming_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_media_streaming_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_media_streaming_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_media_streaming_endpoint
func GetColumns_azurerm_media_streaming_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_provider").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scale_units").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_profile").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_host_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cross_site_access_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_start_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_cache_age_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("media_services_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_control").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_gallery_application_version
func TableSchemaGenerator_azurerm_gallery_application_version() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_gallery_application_version().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_gallery_application_version()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_gallery_application_version
func GetColumns_azurerm_gallery_application_version() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("exclude_from_latest").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_region").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_health_check").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_of_life_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("manage_action").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_application_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_protection_backup_policy_postgresql
func TableSchemaGenerator_azurerm_data_protection_backup_policy_postgresql() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_protection_backup_policy_postgresql().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_protection_backup_policy_postgresql()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_protection_backup_policy_postgresql
func GetColumns_azurerm_data_protection_backup_policy_postgresql() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_repeating_time_intervals").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_retention_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_certificate
func TableSchemaGenerator_azurerm_app_service_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_certificate
func GetColumns_azurerm_app_service_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("issuer").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subject_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_plan_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expiration_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pfx_blob").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("issue_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("friendly_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_secret_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_application_gateway
func TableSchemaGenerator_azurerm_application_gateway() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_application_gateway().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_application_gateway()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_application_gateway
func GetColumns_azurerm_application_gateway() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("autoscale_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway_ip_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("force_firewall_policy_association").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_port").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_link_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_certificate").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("waf_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_endpoint_connection").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_address_pool").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_http_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("request_routing_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_error_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("probe").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rewrite_rule_set").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_certificate").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("redirect_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trusted_client_certificate").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url_path_map").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fips_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("firewall_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("global").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trusted_root_certificate").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_http2").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_ip_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_listener").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_ddos_protection_plan
func TableSchemaGenerator_azurerm_network_ddos_protection_plan() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_ddos_protection_plan().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_ddos_protection_plan()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_ddos_protection_plan
func GetColumns_azurerm_network_ddos_protection_plan() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_profile
func TableSchemaGenerator_azurerm_cdn_frontdoor_profile() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_profile().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_profile()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_profile
func GetColumns_azurerm_cdn_frontdoor_profile() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("response_timeout_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_guid").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_disk_pool_managed_disk_attachment
func TableSchemaGenerator_azurerm_disk_pool_managed_disk_attachment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_disk_pool_managed_disk_attachment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_disk_pool_managed_disk_attachment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_disk_pool_managed_disk_attachment
func GetColumns_azurerm_disk_pool_managed_disk_attachment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_disk_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_named_value
func TableSchemaGenerator_azurerm_api_management_named_value() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_named_value().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_named_value()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_named_value
func GetColumns_azurerm_api_management_named_value() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secret").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value_from_key_vault").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_netapp_snapshot
func TableSchemaGenerator_azurerm_netapp_snapshot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_netapp_snapshot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_netapp_snapshot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_netapp_snapshot
func GetColumns_azurerm_netapp_snapshot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pool_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("volume_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_job_schedule
func TableSchemaGenerator_azurerm_stream_analytics_job_schedule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_job_schedule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_job_schedule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_job_schedule
func GetColumns_azurerm_stream_analytics_job_schedule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("last_output_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_lb_nat_rule
func TableSchemaGenerator_azurerm_lb_nat_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_lb_nat_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_lb_nat_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_lb_nat_rule
func GetColumns_azurerm_lb_nat_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_ip_configuration_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_tcp_reset").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_address_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_floating_ip").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_ip_configuration_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_ip_configuration_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_port_start").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("idle_timeout_in_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("loadbalancer_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_port_end").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_share_dataset_kusto_cluster
func TableSchemaGenerator_azurerm_data_share_dataset_kusto_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_share_dataset_kusto_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_share_dataset_kusto_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_share_dataset_kusto_cluster
func GetColumns_azurerm_data_share_dataset_kusto_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kusto_cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kusto_cluster_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("share_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mysql_active_directory_administrator
func TableSchemaGenerator_azurerm_mysql_active_directory_administrator() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mysql_active_directory_administrator().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mysql_active_directory_administrator()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mysql_active_directory_administrator
func GetColumns_azurerm_mysql_active_directory_administrator() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("object_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_data_flow
func TableSchemaGenerator_azurerm_data_factory_data_flow() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_data_flow().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_data_flow()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_data_flow
func GetColumns_azurerm_data_factory_data_flow() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script_lines").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("transformation").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sink").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_consumption_budget_resource_group
func TableSchemaGenerator_azurerm_consumption_budget_resource_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_consumption_budget_resource_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_consumption_budget_resource_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_consumption_budget_resource_group
func GetColumns_azurerm_consumption_budget_resource_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("time_grain").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_period").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notification").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("amount").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("etag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_hub
func TableSchemaGenerator_azurerm_virtual_hub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_hub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_hub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_hub
func GetColumns_azurerm_virtual_hub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_router_ips").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_router_asn").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("address_prefix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_route_table_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_wan_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("route").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_management_group_policy_remediation
func TableSchemaGenerator_azurerm_management_group_policy_remediation() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_management_group_policy_remediation().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_management_group_policy_remediation()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_management_group_policy_remediation
func GetColumns_azurerm_management_group_policy_remediation() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("failure_percentage").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_discovery_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location_filters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parallel_deployments").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_assignment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_reference_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_api_tag_description
func TableSchemaGenerator_azurerm_api_management_api_tag_description() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_api_tag_description().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_api_tag_description()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_api_tag_description
func GetColumns_azurerm_api_management_api_tag_description() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_tag_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("external_documentation_description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("external_documentation_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_batch_certificate
func TableSchemaGenerator_azurerm_batch_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_batch_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_batch_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_batch_certificate
func GetColumns_azurerm_batch_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint_algorithm").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_role_assignment
func TableSchemaGenerator_azurerm_synapse_role_assignment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_role_assignment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_role_assignment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_role_assignment
func GetColumns_azurerm_synapse_role_assignment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_spark_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventhub_cluster
func TableSchemaGenerator_azurerm_eventhub_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventhub_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventhub_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventhub_cluster
func GetColumns_azurerm_eventhub_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_reference_input_blob
func TableSchemaGenerator_azurerm_stream_analytics_reference_input_blob() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_reference_input_blob().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_reference_input_blob()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_reference_input_blob
func GetColumns_azurerm_stream_analytics_reference_input_blob() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("time_format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("path_pattern").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("serialization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("date_format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_healthcare_service
func TableSchemaGenerator_azurerm_healthcare_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_healthcare_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_healthcare_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_healthcare_service
func GetColumns_azurerm_healthcare_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cosmosdb_throughput").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cors_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_policy_object_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cosmosdb_key_vault_key_versionless_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_postgresql_flexible_server
func TableSchemaGenerator_azurerm_postgresql_flexible_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_postgresql_flexible_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_postgresql_flexible_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_postgresql_flexible_server
func GetColumns_azurerm_postgresql_flexible_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("delegated_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_mb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("high_availability").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maintenance_window").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("geo_redundant_backup_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("point_in_time_restore_time_in_utc").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_dns_zone_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_traffic_manager_nested_endpoint
func TableSchemaGenerator_azurerm_traffic_manager_nested_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_traffic_manager_nested_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_traffic_manager_nested_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_traffic_manager_nested_endpoint
func GetColumns_azurerm_traffic_manager_nested_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("minimum_required_child_endpoints_ipv6").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("profile_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("weight").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("minimum_required_child_endpoints_ipv4").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_header").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("geo_mappings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("minimum_child_endpoints").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_desktop_host_pool
func TableSchemaGenerator_azurerm_virtual_desktop_host_pool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_desktop_host_pool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_desktop_host_pool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_desktop_host_pool
func GetColumns_azurerm_virtual_desktop_host_pool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_sessions_allowed").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("friendly_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("load_balancer_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("personal_desktop_assignment_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_vm_on_connect").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("validate_environment").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_rdp_properties").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scheduled_agent_updates").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("preferred_app_group_type").ColumnType(schema.ColumnTypeString).Description("Preferred App Group type to display").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_route
func TableSchemaGenerator_azurerm_cdn_frontdoor_route() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_route().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_route()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_route
func GetColumns_azurerm_cdn_frontdoor_route() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_endpoint_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_origin_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("forwarding_protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("patterns_to_match").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_origin_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("link_to_default_domain").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_custom_domain_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_rule_set_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("supported_protocols").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cache").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_origin_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_redirect_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_action_rule_suppression
func TableSchemaGenerator_azurerm_monitor_action_rule_suppression() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_action_rule_suppression().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_action_rule_suppression()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_action_rule_suppression
func GetColumns_azurerm_monitor_action_rule_suppression() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("condition").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("suppression").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_subnet_service_endpoint_storage_policy
func TableSchemaGenerator_azurerm_subnet_service_endpoint_storage_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_subnet_service_endpoint_storage_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_subnet_service_endpoint_storage_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_subnet_service_endpoint_storage_policy
func GetColumns_azurerm_subnet_service_endpoint_storage_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("definition").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_output_blob
func TableSchemaGenerator_azurerm_stream_analytics_output_blob() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_output_blob().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_output_blob()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_output_blob
func GetColumns_azurerm_stream_analytics_output_blob() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("date_format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("serialization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("path_pattern").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("batch_max_wait_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("batch_min_rows").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_postgresql_server_key
func TableSchemaGenerator_azurerm_postgresql_server_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_postgresql_server_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_postgresql_server_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_postgresql_server_key
func GetColumns_azurerm_postgresql_server_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kubernetes_cluster
func TableSchemaGenerator_azurerm_kubernetes_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kubernetes_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kubernetes_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kubernetes_cluster
func GetColumns_azurerm_kubernetes_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("image_cleaner_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kubernetes_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workload_identity_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("microsoft_defender").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_prefix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("aci_connector_linux").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_scaler_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("oidc_issuer_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_policy_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_cluster_public_fqdn_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role_based_access_control_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_server_authorized_ip_ranges").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("oidc_issuer_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_pod_security_policy").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("image_cleaner_interval_hours").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kube_config_raw").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_principal").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_encryption_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("monitor_metrics").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linux_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kube_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_account_disabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_active_directory_role_based_access_control").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ingress_application_gateway").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_application_routing_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("portal_fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_proxy_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kubelet_identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workload_autoscaler_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kube_admin_config_raw").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_application_routing_zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("open_service_mesh_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_node_pool").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("web_app_routing").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edge_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_cluster_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("run_command_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maintenance_window").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("oms_agent").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_secrets_provider").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_resource_group").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_dns_zone_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_prefix_private_cluster").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automatic_channel_upgrade").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("windows_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kube_admin_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_resource_deployment_script_azure_power_shell
func TableSchemaGenerator_azurerm_resource_deployment_script_azure_power_shell() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_resource_deployment_script_azure_power_shell().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_resource_deployment_script_azure_power_shell()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_resource_deployment_script_azure_power_shell
func GetColumns_azurerm_resource_deployment_script_azure_power_shell() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_script_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeout").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_interval").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("force_update_tag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("command_line").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outputs").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("supporting_script_uris").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("environment_variable").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cleanup_preference").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_resolver_forwarding_rule
func TableSchemaGenerator_azurerm_private_dns_resolver_forwarding_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_resolver_forwarding_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_resolver_forwarding_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_resolver_forwarding_rule
func GetColumns_azurerm_private_dns_resolver_forwarding_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_dns_servers").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_forwarding_ruleset_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("domain_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_integration_account_assembly
func TableSchemaGenerator_azurerm_logic_app_integration_account_assembly() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_integration_account_assembly().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_integration_account_assembly()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_integration_account_assembly
func GetColumns_azurerm_logic_app_integration_account_assembly() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("assembly_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("assembly_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_link_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_datadog_monitor
func TableSchemaGenerator_azurerm_datadog_monitor() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_datadog_monitor().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_datadog_monitor()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_datadog_monitor
func GetColumns_azurerm_datadog_monitor() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("marketplace_subscription_status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("datadog_organization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("monitoring_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_gateway
func TableSchemaGenerator_azurerm_spring_cloud_gateway() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_gateway().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_gateway()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_gateway
func GetColumns_azurerm_spring_cloud_gateway() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("quota").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cors").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sso").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("instance_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_job_schedule
func TableSchemaGenerator_azurerm_automation_job_schedule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_job_schedule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_job_schedule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_job_schedule
func GetColumns_azurerm_automation_job_schedule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("job_schedule_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("run_on").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("runbook_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schedule_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_resource_policy_exemption
func TableSchemaGenerator_azurerm_resource_policy_exemption() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_resource_policy_exemption().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_resource_policy_exemption()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_resource_policy_exemption
func GetColumns_azurerm_resource_policy_exemption() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("exemption_category").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expires_on").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_assignment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_reference_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_machine_learning_synapse_spark
func TableSchemaGenerator_azurerm_machine_learning_synapse_spark() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_machine_learning_synapse_spark().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_machine_learning_synapse_spark()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_machine_learning_synapse_spark
func GetColumns_azurerm_machine_learning_synapse_spark() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("machine_learning_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_spark_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_auth_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_web_app_hybrid_connection
func TableSchemaGenerator_azurerm_web_app_hybrid_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_web_app_hybrid_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_web_app_hybrid_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_web_app_hybrid_connection
func GetColumns_azurerm_web_app_hybrid_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("relay_name").ColumnType(schema.ColumnTypeString).Description("The name of the Relay in use.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_key_name").ColumnType(schema.ColumnTypeString).Description("The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_key_value").ColumnType(schema.ColumnTypeString).Description("The Primary Access Key for the `send_key_name`").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_bus_namespace").ColumnType(schema.ColumnTypeString).Description("The Service Bus Namespace.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("web_app_id").ColumnType(schema.ColumnTypeString).Description("The ID of the Web App for this Hybrid Connection.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname").ColumnType(schema.ColumnTypeString).Description("The hostname of the endpoint.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("relay_id").ColumnType(schema.ColumnTypeString).Description("The ID of the Relay Hybrid Connection to use.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_bus_suffix").ColumnType(schema.ColumnTypeString).Description("The suffix for the endpoint.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Description("The name of the Relay Namespace.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("port").ColumnType(schema.ColumnTypeFloat).Description("The port to use for the endpoint").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_channel_facebook
func TableSchemaGenerator_azurerm_bot_channel_facebook() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_channel_facebook().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_channel_facebook()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_channel_facebook
func GetColumns_azurerm_bot_channel_facebook() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("bot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("facebook_application_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("facebook_application_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("page").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_consumption_budget_subscription
func TableSchemaGenerator_azurerm_consumption_budget_subscription() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_consumption_budget_subscription().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_consumption_budget_subscription()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_consumption_budget_subscription
func GetColumns_azurerm_consumption_budget_subscription() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("etag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_grain").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notification").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_period").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("amount").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_accelerator
func TableSchemaGenerator_azurerm_spring_cloud_accelerator() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_accelerator().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_accelerator()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_accelerator
func GetColumns_azurerm_spring_cloud_accelerator() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_endpoint_eventhub
func TableSchemaGenerator_azurerm_iothub_endpoint_eventhub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_endpoint_eventhub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_endpoint_eventhub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_endpoint_eventhub
func GetColumns_azurerm_iothub_endpoint_eventhub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("entity_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_sync_group
func TableSchemaGenerator_azurerm_storage_sync_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_sync_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_sync_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_sync_group
func GetColumns_azurerm_storage_sync_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_sync_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_relay_hybrid_connection_authorization_rule
func TableSchemaGenerator_azurerm_relay_hybrid_connection_authorization_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_relay_hybrid_connection_authorization_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_relay_hybrid_connection_authorization_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_relay_hybrid_connection_authorization_rule
func GetColumns_azurerm_relay_hybrid_connection_authorization_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hybrid_connection_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("listen").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("manage").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_desktop_workspace_application_group_association
func TableSchemaGenerator_azurerm_virtual_desktop_workspace_application_group_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_desktop_workspace_application_group_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_desktop_workspace_application_group_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_desktop_workspace_application_group_association
func GetColumns_azurerm_virtual_desktop_workspace_application_group_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_integration_account
func TableSchemaGenerator_azurerm_logic_app_integration_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_integration_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_integration_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_integration_account
func GetColumns_azurerm_logic_app_integration_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_service_environment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_hub_connection
func TableSchemaGenerator_azurerm_virtual_hub_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_hub_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_hub_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_hub_connection
func GetColumns_azurerm_virtual_hub_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("routing").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internet_security_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("remote_virtual_network_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_hub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_express_route_port
func TableSchemaGenerator_azurerm_express_route_port() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_express_route_port().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_express_route_port()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_express_route_port
func GetColumns_azurerm_express_route_port() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encapsulation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("guid").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bandwidth_in_gbps").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mtu").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("link1").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("link2").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ethertype").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("peering_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_site_recovery_protection_container
func TableSchemaGenerator_azurerm_site_recovery_protection_container() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_site_recovery_protection_container().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_site_recovery_protection_container()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_site_recovery_protection_container
func GetColumns_azurerm_site_recovery_protection_container() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_fabric_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_enrichment
func TableSchemaGenerator_azurerm_iothub_enrichment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_enrichment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_enrichment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_enrichment
func GetColumns_azurerm_iothub_enrichment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_linked_storage_account
func TableSchemaGenerator_azurerm_log_analytics_linked_storage_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_linked_storage_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_linked_storage_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_linked_storage_account
func GetColumns_azurerm_log_analytics_linked_storage_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("data_source_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dev_test_linux_virtual_machine
func TableSchemaGenerator_azurerm_dev_test_linux_virtual_machine() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dev_test_linux_virtual_machine().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dev_test_linux_virtual_machine()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dev_test_linux_virtual_machine
func GetColumns_azurerm_dev_test_linux_virtual_machine() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("lab_virtual_network_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lab_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disallow_public_ip_address").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("unique_identifier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_claim").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_image_reference").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lab_subnet_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notes").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssh_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("inbound_nat_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_connection_type
func TableSchemaGenerator_azurerm_automation_connection_type() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_connection_type().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_connection_type()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_connection_type
func GetColumns_azurerm_automation_connection_type() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_global").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("field").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_key_vault_access_policy
func TableSchemaGenerator_azurerm_key_vault_access_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_key_vault_access_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_key_vault_access_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_key_vault_access_policy
func GetColumns_azurerm_key_vault_access_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("object_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secret_permissions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_permissions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_permissions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_permissions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_api_policy
func TableSchemaGenerator_azurerm_api_management_api_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_api_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_api_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_api_policy
func GetColumns_azurerm_api_management_api_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("xml_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("xml_link").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_route_disable_link_to_default_domain
func TableSchemaGenerator_azurerm_cdn_frontdoor_route_disable_link_to_default_domain() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_route_disable_link_to_default_domain().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_route_disable_link_to_default_domain()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_route_disable_link_to_default_domain
func GetColumns_azurerm_cdn_frontdoor_route_disable_link_to_default_domain() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_custom_domain_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_route_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_express_route_circuit_authorization
func TableSchemaGenerator_azurerm_express_route_circuit_authorization() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_express_route_circuit_authorization().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_express_route_circuit_authorization()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_express_route_circuit_authorization
func GetColumns_azurerm_express_route_circuit_authorization() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("authorization_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authorization_use_status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("express_route_circuit_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_watchlist_item
func TableSchemaGenerator_azurerm_sentinel_watchlist_item() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_watchlist_item().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_watchlist_item()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_watchlist_item
func GetColumns_azurerm_sentinel_watchlist_item() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("watchlist_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_configuration_service
func TableSchemaGenerator_azurerm_spring_cloud_configuration_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_configuration_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_configuration_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_configuration_service
func GetColumns_azurerm_spring_cloud_configuration_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("repository").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_shared_image
func TableSchemaGenerator_azurerm_shared_image() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_shared_image().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_shared_image()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_shared_image
func GetColumns_azurerm_shared_image() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("architecture").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eula").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_recommended_memory_in_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("min_recommended_memory_in_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("release_note_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("accelerated_network_support_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_recommended_vcpu_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("privacy_statement_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("purchase_plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_types_not_allowed").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_of_life_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hyper_v_generation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trusted_launch_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identifier").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("min_recommended_vcpu_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("specialized").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_management_group_policy_exemption
func TableSchemaGenerator_azurerm_management_group_policy_exemption() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_management_group_policy_exemption().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_management_group_policy_exemption()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_management_group_policy_exemption
func GetColumns_azurerm_management_group_policy_exemption() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_assignment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_reference_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expires_on").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("exemption_category").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_storage
func TableSchemaGenerator_azurerm_spring_cloud_storage() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_storage().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_storage()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_storage
func GetColumns_azurerm_spring_cloud_storage() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_managed_database
func TableSchemaGenerator_azurerm_mssql_managed_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_managed_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_managed_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_managed_database
func GetColumns_azurerm_mssql_managed_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_instance_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_windows_virtual_machine
func TableSchemaGenerator_azurerm_windows_virtual_machine() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_windows_virtual_machine().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_windows_virtual_machine()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_windows_virtual_machine
func GetColumns_azurerm_windows_virtual_machine() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timezone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_unattend_content").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("capacity_reservation_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secure_boot_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_automatic_updates").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_application").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dedicated_host_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("patch_assessment_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("platform_fault_domain").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_capabilities").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_bid_price").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("availability_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("patch_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vtpm_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("boot_diagnostics").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secret").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_extension_operations").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eviction_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_image_reference").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extensions_time_budget").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_image_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("termination_notification").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dedicated_host_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("provision_vm_agent").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hotpatching_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proximity_placement_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption_at_host_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("winrm_listener").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("computer_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edge_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_scale_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_servicebus_topic_authorization_rule
func TableSchemaGenerator_azurerm_servicebus_topic_authorization_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_servicebus_topic_authorization_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_servicebus_topic_authorization_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_servicebus_topic_authorization_rule
func GetColumns_azurerm_servicebus_topic_authorization_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("listen").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("topic_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("manage").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_job
func TableSchemaGenerator_azurerm_stream_analytics_job() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_job().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_job()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_job
func GetColumns_azurerm_stream_analytics_job() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("events_late_arrival_max_delay_in_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("job_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_storage_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_locale").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("events_out_of_order_max_delay_in_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("output_error_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("job_storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compatibility_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("events_out_of_order_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("streaming_units").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("transformation_query").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sql_managed_instance_active_directory_administrator
func TableSchemaGenerator_azurerm_sql_managed_instance_active_directory_administrator() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sql_managed_instance_active_directory_administrator().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sql_managed_instance_active_directory_administrator()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sql_managed_instance_active_directory_administrator
func GetColumns_azurerm_sql_managed_instance_active_directory_administrator() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("azuread_authentication_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_instance_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("object_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_postgresql_active_directory_administrator
func TableSchemaGenerator_azurerm_postgresql_active_directory_administrator() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_postgresql_active_directory_administrator().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_postgresql_active_directory_administrator()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_postgresql_active_directory_administrator
func GetColumns_azurerm_postgresql_active_directory_administrator() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("object_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_channel_line
func TableSchemaGenerator_azurerm_bot_channel_line() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_channel_line().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_channel_line()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_channel_line
func GetColumns_azurerm_bot_channel_line() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("bot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("line_channel").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_alert_processing_rule_suppression
func TableSchemaGenerator_azurerm_monitor_alert_processing_rule_suppression() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_alert_processing_rule_suppression().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_alert_processing_rule_suppression()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_alert_processing_rule_suppression
func GetColumns_azurerm_monitor_alert_processing_rule_suppression() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("condition").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_route_map
func TableSchemaGenerator_azurerm_route_map() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_route_map().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_route_map()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_route_map
func GetColumns_azurerm_route_map() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_hub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_microsoft_cloud_app_security
func TableSchemaGenerator_azurerm_sentinel_data_connector_microsoft_cloud_app_security() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_microsoft_cloud_app_security().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_microsoft_cloud_app_security()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_microsoft_cloud_app_security
func GetColumns_azurerm_sentinel_data_connector_microsoft_cloud_app_security() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alerts_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("discovery_logs_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_container
func TableSchemaGenerator_azurerm_storage_container() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_container().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_container()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_container
func GetColumns_azurerm_storage_container() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("has_legal_hold").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_access_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("has_immutability_policy").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_manager_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_management_group_template_deployment
func TableSchemaGenerator_azurerm_management_group_template_deployment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_management_group_template_deployment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_management_group_template_deployment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_management_group_template_deployment
func GetColumns_azurerm_management_group_template_deployment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("template_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template_spec_version_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("debug_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("output_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_trigger_custom
func TableSchemaGenerator_azurerm_logic_app_trigger_custom() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_trigger_custom().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_trigger_custom()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_trigger_custom
func GetColumns_azurerm_logic_app_trigger_custom() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logic_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_databox_edge_order
func TableSchemaGenerator_azurerm_databox_edge_order() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_databox_edge_order().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_databox_edge_order()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_databox_edge_order
func GetColumns_azurerm_databox_edge_order() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("contact").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shipment_address").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("device_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("serial_number").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("return_tracking").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shipment_history").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shipment_tracking").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_servicebus_queue
func TableSchemaGenerator_azurerm_servicebus_queue() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_servicebus_queue().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_servicebus_queue()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_servicebus_queue
func GetColumns_azurerm_servicebus_queue() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_partitioning").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("requires_session").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("duplicate_detection_history_time_window").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("forward_dead_lettered_messages_to").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lock_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_batched_operations").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_message_ttl").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("forward_to").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_delivery_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_size_in_megabytes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("requires_duplicate_detection").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dead_lettering_on_message_expiration").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_express").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_message_size_in_kilobytes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_delete_on_idle").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventhub_authorization_rule
func TableSchemaGenerator_azurerm_eventhub_authorization_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventhub_authorization_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventhub_authorization_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventhub_authorization_rule
func GetColumns_azurerm_eventhub_authorization_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("listen").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("manage").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_alert_rule_scheduled
func TableSchemaGenerator_azurerm_sentinel_alert_rule_scheduled() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_alert_rule_scheduled().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_alert_rule_scheduled()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_alert_rule_scheduled
func GetColumns_azurerm_sentinel_alert_rule_scheduled() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("trigger_threshold").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("entity_mapping").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("incident_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alert_rule_template_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("suppression_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("techniques").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query_frequency").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query_period").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alert_details_override").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alert_rule_template_guid").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("severity").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tactics").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trigger_operator").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_grouping").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_details").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("suppression_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_txt_record
func TableSchemaGenerator_azurerm_private_dns_txt_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_txt_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_txt_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_txt_record
func GetColumns_azurerm_private_dns_txt_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("record").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub
func TableSchemaGenerator_azurerm_iothub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub
func GetColumns_azurerm_iothub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("event_hub_operations_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("min_tls_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_hub_events_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fallback_route").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("route").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cloud_to_device").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_hub_events_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enrichment").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_hub_operations_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_hub_retention_in_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("file_upload").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_hub_partition_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_rule_set").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_hub_events_namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_hub_ip
func TableSchemaGenerator_azurerm_virtual_hub_ip() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_hub_ip().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_hub_ip()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_hub_ip
func GetColumns_azurerm_virtual_hub_ip() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("public_ip_address_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_hub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_allocation_method").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_batch_job
func TableSchemaGenerator_azurerm_batch_job() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_batch_job().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_batch_job()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_batch_job
func GetColumns_azurerm_batch_job() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("task_retry_maximum").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("batch_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("common_environment_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mariadb_server
func TableSchemaGenerator_azurerm_mariadb_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mariadb_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mariadb_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mariadb_server
func GetColumns_azurerm_mariadb_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("restore_point_in_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("geo_redundant_backup_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_mb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("creation_source_server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_enforcement_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_grow_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_scheduled_query_rules_log
func TableSchemaGenerator_azurerm_monitor_scheduled_query_rules_log() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_scheduled_query_rules_log().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_scheduled_query_rules_log()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_scheduled_query_rules_log
func GetColumns_azurerm_monitor_scheduled_query_rules_log() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("criteria").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_source_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authorized_resource_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_container_registry_scope_map
func TableSchemaGenerator_azurerm_container_registry_scope_map() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_container_registry_scope_map().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_container_registry_scope_map()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_container_registry_scope_map
func GetColumns_azurerm_container_registry_scope_map() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("actions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_registry_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logz_tag_rule
func TableSchemaGenerator_azurerm_logz_tag_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logz_tag_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logz_tag_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logz_tag_rule
func GetColumns_azurerm_logz_tag_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logz_monitor_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_aad_logs").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_activity_logs").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_subscription_logs").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tag_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dedicated_host_group
func TableSchemaGenerator_azurerm_dedicated_host_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dedicated_host_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dedicated_host_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dedicated_host_group
func GetColumns_azurerm_dedicated_host_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("platform_fault_domain_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automatic_placement_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_healthcare_medtech_service
func TableSchemaGenerator_azurerm_healthcare_medtech_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_healthcare_medtech_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_healthcare_medtech_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_healthcare_medtech_service
func GetColumns_azurerm_healthcare_medtech_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_consumer_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("device_mapping_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_healthbot
func TableSchemaGenerator_azurerm_healthbot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_healthbot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_healthbot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_healthbot
func GetColumns_azurerm_healthbot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bot_management_portal_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_zone
func TableSchemaGenerator_azurerm_private_dns_zone() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_zone().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_zone()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_zone
func GetColumns_azurerm_private_dns_zone() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("number_of_record_sets").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_number_of_virtual_network_links").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_number_of_virtual_network_links_with_registration").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_number_of_record_sets").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("soa_record").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mysql_flexible_server_firewall_rule
func TableSchemaGenerator_azurerm_mysql_flexible_server_firewall_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mysql_flexible_server_firewall_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mysql_flexible_server_firewall_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mysql_flexible_server_firewall_rule
func GetColumns_azurerm_mysql_flexible_server_firewall_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_aad_diagnostic_setting
func TableSchemaGenerator_azurerm_monitor_aad_diagnostic_setting() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_aad_diagnostic_setting().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_aad_diagnostic_setting()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_aad_diagnostic_setting
func GetColumns_azurerm_monitor_aad_diagnostic_setting() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_authorization_rule_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_workspace_aad_admin
func TableSchemaGenerator_azurerm_synapse_workspace_aad_admin() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_workspace_aad_admin().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_workspace_aad_admin()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_workspace_aad_admin
func GetColumns_azurerm_synapse_workspace_aad_admin() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("object_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_netapp_snapshot_policy
func TableSchemaGenerator_azurerm_netapp_snapshot_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_netapp_snapshot_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_netapp_snapshot_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_netapp_snapshot_policy
func GetColumns_azurerm_netapp_snapshot_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("monthly_schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("daily_schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hourly_schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("weekly_schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_frontdoor_firewall_policy
func TableSchemaGenerator_azurerm_frontdoor_firewall_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_frontdoor_firewall_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_frontdoor_firewall_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_frontdoor_firewall_policy
func GetColumns_azurerm_frontdoor_firewall_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_endpoint_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_block_response_body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("redirect_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_block_response_status_code").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_local_network_gateway
func TableSchemaGenerator_azurerm_local_network_gateway() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_local_network_gateway().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_local_network_gateway()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_local_network_gateway
func GetColumns_azurerm_local_network_gateway() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway_fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bgp_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("address_space").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_a_record
func TableSchemaGenerator_azurerm_private_dns_a_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_a_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_a_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_a_record
func GetColumns_azurerm_private_dns_a_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("records").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_integration_runtime_managed
func TableSchemaGenerator_azurerm_data_factory_integration_runtime_managed() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_integration_runtime_managed().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_integration_runtime_managed()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_integration_runtime_managed
func GetColumns_azurerm_data_factory_integration_runtime_managed() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("number_of_nodes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vnet_integration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edition").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_parallel_executions_per_node").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("catalog_info").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_setup_script").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_postgresql_flexible_server_firewall_rule
func TableSchemaGenerator_azurerm_postgresql_flexible_server_firewall_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_postgresql_flexible_server_firewall_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_postgresql_flexible_server_firewall_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_postgresql_flexible_server_firewall_rule
func GetColumns_azurerm_postgresql_flexible_server_firewall_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_consumer_group
func TableSchemaGenerator_azurerm_iothub_consumer_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_consumer_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_consumer_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_consumer_group
func GetColumns_azurerm_iothub_consumer_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_endpoint_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_subscription_policy_assignment
func TableSchemaGenerator_azurerm_subscription_policy_assignment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_subscription_policy_assignment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_subscription_policy_assignment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_subscription_policy_assignment
func GetColumns_azurerm_subscription_policy_assignment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("not_scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("non_compliance_message").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enforce").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_server_transparent_data_encryption
func TableSchemaGenerator_azurerm_mssql_server_transparent_data_encryption() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_server_transparent_data_encryption().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_server_transparent_data_encryption()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_server_transparent_data_encryption
func GetColumns_azurerm_mssql_server_transparent_data_encryption() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_rotation_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dev_test_windows_virtual_machine
func TableSchemaGenerator_azurerm_dev_test_windows_virtual_machine() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dev_test_windows_virtual_machine().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dev_test_windows_virtual_machine()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dev_test_windows_virtual_machine
func GetColumns_azurerm_dev_test_windows_virtual_machine() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("lab_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lab_subnet_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("unique_identifier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("inbound_nat_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_image_reference").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_claim").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disallow_public_ip_address").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notes").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lab_virtual_network_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_vmware_netapp_volume_attachment
func TableSchemaGenerator_azurerm_vmware_netapp_volume_attachment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_vmware_netapp_volume_attachment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_vmware_netapp_volume_attachment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_vmware_netapp_volume_attachment
func GetColumns_azurerm_vmware_netapp_volume_attachment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("vmware_cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("netapp_volume_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_managed_private_endpoint
func TableSchemaGenerator_azurerm_stream_analytics_managed_private_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_managed_private_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_managed_private_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_managed_private_endpoint
func GetColumns_azurerm_stream_analytics_managed_private_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_cluster_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subresource_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_office_365
func TableSchemaGenerator_azurerm_sentinel_data_connector_office_365() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_office_365().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_office_365()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_office_365
func GetColumns_azurerm_sentinel_data_connector_office_365() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("exchange_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sharepoint_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("teams_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_disk_access
func TableSchemaGenerator_azurerm_disk_access() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_disk_access().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_disk_access()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_disk_access
func GetColumns_azurerm_disk_access() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_server
func TableSchemaGenerator_azurerm_mssql_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_server
func GetColumns_azurerm_mssql_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_network_restriction_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azuread_administrator").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fully_qualified_domain_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_user_assigned_identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("minimum_tls_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("restorable_dropped_database_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_odbc
func TableSchemaGenerator_azurerm_data_factory_linked_service_odbc() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_odbc().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_odbc()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_odbc
func GetColumns_azurerm_data_factory_linked_service_odbc() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("basic_authentication").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dns_cname_record
func TableSchemaGenerator_azurerm_dns_cname_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dns_cname_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dns_cname_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dns_cname_record
func GetColumns_azurerm_dns_cname_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("record").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_databox_edge_device
func TableSchemaGenerator_azurerm_databox_edge_device() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_databox_edge_device().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_databox_edge_device()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_databox_edge_device
func GetColumns_azurerm_databox_edge_device() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("device_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_aws_cloud_trail
func TableSchemaGenerator_azurerm_sentinel_data_connector_aws_cloud_trail() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_aws_cloud_trail().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_aws_cloud_trail()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_aws_cloud_trail
func GetColumns_azurerm_sentinel_data_connector_aws_cloud_trail() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("aws_role_arn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_notification_hub_authorization_rule
func TableSchemaGenerator_azurerm_notification_hub_authorization_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_notification_hub_authorization_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_notification_hub_authorization_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_notification_hub_authorization_rule
func GetColumns_azurerm_notification_hub_authorization_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("listen").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("manage").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notification_hub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_hdinsight_interactive_query_cluster
func TableSchemaGenerator_azurerm_hdinsight_interactive_query_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_hdinsight_interactive_query_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_hdinsight_interactive_query_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_hdinsight_interactive_query_cluster
func GetColumns_azurerm_hdinsight_interactive_query_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("monitor").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_encryption").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extension").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metastores").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption_in_transit_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compute_isolation").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("security_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_gen2").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssh_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tls_min_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("component_version").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("roles").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_ip_group
func TableSchemaGenerator_azurerm_ip_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_ip_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_ip_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_ip_group
func GetColumns_azurerm_ip_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cidrs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_postgresql_database
func TableSchemaGenerator_azurerm_postgresql_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_postgresql_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_postgresql_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_postgresql_database
func GetColumns_azurerm_postgresql_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("collation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("charset").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_data_collection_rule
func TableSchemaGenerator_azurerm_monitor_data_collection_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_data_collection_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_data_collection_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_data_collection_rule
func GetColumns_azurerm_monitor_data_collection_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_flow").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_sources").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destinations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_backup_protected_file_share
func TableSchemaGenerator_azurerm_backup_protected_file_share() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_backup_protected_file_share().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_backup_protected_file_share()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_backup_protected_file_share
func GetColumns_azurerm_backup_protected_file_share() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_file_share_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kusto_cluster_principal_assignment
func TableSchemaGenerator_azurerm_kusto_cluster_principal_assignment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kusto_cluster_principal_assignment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kusto_cluster_principal_assignment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kusto_cluster_principal_assignment
func GetColumns_azurerm_kusto_cluster_principal_assignment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_resource_group
func TableSchemaGenerator_azurerm_resource_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_resource_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_resource_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_resource_group
func GetColumns_azurerm_resource_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_custom_service
func TableSchemaGenerator_azurerm_data_factory_linked_custom_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_custom_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_custom_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_custom_service
func GetColumns_azurerm_data_factory_linked_custom_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type_properties_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_media_transform
func TableSchemaGenerator_azurerm_media_transform() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_media_transform().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_media_transform()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_media_transform
func GetColumns_azurerm_media_transform() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("media_services_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("output").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_integration_account_batch_configuration
func TableSchemaGenerator_azurerm_logic_app_integration_account_batch_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_integration_account_batch_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_integration_account_batch_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_integration_account_batch_configuration
func GetColumns_azurerm_logic_app_integration_account_batch_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("release_criteria").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("batch_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_video_analyzer
func TableSchemaGenerator_azurerm_video_analyzer() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_video_analyzer().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_video_analyzer()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_video_analyzer
func GetColumns_azurerm_video_analyzer() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_orbital_spacecraft
func TableSchemaGenerator_azurerm_orbital_spacecraft() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_orbital_spacecraft().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_orbital_spacecraft()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_orbital_spacecraft
func GetColumns_azurerm_orbital_spacecraft() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("norad_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("two_line_elements").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("links").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("title_line").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_servicebus_topic
func TableSchemaGenerator_azurerm_servicebus_topic() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_servicebus_topic().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_servicebus_topic()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_servicebus_topic
func GetColumns_azurerm_servicebus_topic() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("default_message_ttl").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("duplicate_detection_history_time_window").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_express").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_partitioning").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_size_in_megabytes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_delete_on_idle").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_batched_operations").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_message_size_in_kilobytes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("requires_duplicate_detection").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("support_ordering").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_saved_search
func TableSchemaGenerator_azurerm_log_analytics_saved_search() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_saved_search().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_saved_search()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_saved_search
func GetColumns_azurerm_log_analytics_saved_search() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("category").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("function_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("function_parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_shared_access_policy
func TableSchemaGenerator_azurerm_iothub_shared_access_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_shared_access_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_shared_access_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_shared_access_policy
func GetColumns_azurerm_iothub_shared_access_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("registry_read").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("registry_write").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_connect").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("device_connect").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_powerbi_embedded
func TableSchemaGenerator_azurerm_powerbi_embedded() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_powerbi_embedded().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_powerbi_embedded()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_powerbi_embedded
func GetColumns_azurerm_powerbi_embedded() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("administrators").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_integration_runtime_self_hosted
func TableSchemaGenerator_azurerm_data_factory_integration_runtime_self_hosted() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_integration_runtime_self_hosted().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_integration_runtime_self_hosted()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_integration_runtime_self_hosted
func GetColumns_azurerm_data_factory_integration_runtime_self_hosted() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_authorization_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_authorization_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rbac_authorization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_trigger_custom_event
func TableSchemaGenerator_azurerm_data_factory_trigger_custom_event() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_trigger_custom_event().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_trigger_custom_event()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_trigger_custom_event
func GetColumns_azurerm_data_factory_trigger_custom_event() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subject_begins_with").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pipeline").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventgrid_topic_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("events").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subject_ends_with").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("activated").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_microsoft_threat_protection
func TableSchemaGenerator_azurerm_sentinel_data_connector_microsoft_threat_protection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_microsoft_threat_protection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_microsoft_threat_protection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_microsoft_threat_protection
func GetColumns_azurerm_sentinel_data_connector_microsoft_threat_protection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mysql_flexible_server
func TableSchemaGenerator_azurerm_mysql_flexible_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mysql_flexible_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mysql_flexible_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mysql_flexible_server
func GetColumns_azurerm_mysql_flexible_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_dns_zone_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("replication_role").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maintenance_window").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("high_availability").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("geo_redundant_backup_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("point_in_time_restore_time_in_utc").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("delegated_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("replica_capacity").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_cassandra_table
func TableSchemaGenerator_azurerm_cosmosdb_cassandra_table() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_cassandra_table().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_cassandra_table()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_cassandra_table
func GetColumns_azurerm_cosmosdb_cassandra_table() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("throughput").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cassandra_keyspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("autoscale_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("analytical_storage_ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_api_operation_policy
func TableSchemaGenerator_azurerm_api_management_api_operation_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_api_operation_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_api_operation_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_api_operation_policy
func GetColumns_azurerm_api_management_api_operation_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("operation_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("xml_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("xml_link").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_endpoint
func TableSchemaGenerator_azurerm_cdn_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_endpoint
func GetColumns_azurerm_cdn_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("optimization_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("origin_host_header").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_types_to_compress").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_https_allowed").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("origin_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("profile_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("origin").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("probe_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("querystring_caching_behaviour").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("global_delivery_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_compression_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_http_allowed").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("delivery_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("geo_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_sql_pool_vulnerability_assessment_baseline
func TableSchemaGenerator_azurerm_synapse_sql_pool_vulnerability_assessment_baseline() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_sql_pool_vulnerability_assessment_baseline().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_sql_pool_vulnerability_assessment_baseline()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_sql_pool_vulnerability_assessment_baseline
func GetColumns_azurerm_synapse_sql_pool_vulnerability_assessment_baseline() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rule_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_pool_vulnerability_assessment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("baseline").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_office_365_project
func TableSchemaGenerator_azurerm_sentinel_data_connector_office_365_project() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_office_365_project().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_office_365_project()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_office_365_project
func GetColumns_azurerm_sentinel_data_connector_office_365_project() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_windows_function_app
func TableSchemaGenerator_azurerm_windows_function_app() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_windows_function_app().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_windows_function_app()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_windows_function_app
func GetColumns_azurerm_windows_function_app() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sticky_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("builtin_logging_enabled").ColumnType(schema.ColumnTypeBool).Description("Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_domain_verification_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Description("Is the Windows Function App enabled.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_plan_id").ColumnType(schema.ColumnTypeString).Description("The ID of the App Service Plan within which to create this Function App").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_uses_managed_identity").ColumnType(schema.ColumnTypeBool).Description("Should the Function App use its Managed Identity to access storage?").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_exclusion_paths").ColumnType(schema.ColumnTypeString).Description("Paths to exclude when using client certificates, separated by ;").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_mode").ColumnType(schema.ColumnTypeString).Description("The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser` ").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("daily_memory_time_quota").ColumnType(schema.ColumnTypeFloat).Description("The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps in Consumption Plans.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auth_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Description("The backend storage account name which will be used by this Function App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).Description("A map of key-value pairs for [App Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_share_force_disabled").ColumnType(schema.ColumnTypeBool).Description("Force disable the content share settings.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_reference_identity_id").ColumnType(schema.ColumnTypeString).Description("The User Assigned Identity to use for Key Vault access.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Description("Specifies the name of the Function App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Description("The access key which will be used to access the storage account for the Function App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_enabled").ColumnType(schema.ColumnTypeBool).Description("Should the function app use Client Certificates").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("functions_extension_version").ColumnType(schema.ColumnTypeString).Description("The runtime version associated with the Function App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Description("Can the Function App only be accessed via HTTPS?").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_key_vault_secret_id").ColumnType(schema.ColumnTypeString).Description("The Key Vault Secret ID, including version, that contains the Connection String to connect to the storage account for this Function App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_interface_application_security_group_association
func TableSchemaGenerator_azurerm_network_interface_application_security_group_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_interface_application_security_group_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_interface_application_security_group_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_interface_application_security_group_association
func GetColumns_azurerm_network_interface_application_security_group_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("application_security_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_integration_account_certificate
func TableSchemaGenerator_azurerm_logic_app_integration_account_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_integration_account_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_integration_account_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_integration_account_certificate
func GetColumns_azurerm_logic_app_integration_account_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_certificate").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dev_test_virtual_network
func TableSchemaGenerator_azurerm_dev_test_virtual_network() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dev_test_virtual_network().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dev_test_virtual_network()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dev_test_virtual_network
func GetColumns_azurerm_dev_test_virtual_network() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("unique_identifier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lab_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_dataset_snowflake
func TableSchemaGenerator_azurerm_data_factory_dataset_snowflake() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_dataset_snowflake().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_dataset_snowflake()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_dataset_snowflake
func GetColumns_azurerm_data_factory_dataset_snowflake() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_column").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_spark_pool
func TableSchemaGenerator_azurerm_synapse_spark_pool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_spark_pool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_spark_pool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_spark_pool
func GetColumns_azurerm_synapse_spark_pool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_scale").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spark_log_folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_pause").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("library_requirement").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compute_isolation_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("session_level_packages_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spark_events_folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spark_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_executors").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("min_executors").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spark_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cache_size").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dynamic_executor_allocation_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_size_family").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventgrid_topic
func TableSchemaGenerator_azurerm_eventgrid_topic() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventgrid_topic().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventgrid_topic()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventgrid_topic
func GetColumns_azurerm_eventgrid_topic() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_auth_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("input_mapping_fields").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("input_mapping_default_values").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("inbound_ip_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("input_schema").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_management_group
func TableSchemaGenerator_azurerm_management_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_management_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_management_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_management_group
func GetColumns_azurerm_management_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parent_management_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_output_mssql
func TableSchemaGenerator_azurerm_stream_analytics_output_mssql() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_output_mssql().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_output_mssql()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_output_mssql
func GetColumns_azurerm_stream_analytics_output_mssql() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_batch_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_writer_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_key_vault_certificate_issuer
func TableSchemaGenerator_azurerm_key_vault_certificate_issuer() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_key_vault_certificate_issuer().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_key_vault_certificate_issuer()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_key_vault_certificate_issuer
func GetColumns_azurerm_key_vault_certificate_issuer() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("admin").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("org_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("provider_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_proximity_placement_group
func TableSchemaGenerator_azurerm_proximity_placement_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_proximity_placement_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_proximity_placement_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_proximity_placement_group
func GetColumns_azurerm_proximity_placement_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allowed_vm_sizes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_source_control
func TableSchemaGenerator_azurerm_automation_source_control() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_source_control().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_source_control()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_source_control
func GetColumns_azurerm_automation_source_control() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("source_control_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automatic_sync").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("branch").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("repository_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("security").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("publish_runbook_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_channels_registration
func TableSchemaGenerator_azurerm_bot_channels_registration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_channels_registration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_channels_registration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_channels_registration
func GetColumns_azurerm_bot_channels_registration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("developer_app_insights_api_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("developer_app_insights_application_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("developer_app_insights_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("icon_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("isolated_network_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cmk_key_vault_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("microsoft_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("streaming_endpoint_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_dataset_postgresql
func TableSchemaGenerator_azurerm_data_factory_dataset_postgresql() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_dataset_postgresql().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_dataset_postgresql()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_dataset_postgresql
func GetColumns_azurerm_data_factory_dataset_postgresql() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_column").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_netapp_pool
func TableSchemaGenerator_azurerm_netapp_pool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_netapp_pool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_netapp_pool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_netapp_pool
func GetColumns_azurerm_netapp_pool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("size_in_tb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("qos_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_ptr_record
func TableSchemaGenerator_azurerm_private_dns_ptr_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_ptr_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_ptr_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_ptr_record
func GetColumns_azurerm_private_dns_ptr_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("records").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_video_analyzer_edge_module
func TableSchemaGenerator_azurerm_video_analyzer_edge_module() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_video_analyzer_edge_module().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_video_analyzer_edge_module()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_video_analyzer_edge_module
func GetColumns_azurerm_video_analyzer_edge_module() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("video_analyzer_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_container_deployment
func TableSchemaGenerator_azurerm_spring_cloud_container_deployment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_container_deployment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_container_deployment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_container_deployment
func GetColumns_azurerm_spring_cloud_container_deployment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("instance_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("language_framework").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("addon_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("arguments").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("commands").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("quota").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("environment_variables").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("image").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_cluster
func TableSchemaGenerator_azurerm_log_analytics_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_cluster
func GetColumns_azurerm_log_analytics_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("size_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_build_pack_binding
func TableSchemaGenerator_azurerm_spring_cloud_build_pack_binding() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_build_pack_binding().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_build_pack_binding()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_build_pack_binding
func GetColumns_azurerm_spring_cloud_build_pack_binding() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_builder_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("launch").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("binding_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dns_aaaa_record
func TableSchemaGenerator_azurerm_dns_aaaa_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dns_aaaa_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dns_aaaa_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dns_aaaa_record
func GetColumns_azurerm_dns_aaaa_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("records").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dev_test_lab
func TableSchemaGenerator_azurerm_dev_test_lab() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dev_test_lab().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dev_test_lab()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dev_test_lab
func GetColumns_azurerm_dev_test_lab() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("default_storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("premium_data_disk_storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("artifacts_storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("unique_identifier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_premium_storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dns_ns_record
func TableSchemaGenerator_azurerm_dns_ns_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dns_ns_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dns_ns_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dns_ns_record
func GetColumns_azurerm_dns_ns_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("records").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_sql_role_assignment
func TableSchemaGenerator_azurerm_cosmosdb_sql_role_assignment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_sql_role_assignment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_sql_role_assignment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_sql_role_assignment
func GetColumns_azurerm_cosmosdb_sql_role_assignment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("role_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_custom_domain
func TableSchemaGenerator_azurerm_spring_cloud_custom_domain() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_custom_domain().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_custom_domain()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_custom_domain
func GetColumns_azurerm_spring_cloud_custom_domain() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_dataset_cosmosdb_sqlapi
func TableSchemaGenerator_azurerm_data_factory_dataset_cosmosdb_sqlapi() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_dataset_cosmosdb_sqlapi().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_dataset_cosmosdb_sqlapi()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_dataset_cosmosdb_sqlapi
func GetColumns_azurerm_data_factory_dataset_cosmosdb_sqlapi() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("collection_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_column").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_resource_provider_registration
func TableSchemaGenerator_azurerm_resource_provider_registration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_resource_provider_registration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_resource_provider_registration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_resource_provider_registration
func GetColumns_azurerm_resource_provider_registration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("feature").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_backend
func TableSchemaGenerator_azurerm_api_management_backend() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_backend().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_backend()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_backend
func GetColumns_azurerm_api_management_backend() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("title").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("credentials").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_fabric_cluster").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tls").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proxy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_network
func TableSchemaGenerator_azurerm_virtual_network() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_network().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_network()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_network
func GetColumns_azurerm_virtual_network() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ddos_protection_plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bgp_community").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_servers").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("address_space").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("guid").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edge_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("flow_timeout_in_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_connection
func TableSchemaGenerator_azurerm_api_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_connection
func GetColumns_azurerm_api_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_api_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameter_values").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iot_time_series_insights_standard_environment
func TableSchemaGenerator_azurerm_iot_time_series_insights_standard_environment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iot_time_series_insights_standard_environment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iot_time_series_insights_standard_environment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iot_time_series_insights_standard_environment
func GetColumns_azurerm_iot_time_series_insights_standard_environment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_retention_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_limit_exceeded_behavior").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_channel_ms_teams
func TableSchemaGenerator_azurerm_bot_channel_ms_teams() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_channel_ms_teams().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_channel_ms_teams()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_channel_ms_teams
func GetColumns_azurerm_bot_channel_ms_teams() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_calling").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("calling_web_hook").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_managed_application
func TableSchemaGenerator_azurerm_managed_application() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_managed_application().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_managed_application()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_managed_application
func GetColumns_azurerm_managed_application() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outputs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameter_values").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_vmware_express_route_authorization
func TableSchemaGenerator_azurerm_vmware_express_route_authorization() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_vmware_express_route_authorization().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_vmware_express_route_authorization()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_vmware_express_route_authorization
func GetColumns_azurerm_vmware_express_route_authorization() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_cloud_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("express_route_authorization_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("express_route_authorization_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_healthcare_fhir_service
func TableSchemaGenerator_azurerm_healthcare_fhir_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_healthcare_fhir_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_healthcare_fhir_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_healthcare_fhir_service
func GetColumns_azurerm_healthcare_fhir_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("configuration_export_storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cors").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_policy_object_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_registry_login_server_url").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("oci_artifact").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_availability_set
func TableSchemaGenerator_azurerm_availability_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_availability_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_availability_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_availability_set
func GetColumns_azurerm_availability_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("platform_fault_domain_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("platform_update_domain_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proximity_placement_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_express_route_circuit_connection
func TableSchemaGenerator_azurerm_express_route_circuit_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_express_route_circuit_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_express_route_circuit_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_express_route_circuit_connection
func GetColumns_azurerm_express_route_circuit_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("address_prefix_ipv6").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authorization_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("peer_peering_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("peering_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("address_prefix_ipv4").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_stream_input_iothub
func TableSchemaGenerator_azurerm_stream_analytics_stream_input_iothub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_stream_input_iothub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_stream_input_iothub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_stream_input_iothub
func GetColumns_azurerm_stream_analytics_stream_input_iothub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_consumer_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("serialization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_static_site_custom_domain
func TableSchemaGenerator_azurerm_static_site_custom_domain() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_static_site_custom_domain().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_static_site_custom_domain()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_static_site_custom_domain
func GetColumns_azurerm_static_site_custom_domain() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("domain_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("static_site_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("validation_token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("validation_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_product_api
func TableSchemaGenerator_azurerm_api_management_product_api() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_product_api().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_product_api()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_product_api
func GetColumns_azurerm_api_management_product_api() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("product_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_product_tag
func TableSchemaGenerator_azurerm_api_management_product_tag() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_product_tag().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_product_tag()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_product_tag
func GetColumns_azurerm_api_management_product_tag() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_product_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_query_pack_query
func TableSchemaGenerator_azurerm_log_analytics_query_pack_query() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_query_pack_query().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_query_pack_query()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_query_pack_query
func GetColumns_azurerm_log_analytics_query_pack_query() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("solutions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query_pack_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_types").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_settings_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("categories").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_protection_backup_vault
func TableSchemaGenerator_azurerm_data_protection_backup_vault() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_protection_backup_vault().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_protection_backup_vault()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_protection_backup_vault
func GetColumns_azurerm_data_protection_backup_vault() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("redundancy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("datastore_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_data_collection_rule_association
func TableSchemaGenerator_azurerm_monitor_data_collection_rule_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_data_collection_rule_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_data_collection_rule_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_data_collection_rule_association
func GetColumns_azurerm_monitor_data_collection_rule_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("data_collection_endpoint_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_collection_rule_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management
func TableSchemaGenerator_azurerm_api_management() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management
func GetColumns_azurerm_api_management() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("public_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_api_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notification_sender_email").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("publisher_email").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protocols").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sign_up").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_access").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("min_api_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sign_in").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("security").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("developer_portal_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway_regional_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("portal_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_ip_address_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("publisher_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scm_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway_disabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_databricks_workspace_customer_managed_key
func TableSchemaGenerator_azurerm_databricks_workspace_customer_managed_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_databricks_workspace_customer_managed_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_databricks_workspace_customer_managed_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_databricks_workspace_customer_managed_key
func GetColumns_azurerm_databricks_workspace_customer_managed_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_managed_instance_security_alert_policy
func TableSchemaGenerator_azurerm_mssql_managed_instance_security_alert_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_managed_instance_security_alert_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_managed_instance_security_alert_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_managed_instance_security_alert_policy
func GetColumns_azurerm_mssql_managed_instance_security_alert_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("email_account_admins_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("email_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disabled_alerts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_instance_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_mx_record
func TableSchemaGenerator_azurerm_private_dns_mx_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_mx_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_mx_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_mx_record
func GetColumns_azurerm_private_dns_mx_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("record").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dedicated_hardware_security_module
func TableSchemaGenerator_azurerm_dedicated_hardware_security_module() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dedicated_hardware_security_module().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dedicated_hardware_security_module()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dedicated_hardware_security_module
func GetColumns_azurerm_dedicated_hardware_security_module() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stamp_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_network_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_postgresql_flexible_server_active_directory_administrator
func TableSchemaGenerator_azurerm_postgresql_flexible_server_active_directory_administrator() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_postgresql_flexible_server_active_directory_administrator().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_postgresql_flexible_server_active_directory_administrator()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_postgresql_flexible_server_active_directory_administrator
func GetColumns_azurerm_postgresql_flexible_server_active_directory_administrator() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("object_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_service_fabric_managed_cluster
func TableSchemaGenerator_azurerm_service_fabric_managed_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_service_fabric_managed_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_service_fabric_managed_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_service_fabric_managed_cluster
func GetColumns_azurerm_service_fabric_managed_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lb_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_gateway_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("upgrade_wave").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_type").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_service_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_connection_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_fabric_setting").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_service_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_postgresql_flexible_server_configuration
func TableSchemaGenerator_azurerm_postgresql_flexible_server_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_postgresql_flexible_server_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_postgresql_flexible_server_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_postgresql_flexible_server_configuration
func GetColumns_azurerm_postgresql_flexible_server_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dns_srv_record
func TableSchemaGenerator_azurerm_dns_srv_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dns_srv_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dns_srv_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dns_srv_record
func GetColumns_azurerm_dns_srv_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("record").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_security_center_assessment_policy
func TableSchemaGenerator_azurerm_security_center_assessment_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_security_center_assessment_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_security_center_assessment_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_security_center_assessment_policy
func GetColumns_azurerm_security_center_assessment_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("implementation_effort").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("severity").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("categories").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("threats").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_impact").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("remediation_description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_trigger_http_request
func TableSchemaGenerator_azurerm_logic_app_trigger_http_request() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_trigger_http_request().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_trigger_http_request()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_trigger_http_request
func GetColumns_azurerm_logic_app_trigger_http_request() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("logic_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("method").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("relative_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("callback_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_elastic_cloud_elasticsearch
func TableSchemaGenerator_azurerm_elastic_cloud_elasticsearch() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_elastic_cloud_elasticsearch().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_elastic_cloud_elasticsearch()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_elastic_cloud_elasticsearch
func GetColumns_azurerm_elastic_cloud_elasticsearch() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kibana_sso_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("monitoring_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("elastic_cloud_deployment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("elastic_cloud_email_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("elastic_cloud_user_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("elastic_cloud_sso_default_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("elasticsearch_service_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kibana_service_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_identity_provider_aadb2c
func TableSchemaGenerator_azurerm_api_management_identity_provider_aadb2c() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_identity_provider_aadb2c().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_identity_provider_aadb2c()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_identity_provider_aadb2c
func GetColumns_azurerm_api_management_identity_provider_aadb2c() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password_reset_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("signup_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allowed_tenant").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("profile_editing_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("signin_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("signin_tenant").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authority").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_resolver
func TableSchemaGenerator_azurerm_private_dns_resolver() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_resolver().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_resolver()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_resolver
func GetColumns_azurerm_private_dns_resolver() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sql_managed_database
func TableSchemaGenerator_azurerm_sql_managed_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sql_managed_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sql_managed_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sql_managed_database
func GetColumns_azurerm_sql_managed_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_managed_instance_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cognitive_deployment
func TableSchemaGenerator_azurerm_cognitive_deployment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cognitive_deployment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cognitive_deployment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cognitive_deployment
func GetColumns_azurerm_cognitive_deployment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rai_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("model").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scale").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cognitive_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_hub_route_table_route
func TableSchemaGenerator_azurerm_virtual_hub_route_table_route() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_hub_route_table_route().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_hub_route_table_route()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_hub_route_table_route
func GetColumns_azurerm_virtual_hub_route_table_route() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("next_hop").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("next_hop_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("route_table_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destinations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destinations_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_trigger_blob_event
func TableSchemaGenerator_azurerm_data_factory_trigger_blob_event() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_trigger_blob_event().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_trigger_blob_event()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_trigger_blob_event
func GetColumns_azurerm_data_factory_trigger_blob_event() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("pipeline").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("blob_path_begins_with").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("blob_path_ends_with").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ignore_empty_blobs").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("activated").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("events").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_account_network_rules
func TableSchemaGenerator_azurerm_storage_account_network_rules() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_account_network_rules().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_account_network_rules()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_account_network_rules
func GetColumns_azurerm_storage_account_network_rules() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bypass").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_action").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_subnet_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_link_access").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_custom_domain
func TableSchemaGenerator_azurerm_cdn_frontdoor_custom_domain() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_custom_domain().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_custom_domain()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_custom_domain
func GetColumns_azurerm_cdn_frontdoor_custom_domain() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_profile_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expiration_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tls").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_zone_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("validation_token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kusto_cluster_customer_managed_key
func TableSchemaGenerator_azurerm_kusto_cluster_customer_managed_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kusto_cluster_customer_managed_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kusto_cluster_customer_managed_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kusto_cluster_customer_managed_key
func GetColumns_azurerm_kusto_cluster_customer_managed_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_identity").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_interface_nat_rule_association
func TableSchemaGenerator_azurerm_network_interface_nat_rule_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_interface_nat_rule_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_interface_nat_rule_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_interface_nat_rule_association
func GetColumns_azurerm_network_interface_nat_rule_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("nat_rule_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_configuration_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_security_group
func TableSchemaGenerator_azurerm_network_security_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_security_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_security_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_security_group
func GetColumns_azurerm_network_security_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("security_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_app_redis_association
func TableSchemaGenerator_azurerm_spring_cloud_app_redis_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_app_redis_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_app_redis_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_app_redis_association
func GetColumns_azurerm_spring_cloud_app_redis_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("redis_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("redis_cache_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_alert_rule_ms_security_incident
func TableSchemaGenerator_azurerm_sentinel_alert_rule_ms_security_incident() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_alert_rule_ms_security_incident().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_alert_rule_ms_security_incident()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_alert_rule_ms_security_incident
func GetColumns_azurerm_sentinel_alert_rule_ms_security_incident() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("severity_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("product_filter").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alert_rule_template_guid").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name_exclude_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_private_link_scoped_service
func TableSchemaGenerator_azurerm_monitor_private_link_scoped_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_private_link_scoped_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_private_link_scoped_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_private_link_scoped_service
func GetColumns_azurerm_monitor_private_link_scoped_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_frontdoor
func TableSchemaGenerator_azurerm_frontdoor() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_frontdoor().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_frontdoor()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_frontdoor
func GetColumns_azurerm_frontdoor() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_pool").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_pool_load_balancing").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_pool_health_probes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("header_frontdoor_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("friendly_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("load_balancer_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("routing_rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_pool_health_probe").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_pools").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("explicit_resource_order").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_pool_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("routing_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_pool_load_balancing_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_endpoints").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_sql_pool_extended_auditing_policy
func TableSchemaGenerator_azurerm_synapse_sql_pool_extended_auditing_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_sql_pool_extended_auditing_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_sql_pool_extended_auditing_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_sql_pool_extended_auditing_policy
func GetColumns_azurerm_synapse_sql_pool_extended_auditing_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_monitoring_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_in_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key_is_secondary").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_sql_pool
func TableSchemaGenerator_azurerm_synapse_sql_pool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_sql_pool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_sql_pool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_sql_pool
func GetColumns_azurerm_synapse_sql_pool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("collation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_database_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_encrypted").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("restore").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_source_control_token
func TableSchemaGenerator_azurerm_app_service_source_control_token() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_source_control_token().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_source_control_token()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_source_control_token
func GetColumns_azurerm_app_service_source_control_token() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_sql_server
func TableSchemaGenerator_azurerm_data_factory_linked_service_sql_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_sql_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_sql_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_sql_server
func GetColumns_azurerm_data_factory_linked_service_sql_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("user_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_password").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_dataset_mysql
func TableSchemaGenerator_azurerm_data_factory_dataset_mysql() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_dataset_mysql().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_dataset_mysql()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_dataset_mysql
func GetColumns_azurerm_data_factory_dataset_mysql() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_column").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_account
func TableSchemaGenerator_azurerm_automation_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_account
func GetColumns_azurerm_automation_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("dsc_primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dsc_server_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_authentication_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dsc_secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hybrid_service_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_endpoint_connection").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_firewall_rule
func TableSchemaGenerator_azurerm_synapse_firewall_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_firewall_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_firewall_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_firewall_rule
func GetColumns_azurerm_synapse_firewall_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_firewall_policy
func TableSchemaGenerator_azurerm_cdn_frontdoor_firewall_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_firewall_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_firewall_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_firewall_policy
func GetColumns_azurerm_cdn_frontdoor_firewall_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_endpoint_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("redirect_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_block_response_body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_block_response_status_code").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mysql_database
func TableSchemaGenerator_azurerm_mysql_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mysql_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mysql_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mysql_database
func GetColumns_azurerm_mysql_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("charset").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("collation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_stream_input_eventhub_v2
func TableSchemaGenerator_azurerm_stream_analytics_stream_input_eventhub_v2() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_stream_input_eventhub_v2().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_stream_input_eventhub_v2()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_stream_input_eventhub_v2
func GetColumns_azurerm_stream_analytics_stream_input_eventhub_v2() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("servicebus_namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_consumer_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("serialization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_nat_gateway
func TableSchemaGenerator_azurerm_nat_gateway() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_nat_gateway().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_nat_gateway()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_nat_gateway
func GetColumns_azurerm_nat_gateway() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("idle_timeout_in_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_guid").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_resource_group_policy_assignment
func TableSchemaGenerator_azurerm_resource_group_policy_assignment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_resource_group_policy_assignment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_resource_group_policy_assignment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_resource_group_policy_assignment
func GetColumns_azurerm_resource_group_policy_assignment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enforce").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("not_scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("non_compliance_message").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dev_test_global_vm_shutdown_schedule
func TableSchemaGenerator_azurerm_dev_test_global_vm_shutdown_schedule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dev_test_global_vm_shutdown_schedule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dev_test_global_vm_shutdown_schedule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dev_test_global_vm_shutdown_schedule
func GetColumns_azurerm_dev_test_global_vm_shutdown_schedule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("daily_recurrence_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timezone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notification_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_ssh_public_key
func TableSchemaGenerator_azurerm_ssh_public_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_ssh_public_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_ssh_public_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_ssh_public_key
func GetColumns_azurerm_ssh_public_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_hub_security_partner_provider
func TableSchemaGenerator_azurerm_virtual_hub_security_partner_provider() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_hub_security_partner_provider().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_hub_security_partner_provider()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_hub_security_partner_provider
func GetColumns_azurerm_virtual_hub_security_partner_provider() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_hub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("security_provider_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_azure_blob_storage
func TableSchemaGenerator_azurerm_data_factory_linked_service_azure_blob_storage() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_azure_blob_storage().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_azure_blob_storage()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_azure_blob_storage
func GetColumns_azurerm_data_factory_linked_service_azure_blob_storage() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_managed_identity").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_principal_linked_key_vault_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sas_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_principal_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_sas_token").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_principal_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_resource_group_cost_management_export
func TableSchemaGenerator_azurerm_resource_group_cost_management_export() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_resource_group_cost_management_export().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_resource_group_cost_management_export()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_resource_group_cost_management_export
func GetColumns_azurerm_resource_group_cost_management_export() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("recurrence_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("export_data_options").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("active").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recurrence_period_start_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recurrence_period_end_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("export_data_storage_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_mongo_collection
func TableSchemaGenerator_azurerm_cosmosdb_mongo_collection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_mongo_collection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_mongo_collection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_mongo_collection
func GetColumns_azurerm_cosmosdb_mongo_collection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("analytical_storage_ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("autoscale_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shard_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("system_indexes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("throughput").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("index").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_ttl_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_nat_gateway_public_ip_prefix_association
func TableSchemaGenerator_azurerm_nat_gateway_public_ip_prefix_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_nat_gateway_public_ip_prefix_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_nat_gateway_public_ip_prefix_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_nat_gateway_public_ip_prefix_association
func GetColumns_azurerm_nat_gateway_public_ip_prefix_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("nat_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_ip_prefix_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_managed_private_endpoint
func TableSchemaGenerator_azurerm_data_factory_managed_private_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_managed_private_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_managed_private_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_managed_private_endpoint
func GetColumns_azurerm_data_factory_managed_private_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subresource_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_aws_s3
func TableSchemaGenerator_azurerm_sentinel_data_connector_aws_s3() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_aws_s3().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_aws_s3()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_aws_s3
func GetColumns_azurerm_sentinel_data_connector_aws_s3() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_table").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sqs_urls").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("aws_role_arn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kusto_cluster
func TableSchemaGenerator_azurerm_kusto_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kusto_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kusto_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kusto_cluster
func GetColumns_azurerm_kusto_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_ingestion_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("purge_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("language_extensions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_ip_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("streaming_ingestion_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trusted_external_tenants").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("double_encryption_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("optimized_auto_scale").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_stop_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_encryption_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("engine").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_network_access_restricted").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allowed_fqdns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allowed_ip_ranges").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_action_http
func TableSchemaGenerator_azurerm_logic_app_action_http() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_action_http().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_action_http()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_action_http
func GetColumns_azurerm_logic_app_action_http() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logic_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("method").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("queries").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("run_after").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("headers").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_web_pubsub_shared_private_link_resource
func TableSchemaGenerator_azurerm_web_pubsub_shared_private_link_resource() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_web_pubsub_shared_private_link_resource().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_web_pubsub_shared_private_link_resource()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_web_pubsub_shared_private_link_resource
func GetColumns_azurerm_web_pubsub_shared_private_link_resource() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("request_message").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subresource_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("web_pubsub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_dsc_configuration
func TableSchemaGenerator_azurerm_automation_dsc_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_dsc_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_dsc_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_dsc_configuration
func GetColumns_azurerm_automation_dsc_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("state").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_embedded").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_verbose").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_digital_twins_instance
func TableSchemaGenerator_azurerm_digital_twins_instance() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_digital_twins_instance().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_digital_twins_instance()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_digital_twins_instance
func GetColumns_azurerm_digital_twins_instance() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_environment
func TableSchemaGenerator_azurerm_app_service_environment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_environment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_environment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_environment
func GetColumns_azurerm_app_service_environment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internal_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("front_end_scale_factor").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internal_load_balancing_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pricing_tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_setting").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allowed_user_ip_cidrs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_linux_virtual_machine
func TableSchemaGenerator_azurerm_linux_virtual_machine() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_linux_virtual_machine().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_linux_virtual_machine()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_linux_virtual_machine
func GetColumns_azurerm_linux_virtual_machine() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("capacity_reservation_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disable_password_authentication").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_bid_price").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dedicated_host_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edge_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extensions_time_budget").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("boot_diagnostics").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secure_boot_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dedicated_host_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_ssh_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secret").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("termination_notification").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption_at_host_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eviction_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("patch_assessment_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("patch_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proximity_placement_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_scale_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("availability_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_image_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_image_reference").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_extension_operations").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vtpm_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_capabilities").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_application").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("computer_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("platform_fault_domain").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("provision_vm_agent").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_lighthouse_definition
func TableSchemaGenerator_azurerm_lighthouse_definition() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_lighthouse_definition().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_lighthouse_definition()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_lighthouse_definition
func GetColumns_azurerm_lighthouse_definition() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lighthouse_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authorization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managing_tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eligible_authorization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_datadog_monitor_tag_rule
func TableSchemaGenerator_azurerm_datadog_monitor_tag_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_datadog_monitor_tag_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_datadog_monitor_tag_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_datadog_monitor_tag_rule
func GetColumns_azurerm_datadog_monitor_tag_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("datadog_monitor_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metric").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_site_recovery_replicated_vm
func TableSchemaGenerator_azurerm_site_recovery_replicated_vm() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_site_recovery_replicated_vm().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_site_recovery_replicated_vm()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_site_recovery_replicated_vm
func GetColumns_azurerm_site_recovery_replicated_vm() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_replication_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_recovery_protection_container_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_availability_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_network_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_recovery_fabric_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_recovery_protection_container_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_recovery_fabric_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_vm_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_database_vulnerability_assessment_rule_baseline
func TableSchemaGenerator_azurerm_mssql_database_vulnerability_assessment_rule_baseline() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_database_vulnerability_assessment_rule_baseline().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_database_vulnerability_assessment_rule_baseline()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_database_vulnerability_assessment_rule_baseline
func GetColumns_azurerm_mssql_database_vulnerability_assessment_rule_baseline() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("baseline_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rule_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_vulnerability_assessment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("baseline_result").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_certificate_binding
func TableSchemaGenerator_azurerm_app_service_certificate_binding() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_certificate_binding().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_certificate_binding()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_certificate_binding
func GetColumns_azurerm_app_service_certificate_binding() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_state").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname_binding_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_api
func TableSchemaGenerator_azurerm_api_management_api() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_api().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_api()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_api
func GetColumns_azurerm_api_management_api() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("contact").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("openid_authentication").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("import").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("terms_of_service_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_key_parameter_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_online").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protocols").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("revision_description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_api_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("revision").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version_description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("oauth2_authorization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_current").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("soap_pass_through").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_required").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_cluster_customer_managed_key
func TableSchemaGenerator_azurerm_log_analytics_cluster_customer_managed_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_cluster_customer_managed_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_cluster_customer_managed_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_cluster_customer_managed_key
func GetColumns_azurerm_log_analytics_cluster_customer_managed_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_key_vault_managed_storage_account
func TableSchemaGenerator_azurerm_key_vault_managed_storage_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_key_vault_managed_storage_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_key_vault_managed_storage_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_key_vault_managed_storage_account
func GetColumns_azurerm_key_vault_managed_storage_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("regenerate_key_automatically").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("regeneration_period").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_resolver_outbound_endpoint
func TableSchemaGenerator_azurerm_private_dns_resolver_outbound_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_resolver_outbound_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_resolver_outbound_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_resolver_outbound_endpoint
func GetColumns_azurerm_private_dns_resolver_outbound_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_dns_resolver_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_express_route_connection
func TableSchemaGenerator_azurerm_express_route_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_express_route_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_express_route_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_express_route_connection
func GetColumns_azurerm_express_route_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("express_route_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("routing").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authorization_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_internet_security").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("express_route_circuit_peering_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("routing_weight").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_firewall_network_rule_collection
func TableSchemaGenerator_azurerm_firewall_network_rule_collection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_firewall_network_rule_collection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_firewall_network_rule_collection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_firewall_network_rule_collection
func GetColumns_azurerm_firewall_network_rule_collection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_firewall_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_api_release
func TableSchemaGenerator_azurerm_api_management_api_release() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_api_release().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_api_release()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_api_release
func GetColumns_azurerm_api_management_api_release() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notes").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_application_insights
func TableSchemaGenerator_azurerm_application_insights() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_application_insights().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_application_insights()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_application_insights
func GetColumns_azurerm_application_insights() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internet_ingestion_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("instrumentation_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internet_query_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_authentication_disabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sampling_percentage").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("daily_data_cap_in_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("daily_data_cap_notifications_disabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disable_ip_masking").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("force_customer_storage_for_profiler").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_in_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_dsc_nodeconfiguration
func TableSchemaGenerator_azurerm_automation_dsc_nodeconfiguration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_dsc_nodeconfiguration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_dsc_nodeconfiguration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_dsc_nodeconfiguration
func GetColumns_azurerm_automation_dsc_nodeconfiguration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("configuration_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_embedded").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_datasource_windows_event
func TableSchemaGenerator_azurerm_log_analytics_datasource_windows_event() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_datasource_windows_event().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_datasource_windows_event()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_datasource_windows_event
func GetColumns_azurerm_log_analytics_datasource_windows_event() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_log_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_types").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_log_profile
func TableSchemaGenerator_azurerm_monitor_log_profile() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_log_profile().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_log_profile()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_log_profile
func GetColumns_azurerm_monitor_log_profile() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("categories").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("locations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("servicebus_rule_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_network_peering
func TableSchemaGenerator_azurerm_virtual_network_peering() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_network_peering().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_network_peering()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_network_peering
func GetColumns_azurerm_virtual_network_peering() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_virtual_network_access").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("remote_virtual_network_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_remote_gateways").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_forwarded_traffic").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_gateway_transit").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_data_lake_gen2_path
func TableSchemaGenerator_azurerm_storage_data_lake_gen2_path() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_data_lake_gen2_path().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_data_lake_gen2_path()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_data_lake_gen2_path
func GetColumns_azurerm_storage_data_lake_gen2_path() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("filesystem_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("group").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("owner").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ace").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_workspace_sql_aad_admin
func TableSchemaGenerator_azurerm_synapse_workspace_sql_aad_admin() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_workspace_sql_aad_admin().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_workspace_sql_aad_admin()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_workspace_sql_aad_admin
func GetColumns_azurerm_synapse_workspace_sql_aad_admin() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("object_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_sql_database
func TableSchemaGenerator_azurerm_cosmosdb_sql_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_sql_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_sql_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_sql_database
func GetColumns_azurerm_cosmosdb_sql_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("throughput").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("autoscale_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_firewall_application_rule_collection
func TableSchemaGenerator_azurerm_firewall_application_rule_collection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_firewall_application_rule_collection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_firewall_application_rule_collection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_firewall_application_rule_collection
func GetColumns_azurerm_firewall_application_rule_collection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_firewall_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_cassandra_cluster
func TableSchemaGenerator_azurerm_cosmosdb_cassandra_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_cassandra_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_cassandra_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_cassandra_cluster
func GetColumns_azurerm_cosmosdb_cassandra_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("repair_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_admin_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("external_gossip_certificate_pems").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("external_seed_node_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_pems").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("delegated_management_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hours_between_backups").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_method").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_service
func TableSchemaGenerator_azurerm_spring_cloud_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_service
func GetColumns_azurerm_spring_cloud_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("required_network_traffic_rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_registry_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_redundant").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trace").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_public_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("build_agent_pool_size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_stream_public_endpoint_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_registry_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("config_server_git_setting").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_container_registry_task
func TableSchemaGenerator_azurerm_container_registry_task() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_container_registry_task().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_container_registry_task()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_container_registry_task
func GetColumns_azurerm_container_registry_task() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("agent_pool_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("base_image_trigger").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("registry_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timer_trigger").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_template").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("file_step").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("platform").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_system_task").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("agent_setting").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("docker_step").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_trigger").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_registry_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeout_in_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encoded_step").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_app_cosmosdb_association
func TableSchemaGenerator_azurerm_spring_cloud_app_cosmosdb_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_app_cosmosdb_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_app_cosmosdb_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_app_cosmosdb_association
func GetColumns_azurerm_spring_cloud_app_cosmosdb_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cosmosdb_mongo_database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cosmosdb_sql_database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cosmosdb_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cosmosdb_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cosmosdb_cassandra_keyspace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cosmosdb_gremlin_database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cosmosdb_gremlin_graph_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_application_insights_smart_detection_rule
func TableSchemaGenerator_azurerm_application_insights_smart_detection_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_application_insights_smart_detection_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_application_insights_smart_detection_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_application_insights_smart_detection_rule
func GetColumns_azurerm_application_insights_smart_detection_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_email_recipients").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_insights_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_emails_to_subscription_owners").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dashboard_grafana
func TableSchemaGenerator_azurerm_dashboard_grafana() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dashboard_grafana().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dashboard_grafana()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dashboard_grafana
func GetColumns_azurerm_dashboard_grafana() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_key_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("deterministic_outbound_ip_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_redundancy_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_generated_domain_name_label_scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("grafana_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_share_file
func TableSchemaGenerator_azurerm_storage_share_file() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_share_file().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_share_file()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_share_file
func GetColumns_azurerm_storage_share_file() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("content_disposition").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_encoding").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_length").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_md5").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_share_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_activity_log_alert
func TableSchemaGenerator_azurerm_monitor_activity_log_alert() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_activity_log_alert().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_activity_log_alert()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_activity_log_alert
func GetColumns_azurerm_monitor_activity_log_alert() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("criteria").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mysql_server
func TableSchemaGenerator_azurerm_mysql_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mysql_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mysql_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mysql_server
func GetColumns_azurerm_mysql_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("restore_point_in_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_minimal_tls_version_enforced").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("creation_source_server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("geo_redundant_backup_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("infrastructure_encryption_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("threat_detection_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_grow_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_mb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_enforcement_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_standard
func TableSchemaGenerator_azurerm_logic_app_standard() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_standard().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_standard()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_standard
func GetColumns_azurerm_logic_app_standard() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_affinity_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_share_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_plan_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bundle_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_domain_verification_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_extension_bundle").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_sql_pool_workload_classifier
func TableSchemaGenerator_azurerm_synapse_sql_pool_workload_classifier() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_sql_pool_workload_classifier().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_sql_pool_workload_classifier()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_sql_pool_workload_classifier
func GetColumns_azurerm_synapse_sql_pool_workload_classifier() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("label").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workload_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("context").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("importance").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("member_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_linked_service
func TableSchemaGenerator_azurerm_log_analytics_linked_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_linked_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_linked_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_linked_service
func GetColumns_azurerm_log_analytics_linked_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("read_access_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("write_access_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_capacity_reservation_group
func TableSchemaGenerator_azurerm_capacity_reservation_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_capacity_reservation_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_capacity_reservation_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_capacity_reservation_group
func GetColumns_azurerm_capacity_reservation_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_watcher
func TableSchemaGenerator_azurerm_network_watcher() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_watcher().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_watcher()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_watcher
func GetColumns_azurerm_network_watcher() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mariadb_database
func TableSchemaGenerator_azurerm_mariadb_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mariadb_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mariadb_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mariadb_database
func GetColumns_azurerm_mariadb_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("charset").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("collation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_query_pack
func TableSchemaGenerator_azurerm_log_analytics_query_pack() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_query_pack().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_query_pack()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_query_pack
func GetColumns_azurerm_log_analytics_query_pack() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mysql_server_key
func TableSchemaGenerator_azurerm_mysql_server_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mysql_server_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mysql_server_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mysql_server_key
func GetColumns_azurerm_mysql_server_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_software_update_configuration
func TableSchemaGenerator_azurerm_automation_software_update_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_software_update_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_software_update_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_software_update_configuration
func GetColumns_azurerm_automation_software_update_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("error_meesage").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("post_task").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linux").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("operating_system").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pre_task").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("error_code").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("non_azure_computer_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("windows").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_aaaa_record
func TableSchemaGenerator_azurerm_private_dns_aaaa_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_aaaa_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_aaaa_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_aaaa_record
func GetColumns_azurerm_private_dns_aaaa_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("records").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_office_power_bi
func TableSchemaGenerator_azurerm_sentinel_data_connector_office_power_bi() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_office_power_bi().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_office_power_bi()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_office_power_bi
func GetColumns_azurerm_sentinel_data_connector_office_power_bi() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_notification_hub
func TableSchemaGenerator_azurerm_notification_hub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_notification_hub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_notification_hub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_notification_hub
func GetColumns_azurerm_notification_hub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("apns_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gcm_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_queue
func TableSchemaGenerator_azurerm_storage_queue() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_queue().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_queue()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_queue
func GetColumns_azurerm_storage_queue() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_workspace_security_alert_policy
func TableSchemaGenerator_azurerm_synapse_workspace_security_alert_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_workspace_security_alert_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_workspace_security_alert_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_workspace_security_alert_policy
func GetColumns_azurerm_synapse_workspace_security_alert_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("email_account_admins_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_state").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disabled_alerts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("email_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventgrid_event_subscription
func TableSchemaGenerator_azurerm_eventgrid_event_subscription() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventgrid_event_subscription().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventgrid_event_subscription()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventgrid_event_subscription
func GetColumns_azurerm_eventgrid_event_subscription() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_function_endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("delivery_identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subject_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_endpoint_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hybrid_connection_endpoint_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("labels").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_bus_queue_endpoint_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retry_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_blob_dead_letter_destination").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("advanced_filtering_on_arrays_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_delivery_schema").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("included_event_types").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("delivery_property").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_queue_endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("webhook_endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expiration_time_utc").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_bus_topic_endpoint_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("advanced_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dead_letter_identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_synapse
func TableSchemaGenerator_azurerm_data_factory_linked_service_synapse() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_synapse().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_synapse()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_synapse
func GetColumns_azurerm_data_factory_linked_service_synapse() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_password").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_product_group
func TableSchemaGenerator_azurerm_api_management_product_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_product_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_product_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_product_group
func GetColumns_azurerm_api_management_product_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("product_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_source_control_slot
func TableSchemaGenerator_azurerm_app_service_source_control_slot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_source_control_slot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_source_control_slot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_source_control_slot
func GetColumns_azurerm_app_service_source_control_slot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("github_action_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("branch").ColumnType(schema.ColumnTypeString).Description("The URL for the repository").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("repo_url").ColumnType(schema.ColumnTypeString).Description("The branch name to use for deployments.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rollback_enabled").ColumnType(schema.ColumnTypeBool).Description("Should the Deployment Rollback be enabled? Defaults to `false`").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scm_type").ColumnType(schema.ColumnTypeString).Description("The SCM Type in use. This value is decoded by the service from the repository information supplied.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("slot_id").ColumnType(schema.ColumnTypeString).Description("The ID of the Linux or Windows Web App Slot.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_mercurial").ColumnType(schema.ColumnTypeBool).Description("The repository specified is Mercurial. Defaults to `false`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("uses_github_action").ColumnType(schema.ColumnTypeBool).Description("Indicates if the Slot uses a GitHub action for deployment. This value is decoded by the service from the repository information supplied.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_local_git").ColumnType(schema.ColumnTypeBool).Description("Should the Slot use local Git configuration.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_manual_integration").ColumnType(schema.ColumnTypeBool).Description("Should code be deployed manually. Set to `true` to disable continuous integration, such as webhooks into online repos such as GitHub. Defaults to `false`").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mysql_virtual_network_rule
func TableSchemaGenerator_azurerm_mysql_virtual_network_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mysql_virtual_network_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mysql_virtual_network_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mysql_virtual_network_rule
func GetColumns_azurerm_mysql_virtual_network_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_object_replication
func TableSchemaGenerator_azurerm_storage_object_replication() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_object_replication().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_object_replication()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_object_replication
func GetColumns_azurerm_storage_object_replication() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_object_replication_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_object_replication_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_databricks_access_connector
func TableSchemaGenerator_azurerm_databricks_access_connector() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_databricks_access_connector().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_databricks_access_connector()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_databricks_access_connector
func GetColumns_azurerm_databricks_access_connector() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_management_policy
func TableSchemaGenerator_azurerm_storage_management_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_management_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_management_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_management_policy
func GetColumns_azurerm_storage_management_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_databricks_workspace
func TableSchemaGenerator_azurerm_databricks_workspace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_databricks_workspace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_databricks_workspace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_databricks_workspace
func GetColumns_azurerm_databricks_workspace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_resource_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_security_group_rules_required").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("load_balancer_backend_address_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("customer_managed_key_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("infrastructure_encryption_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_services_cmk_key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_web_pubsub_network_acl
func TableSchemaGenerator_azurerm_web_pubsub_network_acl() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_web_pubsub_network_acl().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_web_pubsub_network_acl()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_web_pubsub_network_acl
func GetColumns_azurerm_web_pubsub_network_acl() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("default_action").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("web_pubsub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_endpoint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_express_route_circuit
func TableSchemaGenerator_azurerm_express_route_circuit() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_express_route_circuit().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_express_route_circuit()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_express_route_circuit
func GetColumns_azurerm_express_route_circuit() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("bandwidth_in_gbps").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_provider_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_provider_provisioning_state").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_classic_operations").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("express_route_port_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bandwidth_in_mbps").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("peering_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_solution
func TableSchemaGenerator_azurerm_log_analytics_solution() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_solution().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_solution()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_solution
func GetColumns_azurerm_log_analytics_solution() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("solution_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kusto_script
func TableSchemaGenerator_azurerm_kusto_script() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kusto_script().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kusto_script()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kusto_script
func GetColumns_azurerm_kusto_script() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("force_an_update_when_value_changed").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("continue_on_errors_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sas_token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_notification_recipient_email
func TableSchemaGenerator_azurerm_api_management_notification_recipient_email() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_notification_recipient_email().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_notification_recipient_email()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_notification_recipient_email
func GetColumns_azurerm_api_management_notification_recipient_email() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("notification_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("email").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dev_test_schedule
func TableSchemaGenerator_azurerm_dev_test_schedule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dev_test_schedule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dev_test_schedule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dev_test_schedule
func GetColumns_azurerm_dev_test_schedule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_zone_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("weekly_recurrence").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("daily_recurrence").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hourly_recurrence").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notification_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lab_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("task_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_output_function
func TableSchemaGenerator_azurerm_stream_analytics_output_function() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_output_function().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_output_function()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_output_function
func GetColumns_azurerm_stream_analytics_output_function() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("batch_max_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("function_app").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("function_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("batch_max_in_bytes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_web_app
func TableSchemaGenerator_azurerm_bot_web_app() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_web_app().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_web_app()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_web_app
func GetColumns_azurerm_bot_web_app() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("developer_app_insights_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("developer_app_insights_application_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("microsoft_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("luis_app_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("luis_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("developer_app_insights_api_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_mongo_database
func TableSchemaGenerator_azurerm_cosmosdb_mongo_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_mongo_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_mongo_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_mongo_database
func GetColumns_azurerm_cosmosdb_mongo_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("throughput").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("autoscale_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_configuration
func TableSchemaGenerator_azurerm_app_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_configuration
func GetColumns_azurerm_app_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_read_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("soft_delete_retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_write_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("purge_protection_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_auth_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_read_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_write_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_express_route_gateway
func TableSchemaGenerator_azurerm_express_route_gateway() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_express_route_gateway().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_express_route_gateway()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_express_route_gateway
func GetColumns_azurerm_express_route_gateway() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("scale_units").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_hub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_share
func TableSchemaGenerator_azurerm_storage_share() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_share().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_share()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_share
func GetColumns_azurerm_storage_share() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled_protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("quota").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_manager_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("acl").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_variable_int
func TableSchemaGenerator_azurerm_automation_variable_int() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_variable_int().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_variable_int()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_variable_int
func GetColumns_azurerm_automation_variable_int() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encrypted").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_sql_container
func TableSchemaGenerator_azurerm_cosmosdb_sql_container() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_sql_container().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_sql_container()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_sql_container
func GetColumns_azurerm_cosmosdb_sql_container() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("indexing_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_key_version").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("conflict_resolution_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_key_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("throughput").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("autoscale_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("analytical_storage_ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("unique_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_server_dns_alias
func TableSchemaGenerator_azurerm_mssql_server_dns_alias() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_server_dns_alias().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_server_dns_alias()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_server_dns_alias
func GetColumns_azurerm_mssql_server_dns_alias() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_record").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mssql_server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_application_insights_api_key
func TableSchemaGenerator_azurerm_application_insights_api_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_application_insights_api_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_application_insights_api_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_application_insights_api_key
func GetColumns_azurerm_application_insights_api_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("read_permissions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("write_permissions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_insights_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_backup_protected_vm
func TableSchemaGenerator_azurerm_backup_protected_vm() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_backup_protected_vm().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_backup_protected_vm()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_backup_protected_vm
func GetColumns_azurerm_backup_protected_vm() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("source_vm_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("exclude_disk_luns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("include_disk_luns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_interface_backend_address_pool_association
func TableSchemaGenerator_azurerm_network_interface_backend_address_pool_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_interface_backend_address_pool_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_interface_backend_address_pool_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_interface_backend_address_pool_association
func GetColumns_azurerm_network_interface_backend_address_pool_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_address_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_configuration_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_batch_application
func TableSchemaGenerator_azurerm_batch_application() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_batch_application().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_batch_application()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_batch_application
func GetColumns_azurerm_batch_application() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_updates").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_rule
func TableSchemaGenerator_azurerm_cdn_frontdoor_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_rule
func GetColumns_azurerm_cdn_frontdoor_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_rule_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("order").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("actions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("conditions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("behavior_on_match").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_rule_set_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_portal_tenant_configuration
func TableSchemaGenerator_azurerm_portal_tenant_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_portal_tenant_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_portal_tenant_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_portal_tenant_configuration
func GetColumns_azurerm_portal_tenant_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_markdown_storage_enforced").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_shared_image_gallery
func TableSchemaGenerator_azurerm_shared_image_gallery() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_shared_image_gallery().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_shared_image_gallery()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_shared_image_gallery
func GetColumns_azurerm_shared_image_gallery() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("unique_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_share_directory
func TableSchemaGenerator_azurerm_storage_share_directory() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_share_directory().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_share_directory()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_share_directory
func GetColumns_azurerm_storage_share_directory() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("share_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_redis_cache
func TableSchemaGenerator_azurerm_redis_cache() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_redis_cache().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_redis_cache()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_redis_cache
func GetColumns_azurerm_redis_cache() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("minimum_tls_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("replicas_per_primary").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_static_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shard_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("redis_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_non_ssl_port").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("redis_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("replicas_per_master").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("capacity").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("patch_schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("family").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_sql_role_definition
func TableSchemaGenerator_azurerm_cosmosdb_sql_role_definition() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_sql_role_definition().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_sql_role_definition()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_sql_role_definition
func GetColumns_azurerm_cosmosdb_sql_role_definition() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("permissions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("assignable_scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_policy
func TableSchemaGenerator_azurerm_api_management_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_policy
func GetColumns_azurerm_api_management_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("xml_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("xml_link").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_output_synapse
func TableSchemaGenerator_azurerm_stream_analytics_output_synapse() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_output_synapse().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_output_synapse()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_output_synapse
func GetColumns_azurerm_stream_analytics_output_synapse() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_sync
func TableSchemaGenerator_azurerm_storage_sync() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_sync().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_sync()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_sync
func GetColumns_azurerm_storage_sync() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("incoming_traffic_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_healthcare_workspace
func TableSchemaGenerator_azurerm_healthcare_workspace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_healthcare_workspace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_healthcare_workspace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_healthcare_workspace
func GetColumns_azurerm_healthcare_workspace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_endpoint_connection").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_key_vault_secret
func TableSchemaGenerator_azurerm_key_vault_secret() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_key_vault_secret().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_key_vault_secret()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_key_vault_secret
func GetColumns_azurerm_key_vault_secret() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("expiration_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("not_before_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_versionless_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("versionless_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_office_irm
func TableSchemaGenerator_azurerm_sentinel_data_connector_office_irm() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_office_irm().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_office_irm()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_office_irm
func GetColumns_azurerm_sentinel_data_connector_office_irm() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_stream_input_blob
func TableSchemaGenerator_azurerm_stream_analytics_stream_input_blob() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_stream_input_blob().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_stream_input_blob()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_stream_input_blob
func GetColumns_azurerm_stream_analytics_stream_input_blob() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("time_format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("date_format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("path_pattern").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("serialization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_integration_account_session
func TableSchemaGenerator_azurerm_logic_app_integration_account_session() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_integration_account_session().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_integration_account_session()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_integration_account_session
func GetColumns_azurerm_logic_app_integration_account_session() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_api_portal_custom_domain
func TableSchemaGenerator_azurerm_spring_cloud_api_portal_custom_domain() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_api_portal_custom_domain().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_api_portal_custom_domain()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_api_portal_custom_domain
func GetColumns_azurerm_spring_cloud_api_portal_custom_domain() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_api_portal_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iot_time_series_insights_gen2_environment
func TableSchemaGenerator_azurerm_iot_time_series_insights_gen2_environment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iot_time_series_insights_gen2_environment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iot_time_series_insights_gen2_environment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iot_time_series_insights_gen2_environment
func GetColumns_azurerm_iot_time_series_insights_gen2_environment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("warm_store_data_retention_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_access_fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_batch_pool
func TableSchemaGenerator_azurerm_batch_pool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_batch_pool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_batch_pool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_batch_pool
func GetColumns_azurerm_batch_pool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_placement").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("windows").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stop_pending_resize_operation").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_scale").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_image_reference").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fixed_scale").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("task_scheduling_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_agent_sku_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_encryption").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("inter_node_communication").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vm_size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_accounts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_disks").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_tasks_per_node").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_disk_placement").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extensions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mount").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_task").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kubernetes_cluster_node_pool
func TableSchemaGenerator_azurerm_kubernetes_cluster_node_pool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kubernetes_cluster_node_pool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kubernetes_cluster_node_pool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kubernetes_cluster_node_pool
func GetColumns_azurerm_kubernetes_cluster_node_pool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("message_of_the_day").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("min_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_labels").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("windows_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kubernetes_cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scale_down_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kubelet_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_ca_trust_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("orchestrator_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proximity_placement_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fips_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_pods").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ultra_ssd_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workload_runtime").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_auto_scaling").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_disk_size_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_disk_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vm_size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kubelet_disk_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linux_os_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eviction_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("capacity_reservation_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_node_public_ip").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_public_ip_prefix_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_taints").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pod_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spot_max_price").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vnet_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("upgrade_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_host_encryption").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_network_dns_servers
func TableSchemaGenerator_azurerm_virtual_network_dns_servers() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_network_dns_servers().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_network_dns_servers()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_network_dns_servers
func GetColumns_azurerm_virtual_network_dns_servers() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_servers").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_dataset_http
func TableSchemaGenerator_azurerm_data_factory_dataset_http() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_dataset_http().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_dataset_http()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_dataset_http
func GetColumns_azurerm_data_factory_dataset_http() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("relative_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("request_body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("request_method").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_column").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_failover_group
func TableSchemaGenerator_azurerm_mssql_failover_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_failover_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_failover_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_failover_group
func GetColumns_azurerm_mssql_failover_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("databases").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("readonly_endpoint_failover_policy_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partner_server").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("read_write_endpoint_failover_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_managed_private_endpoint
func TableSchemaGenerator_azurerm_synapse_managed_private_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_managed_private_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_managed_private_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_managed_private_endpoint
func GetColumns_azurerm_synapse_managed_private_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subresource_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_manager
func TableSchemaGenerator_azurerm_network_manager() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_manager().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_manager()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_manager
func GetColumns_azurerm_network_manager() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope_accesses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cross_tenant_scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_dps
func TableSchemaGenerator_azurerm_iothub_dps() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_dps().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_dps()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_dps
func GetColumns_azurerm_iothub_dps() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_hub").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_residency_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_operations_host_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_filter_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("device_provisioning_host_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id_scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allocation_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_output_eventhub
func TableSchemaGenerator_azurerm_stream_analytics_output_eventhub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_output_eventhub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_output_eventhub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_output_eventhub
func GetColumns_azurerm_stream_analytics_output_eventhub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("servicebus_namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("serialization").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("property_columns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_route_server_bgp_connection
func TableSchemaGenerator_azurerm_route_server_bgp_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_route_server_bgp_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_route_server_bgp_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_route_server_bgp_connection
func GetColumns_azurerm_route_server_bgp_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("peer_asn").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("peer_ip").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("route_server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_web_pubsub
func TableSchemaGenerator_azurerm_web_pubsub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_web_pubsub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_web_pubsub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_web_pubsub
func GetColumns_azurerm_web_pubsub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tls_client_cert_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("external_ip").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_auth_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("capacity").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("aad_auth_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("live_trace").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_endpoint
func TableSchemaGenerator_azurerm_cdn_frontdoor_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_endpoint
func GetColumns_azurerm_cdn_frontdoor_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_profile_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_web
func TableSchemaGenerator_azurerm_data_factory_linked_service_web() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_web().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_web()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_web
func GetColumns_azurerm_data_factory_linked_service_web() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_watcher
func TableSchemaGenerator_azurerm_automation_watcher() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_watcher().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_watcher()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_watcher
func GetColumns_azurerm_automation_watcher() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script_parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script_run_on").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("etag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("execution_frequency_in_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_integration_runtime_self_hosted
func TableSchemaGenerator_azurerm_synapse_integration_runtime_self_hosted() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_integration_runtime_self_hosted().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_integration_runtime_self_hosted()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_integration_runtime_self_hosted
func GetColumns_azurerm_synapse_integration_runtime_self_hosted() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("authorization_key_primary").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authorization_key_secondary").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_virtual_machine
func TableSchemaGenerator_azurerm_mssql_virtual_machine() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_virtual_machine().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_virtual_machine()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_virtual_machine
func GetColumns_azurerm_mssql_virtual_machine() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_connectivity_update_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_connectivity_update_username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_connectivity_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_connectivity_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_patching").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("assessment").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("r_services_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_instance").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_custom_hostname_binding
func TableSchemaGenerator_azurerm_app_service_custom_hostname_binding() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_custom_hostname_binding().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_custom_hostname_binding()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_custom_hostname_binding
func GetColumns_azurerm_app_service_custom_hostname_binding() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssl_state").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_ip").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_dataset_binary
func TableSchemaGenerator_azurerm_data_factory_dataset_binary() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_dataset_binary().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_dataset_binary()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_dataset_binary
func GetColumns_azurerm_data_factory_dataset_binary() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compression").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_blob_storage_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sftp_server_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_server_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_nginx_deployment
func TableSchemaGenerator_azurerm_nginx_deployment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_nginx_deployment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_nginx_deployment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_nginx_deployment
func GetColumns_azurerm_nginx_deployment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("diagnose_support_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("nginx_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_public").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logging_storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_resource_group").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_private").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_integration_runtime_azure_ssis
func TableSchemaGenerator_azurerm_data_factory_integration_runtime_azure_ssis() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_integration_runtime_azure_ssis().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_integration_runtime_azure_ssis()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_integration_runtime_azure_ssis
func GetColumns_azurerm_data_factory_integration_runtime_azure_ssis() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("vnet_integration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_parallel_executions_per_node").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_setup_script").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("number_of_nodes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("catalog_info").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("express_vnet_integration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("package_store").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edition").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("express_custom_setup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proxy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_active_directory_domain_service_trust
func TableSchemaGenerator_azurerm_active_directory_domain_service_trust() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_active_directory_domain_service_trust().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_active_directory_domain_service_trust()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_active_directory_domain_service_trust
func GetColumns_azurerm_active_directory_domain_service_trust() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("domain_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trusted_domain_dns_ips").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trusted_domain_fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_fallback_route
func TableSchemaGenerator_azurerm_iothub_fallback_route() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_fallback_route().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_fallback_route()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_fallback_route
func GetColumns_azurerm_iothub_fallback_route() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("condition").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_subscription
func TableSchemaGenerator_azurerm_subscription() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_subscription().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_subscription()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_subscription
func GetColumns_azurerm_subscription() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("workload").ColumnType(schema.ColumnTypeString).Description("The workload type for the Subscription. Possible values are `Production` (default) and `DevTest`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Description("The GUID of the Subscription.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_name").ColumnType(schema.ColumnTypeString).Description("The Display Name for the Subscription.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Description("The Tenant ID to which the subscription belongs").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alias").ColumnType(schema.ColumnTypeString).Description("The Alias Name of the subscription. If omitted a new UUID will be generated for this property.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("billing_scope_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_backup_policy_vm
func TableSchemaGenerator_azurerm_backup_policy_vm() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_backup_policy_vm().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_backup_policy_vm()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_backup_policy_vm
func GetColumns_azurerm_backup_policy_vm() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("instant_restore_retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_daily").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_monthly").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_yearly").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timezone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_weekly").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_active_slot
func TableSchemaGenerator_azurerm_app_service_active_slot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_active_slot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_active_slot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_active_slot
func GetColumns_azurerm_app_service_active_slot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_slot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_management_lock
func TableSchemaGenerator_azurerm_management_lock() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_management_lock().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_management_lock()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_management_lock
func GetColumns_azurerm_management_lock() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lock_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notes").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_metric_alert
func TableSchemaGenerator_azurerm_monitor_metric_alert() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_metric_alert().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_metric_alert()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_metric_alert
func GetColumns_azurerm_monitor_metric_alert() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("window_size").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_location").ColumnType(schema.ColumnTypeString).Description("The location of the target pluginsdk. Required when using subscription, resource group scope or multiple scopes.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_type").ColumnType(schema.ColumnTypeString).Description("The resource type (e.g. Microsoft.Compute/virtualMachines) of the target pluginsdk. Required when using subscription, resource group scope or multiple scopes.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_insights_web_test_location_availability_criteria").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("criteria").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dynamic_criteria").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_mitigate").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frequency").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("severity").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_machine_extension
func TableSchemaGenerator_azurerm_virtual_machine_extension() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_machine_extension().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_machine_extension()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_machine_extension
func GetColumns_azurerm_virtual_machine_extension() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_upgrade_minor_version").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("publisher").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("settings").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("failure_suppression_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type_handler_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automatic_upgrade_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protected_settings_from_key_vault").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protected_settings").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_postgresql_virtual_network_rule
func TableSchemaGenerator_azurerm_postgresql_virtual_network_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_postgresql_virtual_network_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_postgresql_virtual_network_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_postgresql_virtual_network_rule
func GetColumns_azurerm_postgresql_virtual_network_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ignore_missing_vnet_service_endpoint").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dns_caa_record
func TableSchemaGenerator_azurerm_dns_caa_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dns_caa_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dns_caa_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dns_caa_record
func GetColumns_azurerm_dns_caa_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("record").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_snowflake
func TableSchemaGenerator_azurerm_data_factory_linked_service_snowflake() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_snowflake().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_snowflake()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_snowflake
func GetColumns_azurerm_data_factory_linked_service_snowflake() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_password").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_redis_cache
func TableSchemaGenerator_azurerm_api_management_redis_cache() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_redis_cache().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_redis_cache()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_redis_cache
func GetColumns_azurerm_api_management_redis_cache() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cache_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("redis_cache_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_sql_pool_security_alert_policy
func TableSchemaGenerator_azurerm_synapse_sql_pool_security_alert_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_sql_pool_security_alert_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_sql_pool_security_alert_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_sql_pool_security_alert_policy
func GetColumns_azurerm_synapse_sql_pool_security_alert_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("email_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disabled_alerts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("email_account_admins_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_state").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_openid_connect_provider
func TableSchemaGenerator_azurerm_api_management_openid_connect_provider() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_openid_connect_provider().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_openid_connect_provider()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_openid_connect_provider
func GetColumns_azurerm_api_management_openid_connect_provider() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventhub_namespace_schema_group
func TableSchemaGenerator_azurerm_eventhub_namespace_schema_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventhub_namespace_schema_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventhub_namespace_schema_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventhub_namespace_schema_group
func GetColumns_azurerm_eventhub_namespace_schema_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_compatibility").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_cosmosdb
func TableSchemaGenerator_azurerm_data_factory_linked_service_cosmosdb() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_cosmosdb().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_cosmosdb()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_cosmosdb
func GetColumns_azurerm_data_factory_linked_service_cosmosdb() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_share_dataset_blob_storage
func TableSchemaGenerator_azurerm_data_share_dataset_blob_storage() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_share_dataset_blob_storage().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_share_dataset_blob_storage()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_share_dataset_blob_storage
func GetColumns_azurerm_data_share_dataset_blob_storage() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("container_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_share_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("file_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_media_content_key_policy
func TableSchemaGenerator_azurerm_media_content_key_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_media_content_key_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_media_content_key_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_media_content_key_policy
func GetColumns_azurerm_media_content_key_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_option").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("media_services_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kusto_iothub_data_connection
func TableSchemaGenerator_azurerm_kusto_iothub_data_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kusto_iothub_data_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kusto_iothub_data_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kusto_iothub_data_connection
func GetColumns_azurerm_kusto_iothub_data_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("table_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("consumer_group").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_routing_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mapping_rule_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_system_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_billing_account_cost_management_export
func TableSchemaGenerator_azurerm_billing_account_cost_management_export() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_billing_account_cost_management_export().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_billing_account_cost_management_export()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_billing_account_cost_management_export
func GetColumns_azurerm_billing_account_cost_management_export() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("export_data_options").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("active").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recurrence_period_end_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recurrence_period_start_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recurrence_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("export_data_storage_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("billing_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_relay_hybrid_connection
func TableSchemaGenerator_azurerm_relay_hybrid_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_relay_hybrid_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_relay_hybrid_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_relay_hybrid_connection
func GetColumns_azurerm_relay_hybrid_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("relay_namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("requires_client_authorization").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_firewall
func TableSchemaGenerator_azurerm_firewall() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_firewall().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_firewall()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_firewall
func GetColumns_azurerm_firewall() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("threat_intel_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_ranges").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_ip_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_hub").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_servers").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("firewall_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stack_hci_cluster
func TableSchemaGenerator_azurerm_stack_hci_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stack_hci_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stack_hci_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stack_hci_cluster
func GetColumns_azurerm_stack_hci_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_workspace_extended_auditing_policy
func TableSchemaGenerator_azurerm_synapse_workspace_extended_auditing_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_workspace_extended_auditing_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_workspace_extended_auditing_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_workspace_extended_auditing_policy
func GetColumns_azurerm_synapse_workspace_extended_auditing_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key_is_secondary").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_monitoring_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_in_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_wan
func TableSchemaGenerator_azurerm_virtual_wan() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_wan().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_wan()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_wan
func GetColumns_azurerm_virtual_wan() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("office365_local_breakout_category").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_branch_to_branch_traffic").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disable_vpn_encryption").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_account
func TableSchemaGenerator_azurerm_storage_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_account
func GetColumns_azurerm_storage_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_file_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sftp_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_nested_items_to_be_public").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_blob_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_hns_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_blob_host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_web_host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_domain").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_table_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_web_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_key_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_table_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("blob_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("routing").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cross_tenant_replication_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("large_file_share_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("queue_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_blob_host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_blob_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_dfs_host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_queue_host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_web_host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_file_host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table_encryption_key_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("immutability_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("nfsv3_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_queue_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_web_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_files_authentication").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_dfs_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_file_host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_dfs_host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edge_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("infrastructure_encryption_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_table_host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("share_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_blob_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_rules").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sas_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("static_website").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_replication_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_dfs_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_queue_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_queue_host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_file_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("queue_encryption_key_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_to_oauth_authentication").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_https_traffic_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("min_tls_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_table_host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("customer_managed_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_blob_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_trigger_tumbling_window
func TableSchemaGenerator_azurerm_data_factory_trigger_tumbling_window() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_trigger_tumbling_window().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_trigger_tumbling_window()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_trigger_tumbling_window
func GetColumns_azurerm_data_factory_trigger_tumbling_window() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trigger_dependency").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("delay").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("interval").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pipeline").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retry").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frequency").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("activated").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_concurrency").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventhub_namespace
func TableSchemaGenerator_azurerm_eventhub_namespace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventhub_namespace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventhub_namespace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventhub_namespace
func GetColumns_azurerm_eventhub_namespace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("network_rulesets").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_redundant").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_inflate_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dedicated_cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("capacity").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_authentication_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_throughput_units").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_secondary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("minimum_tls_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_primary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_blueprint_assignment
func TableSchemaGenerator_azurerm_blueprint_assignment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_blueprint_assignment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_blueprint_assignment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_blueprint_assignment
func GetColumns_azurerm_blueprint_assignment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lock_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameter_values").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lock_exclude_principals").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_groups").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("blueprint_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lock_exclude_actions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_communication_service
func TableSchemaGenerator_azurerm_communication_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_communication_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_communication_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_communication_service
func GetColumns_azurerm_communication_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_zone_virtual_network_link
func TableSchemaGenerator_azurerm_private_dns_zone_virtual_network_link() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_zone_virtual_network_link().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_zone_virtual_network_link()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_zone_virtual_network_link
func GetColumns_azurerm_private_dns_zone_virtual_network_link() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_dns_zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("registration_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_image
func TableSchemaGenerator_azurerm_image() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_image().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_image()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_image
func GetColumns_azurerm_image() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("hyper_v_generation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_resilient").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_certificate
func TableSchemaGenerator_azurerm_automation_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_certificate
func GetColumns_azurerm_automation_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("exportable").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("base64").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventgrid_system_topic
func TableSchemaGenerator_azurerm_eventgrid_system_topic() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventgrid_system_topic().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventgrid_system_topic()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventgrid_system_topic
func GetColumns_azurerm_eventgrid_system_topic() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metric_arm_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("topic_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_arm_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_network_gateway
func TableSchemaGenerator_azurerm_virtual_network_gateway() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_network_gateway().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_network_gateway()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_network_gateway
func GetColumns_azurerm_virtual_network_gateway() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("active_active").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_local_network_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edge_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vpn_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bgp_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_bgp").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("generation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_route").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_address_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vpn_client_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_aadb2c_directory
func TableSchemaGenerator_azurerm_aadb2c_directory() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_aadb2c_directory().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_aadb2c_directory()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_aadb2c_directory
func GetColumns_azurerm_aadb2c_directory() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("billing_type").ColumnType(schema.ColumnTypeString).Description("The type of billing for the B2C tenant. Possible values include: `MAU` or `Auths`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("country_code").ColumnType(schema.ColumnTypeString).Description("Country code of the B2C tenant. See https://aka.ms/B2CDataResidency for valid country codes.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_residency_location").ColumnType(schema.ColumnTypeString).Description("Location in which the B2C tenant is hosted and data resides. See https://aka.ms/B2CDataResidency for more information.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Description("The initial display name of the B2C tenant.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("domain_name").ColumnType(schema.ColumnTypeString).Description("Domain name of the B2C tenant, including onmicrosoft.com suffix.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("effective_start_date").ColumnType(schema.ColumnTypeString).Description("The date from which the billing type took effect. May not be populated until after the first billing cycle.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Description("Billing SKU for the B2C tenant. See https://aka.ms/b2cBilling for more information.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Description("The Tenant ID for the B2C tenant.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_healthcare_medtech_service_fhir_destination
func TableSchemaGenerator_azurerm_healthcare_medtech_service_fhir_destination() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_healthcare_medtech_service_fhir_destination().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_healthcare_medtech_service_fhir_destination()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_healthcare_medtech_service_fhir_destination
func GetColumns_azurerm_healthcare_medtech_service_fhir_destination() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_fhir_mapping_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_fhir_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_identity_resolution_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("medtech_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_tag
func TableSchemaGenerator_azurerm_api_management_tag() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_tag().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_tag()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_tag
func GetColumns_azurerm_api_management_tag() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_subscription
func TableSchemaGenerator_azurerm_api_management_subscription() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_subscription().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_subscription()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_subscription
func GetColumns_azurerm_api_management_subscription() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("user_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_tracing").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("product_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("state").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_postgresql
func TableSchemaGenerator_azurerm_data_factory_linked_service_postgresql() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_postgresql().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_postgresql()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_postgresql
func GetColumns_azurerm_data_factory_linked_service_postgresql() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_gateway
func TableSchemaGenerator_azurerm_api_management_gateway() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_gateway().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_gateway()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_gateway
func GetColumns_azurerm_api_management_gateway() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location_data").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_data_lake_storage_gen2
func TableSchemaGenerator_azurerm_data_factory_linked_service_data_lake_storage_gen2() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_data_lake_storage_gen2().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_data_lake_storage_gen2()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_data_lake_storage_gen2
func GetColumns_azurerm_data_factory_linked_service_data_lake_storage_gen2() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_principal_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_principal_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_managed_identity").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_lb_nat_pool
func TableSchemaGenerator_azurerm_lb_nat_pool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_lb_nat_pool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_lb_nat_pool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_lb_nat_pool
func GetColumns_azurerm_lb_nat_pool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_port_start").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("idle_timeout_in_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("loadbalancer_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tcp_reset_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("floating_ip_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_ip_configuration_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_ip_configuration_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_port_end").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_marketplace_agreement
func TableSchemaGenerator_azurerm_marketplace_agreement() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_marketplace_agreement().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_marketplace_agreement()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_marketplace_agreement
func GetColumns_azurerm_marketplace_agreement() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("license_text_link").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("offer").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("plan").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("privacy_policy_link").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("publisher").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_servicebus_subscription
func TableSchemaGenerator_azurerm_servicebus_subscription() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_servicebus_subscription().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_servicebus_subscription()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_servicebus_subscription
func GetColumns_azurerm_servicebus_subscription() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("client_scoped_subscription").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_delete_on_idle").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dead_lettering_on_filter_evaluation_error").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_batched_operations").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("forward_dead_lettered_messages_to").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("forward_to").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_scoped_subscription_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("requires_session").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dead_lettering_on_message_expiration").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_message_ttl").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("lock_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_delivery_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("topic_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_maintenance_assignment_virtual_machine
func TableSchemaGenerator_azurerm_maintenance_assignment_virtual_machine() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_maintenance_assignment_virtual_machine().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_maintenance_assignment_virtual_machine()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_maintenance_assignment_virtual_machine
func GetColumns_azurerm_maintenance_assignment_virtual_machine() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("maintenance_configuration_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_custom_provider
func TableSchemaGenerator_azurerm_custom_provider() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_custom_provider().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_custom_provider()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_custom_provider
func GetColumns_azurerm_custom_provider() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_type").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("validation").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_dataset_delimited_text
func TableSchemaGenerator_azurerm_data_factory_dataset_delimited_text() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_dataset_delimited_text().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_dataset_delimited_text()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_dataset_delimited_text
func GetColumns_azurerm_data_factory_dataset_delimited_text() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("compression_codec").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("quote_character").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encoding").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("first_row_as_header").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("row_delimiter").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_blob_fs_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("column_delimiter").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compression_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("escape_character").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_blob_storage_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("null_value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_server_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_column").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_sftp
func TableSchemaGenerator_azurerm_data_factory_linked_service_sftp() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_sftp().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_sftp()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_sftp
func GetColumns_azurerm_data_factory_linked_service_sftp() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("skip_host_key_validation").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_key_fingerprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sql_failover_group
func TableSchemaGenerator_azurerm_sql_failover_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sql_failover_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sql_failover_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sql_failover_group
func GetColumns_azurerm_sql_failover_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("databases").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partner_servers").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("read_write_endpoint_failover_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("readonly_endpoint_failover_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_cassandra_keyspace
func TableSchemaGenerator_azurerm_cosmosdb_cassandra_keyspace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_cassandra_keyspace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_cassandra_keyspace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_cassandra_keyspace
func GetColumns_azurerm_cosmosdb_cassandra_keyspace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("throughput").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("autoscale_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_notebook_workspace
func TableSchemaGenerator_azurerm_cosmosdb_notebook_workspace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_notebook_workspace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_notebook_workspace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_notebook_workspace
func GetColumns_azurerm_cosmosdb_notebook_workspace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_output_table
func TableSchemaGenerator_azurerm_stream_analytics_output_table() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_output_table().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_output_table()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_output_table
func GetColumns_azurerm_stream_analytics_output_table() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("row_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("columns_to_remove").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("batch_size").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_action_custom
func TableSchemaGenerator_azurerm_logic_app_action_custom() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_action_custom().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_action_custom()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_action_custom
func GetColumns_azurerm_logic_app_action_custom() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logic_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_hdinsight_hbase_cluster
func TableSchemaGenerator_azurerm_hdinsight_hbase_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_hdinsight_hbase_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_hdinsight_hbase_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_hdinsight_hbase_cluster
func GetColumns_azurerm_hdinsight_hbase_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compute_isolation").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("component_version").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("roles").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssh_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tls_min_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("security_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_gen2").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_encryption").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extension").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metastores").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("monitor").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_lb_rule
func TableSchemaGenerator_azurerm_lb_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_lb_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_lb_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_lb_rule
func GetColumns_azurerm_lb_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_floating_ip").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_tcp_reset").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_ip_configuration_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("load_distribution").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_address_pool_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("idle_timeout_in_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disable_outbound_snat").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_ip_configuration_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("loadbalancer_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("probe_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_linux_web_app
func TableSchemaGenerator_azurerm_linux_web_app() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_linux_web_app().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_linux_web_app()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_linux_web_app
func GetColumns_azurerm_linux_web_app() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_plan_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_affinity_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auth_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_exclusion_paths").ColumnType(schema.ColumnTypeString).Description("Paths to exclude when using client certificates, separated by ;").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sticky_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zip_deploy_file").ColumnType(schema.ColumnTypeString).Description("The local path and filename of the Zip packaged application to deploy to this Windows Web App. **Note:** Using this value requires `WEBSITE_RUN_FROM_PACKAGE=1` on the App in `app_settings`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_domain_verification_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_reference_identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_function_app_slot
func TableSchemaGenerator_azurerm_function_app_slot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_function_app_slot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_function_app_slot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_function_app_slot
func GetColumns_azurerm_function_app_slot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("function_app_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auth_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_plan_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("daily_memory_time_quota").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_builtin_logging").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_lb
func TableSchemaGenerator_azurerm_lb() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_lb().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_lb()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_lb
func GetColumns_azurerm_lb() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edge_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_ip_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_key_vault_managed_hardware_security_module
func TableSchemaGenerator_azurerm_key_vault_managed_hardware_security_module() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_key_vault_managed_hardware_security_module().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_key_vault_managed_hardware_security_module()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_key_vault_managed_hardware_security_module
func GetColumns_azurerm_key_vault_managed_hardware_security_module() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_acls").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hsm_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("purge_protection_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("soft_delete_retention_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_object_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iotcentral_application_network_rule_set
func TableSchemaGenerator_azurerm_iotcentral_application_network_rule_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iotcentral_application_network_rule_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iotcentral_application_network_rule_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iotcentral_application_network_rule_set
func GetColumns_azurerm_iotcentral_application_network_rule_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("iotcentral_application_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("apply_to_device").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_action").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory
func TableSchemaGenerator_azurerm_data_factory() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory
func GetColumns_azurerm_data_factory() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("customer_managed_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_virtual_network_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("purview_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vsts_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("customer_managed_key_identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("global_parameter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("github_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_builder
func TableSchemaGenerator_azurerm_spring_cloud_builder() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_builder().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_builder()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_builder
func GetColumns_azurerm_spring_cloud_builder() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("build_pack_group").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stack").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_connection
func TableSchemaGenerator_azurerm_bot_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_connection
func GetColumns_azurerm_bot_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("bot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scopes").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_provider_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_hdinsight_kafka_cluster
func TableSchemaGenerator_azurerm_hdinsight_kafka_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_hdinsight_kafka_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_hdinsight_kafka_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_hdinsight_kafka_cluster
func GetColumns_azurerm_hdinsight_kafka_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("https_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tls_min_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compute_isolation").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("security_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption_in_transit_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rest_proxy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("roles").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("component_version").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extension").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metastores").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kafka_rest_proxy_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssh_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_encryption").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("monitor").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_gen2").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_load_test
func TableSchemaGenerator_azurerm_load_test() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_load_test().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_load_test()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_load_test
func GetColumns_azurerm_load_test() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_plane_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_analysis_services_server
func TableSchemaGenerator_azurerm_analysis_services_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_analysis_services_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_analysis_services_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_analysis_services_server
func GetColumns_azurerm_analysis_services_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ipv4_firewall_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_blob_container_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_power_bi_service").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_full_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_users").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("querypool_connection_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_protection_backup_instance_blob_storage
func TableSchemaGenerator_azurerm_data_protection_backup_instance_blob_storage() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_protection_backup_instance_blob_storage().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_protection_backup_instance_blob_storage()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_protection_backup_instance_blob_storage
func GetColumns_azurerm_data_protection_backup_instance_blob_storage() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_service_fabric_cluster
func TableSchemaGenerator_azurerm_service_fabric_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_service_fabric_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_service_fabric_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_service_fabric_cluster
func GetColumns_azurerm_service_fabric_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_code_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("reliability_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("node_type").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("add_on_features").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vm_image").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vmss_zonal_upgrade_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_thumbprint").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("diagnostics_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_active_directory").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_common_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_common_name").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fabric_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("reverse_proxy_certificate").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("upgrade_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_fabric_zonal_upgrade_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("upgrade_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("reverse_proxy_certificate_common_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_dataset_json
func TableSchemaGenerator_azurerm_data_factory_dataset_json() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_dataset_json().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_dataset_json()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_dataset_json
func GetColumns_azurerm_data_factory_dataset_json() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_blob_storage_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_column").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_server_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encoding").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_key_vault_key
func TableSchemaGenerator_azurerm_key_vault_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_key_vault_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_key_vault_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_key_vault_key
func GetColumns_azurerm_key_vault_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("expiration_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_key_openssh").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_versionless_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("y").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("curve").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_size").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("versionless_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("x").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_opts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("not_before_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("e").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("n").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_key_pem").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_firewall_policy_rule_collection_group
func TableSchemaGenerator_azurerm_firewall_policy_rule_collection_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_firewall_policy_rule_collection_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_firewall_policy_rule_collection_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_firewall_policy_rule_collection_group
func GetColumns_azurerm_firewall_policy_rule_collection_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("nat_rule_collection").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_rule_collection").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("firewall_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_rule_collection").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mariadb_firewall_rule
func TableSchemaGenerator_azurerm_mariadb_firewall_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mariadb_firewall_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mariadb_firewall_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mariadb_firewall_rule
func GetColumns_azurerm_mariadb_firewall_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_container_group
func TableSchemaGenerator_azurerm_container_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_container_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_container_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_container_group
func GetColumns_azurerm_container_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("init_container").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_name_label").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("diagnostics").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("image_registry_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_address_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_profile_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("restart_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_name_label_reuse_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("exposed_port").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sql_active_directory_administrator
func TableSchemaGenerator_azurerm_sql_active_directory_administrator() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sql_active_directory_administrator().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sql_active_directory_administrator()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sql_active_directory_administrator
func GetColumns_azurerm_sql_active_directory_administrator() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("object_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azuread_authentication_only").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_elasticpool
func TableSchemaGenerator_azurerm_mssql_elasticpool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_elasticpool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_elasticpool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_elasticpool
func GetColumns_azurerm_mssql_elasticpool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_size_bytes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_size_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maintenance_configuration_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("per_database_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_redundant").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_relay_namespace
func TableSchemaGenerator_azurerm_relay_namespace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_relay_namespace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_relay_namespace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_relay_namespace
func GetColumns_azurerm_relay_namespace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metric_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_scheduled_query_rules_alert
func TableSchemaGenerator_azurerm_monitor_scheduled_query_rules_alert() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_scheduled_query_rules_alert().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_scheduled_query_rules_alert()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_scheduled_query_rules_alert
func GetColumns_azurerm_monitor_scheduled_query_rules_alert() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("throttling").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_mitigation_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_source_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frequency").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("severity").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_window").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trigger").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authorized_resource_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_managed_instance
func TableSchemaGenerator_azurerm_mssql_managed_instance() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_managed_instance().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_managed_instance()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_managed_instance
func GetColumns_azurerm_mssql_managed_instance() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("collation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_data_endpoint_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proxy_override").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timezone_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vcores").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_size_in_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_zone_partner_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maintenance_configuration_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("minimum_tls_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_sql_pool_workload_group
func TableSchemaGenerator_azurerm_synapse_sql_pool_workload_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_sql_pool_workload_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_sql_pool_workload_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_sql_pool_workload_group
func GetColumns_azurerm_synapse_sql_pool_workload_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("importance").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("min_resource_percent").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query_execution_timeout_in_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_resource_percent").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_resource_percent_per_request").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("min_resource_percent_per_request").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_key_vault
func TableSchemaGenerator_azurerm_data_factory_linked_service_key_vault() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_key_vault().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_key_vault()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_key_vault
func GetColumns_azurerm_data_factory_linked_service_key_vault() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_protection_backup_policy_disk
func TableSchemaGenerator_azurerm_data_protection_backup_policy_disk() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_protection_backup_policy_disk().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_protection_backup_policy_disk()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_protection_backup_policy_disk
func GetColumns_azurerm_data_protection_backup_policy_disk() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("backup_repeating_time_intervals").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_retention_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dns_zone
func TableSchemaGenerator_azurerm_dns_zone() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dns_zone().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dns_zone()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dns_zone
func GetColumns_azurerm_dns_zone() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("max_number_of_record_sets").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("soa_record").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name_servers").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("number_of_record_sets").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_linux_function_app_slot
func TableSchemaGenerator_azurerm_linux_function_app_slot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_linux_function_app_slot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_linux_function_app_slot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_linux_function_app_slot
func GetColumns_azurerm_linux_function_app_slot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_exclusion_paths").ColumnType(schema.ColumnTypeString).Description("Paths to exclude when using client certificates, separated by ;").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_reference_identity_id").ColumnType(schema.ColumnTypeString).Description("The User Assigned Identity to use for Key Vault access.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Description("Specifies the name of the Function App Slot.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("functions_extension_version").ColumnType(schema.ColumnTypeString).Description("The runtime version associated with the Function App Slot.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_uses_managed_identity").ColumnType(schema.ColumnTypeBool).Description("Should the Function App Slot use its Managed Identity to access storage?").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).Description("A map of key-value pairs for [App Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("builtin_logging_enabled").ColumnType(schema.ColumnTypeBool).Description("Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Description("Can the Function App Slot only be accessed via HTTPS?").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_share_force_disabled").ColumnType(schema.ColumnTypeBool).Description("Force disable the content share settings.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_enabled").ColumnType(schema.ColumnTypeBool).Description("Should the Function App Slot use Client Certificates.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Description("Is the Linux Function App Slot enabled.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Description("The backend storage account name which will be used by this Function App Slot.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_key_vault_secret_id").ColumnType(schema.ColumnTypeString).Description("The Key Vault Secret ID, including version, that contains the Connection String to connect to the storage account for this Function App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_mode").ColumnType(schema.ColumnTypeString).Description("The mode of the Function App Slot's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_domain_verification_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Description("The access key which will be used to access the storage account for the Function App Slot.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auth_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("daily_memory_time_quota").ColumnType(schema.ColumnTypeFloat).Description("The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps in Consumption Plans.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("function_app_id").ColumnType(schema.ColumnTypeString).Description("The ID of the Linux Function App this Slot is a member of.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_smart_detector_alert_rule
func TableSchemaGenerator_azurerm_monitor_smart_detector_alert_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_smart_detector_alert_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_smart_detector_alert_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_smart_detector_alert_rule
func GetColumns_azurerm_monitor_smart_detector_alert_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("detector_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope_resource_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("throttling_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action_group").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frequency").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("severity").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_route_server
func TableSchemaGenerator_azurerm_route_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_route_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_route_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_route_server
func GetColumns_azurerm_route_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("routing_state").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_router_ips").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("branch_to_branch_traffic_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_ip_address_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_router_asn").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mysql_firewall_rule
func TableSchemaGenerator_azurerm_mysql_firewall_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mysql_firewall_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mysql_firewall_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mysql_firewall_rule
func GetColumns_azurerm_mysql_firewall_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("start_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_gateway_route_config
func TableSchemaGenerator_azurerm_spring_cloud_gateway_route_config() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_gateway_route_config().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_gateway_route_config()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_gateway_route_config
func GetColumns_azurerm_spring_cloud_gateway_route_config() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("filters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("predicates").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sso_validation_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("open_api").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("route").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_resolver_virtual_network_link
func TableSchemaGenerator_azurerm_private_dns_resolver_virtual_network_link() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_resolver_virtual_network_link().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_resolver_virtual_network_link()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_resolver_virtual_network_link
func GetColumns_azurerm_private_dns_resolver_virtual_network_link() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_forwarding_ruleset_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_endpoint_custom_domain
func TableSchemaGenerator_azurerm_cdn_endpoint_custom_domain() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_endpoint_custom_domain().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_endpoint_custom_domain()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_endpoint_custom_domain
func GetColumns_azurerm_cdn_endpoint_custom_domain() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_endpoint_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_managed_https").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_managed_https").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_interface_application_gateway_backend_address_pool_association
func TableSchemaGenerator_azurerm_network_interface_application_gateway_backend_address_pool_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_interface_application_gateway_backend_address_pool_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_interface_application_gateway_backend_address_pool_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_interface_application_gateway_backend_address_pool_association
func GetColumns_azurerm_network_interface_application_gateway_backend_address_pool_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_address_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_configuration_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_scheduled_query_rules_alert_v2
func TableSchemaGenerator_azurerm_monitor_scheduled_query_rules_alert_v2() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_scheduled_query_rules_alert_v2().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_scheduled_query_rules_alert_v2()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_scheduled_query_rules_alert_v2
func GetColumns_azurerm_monitor_scheduled_query_rules_alert_v2() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("created_with_api_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("criteria").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_mitigation_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_a_legacy_log_analytics_rule").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mute_actions_after_alert_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_types").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("window_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_alerts_storage_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("severity").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("evaluation_frequency").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_workspace_alerts_storage_configured").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query_time_range_override").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("skip_query_validation").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_variable_datetime
func TableSchemaGenerator_azurerm_automation_variable_datetime() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_variable_datetime().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_variable_datetime()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_variable_datetime
func GetColumns_azurerm_automation_variable_datetime() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encrypted").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_autoscale_setting
func TableSchemaGenerator_azurerm_monitor_autoscale_setting() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_autoscale_setting().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_autoscale_setting()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_autoscale_setting
func GetColumns_azurerm_monitor_autoscale_setting() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notification").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mysql_flexible_database
func TableSchemaGenerator_azurerm_mysql_flexible_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mysql_flexible_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mysql_flexible_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mysql_flexible_database
func GetColumns_azurerm_mysql_flexible_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("collation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("charset").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_email_template
func TableSchemaGenerator_azurerm_api_management_email_template() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_email_template().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_email_template()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_email_template
func GetColumns_azurerm_api_management_email_template() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subject").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("title").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_digital_twins_endpoint_servicebus
func TableSchemaGenerator_azurerm_digital_twins_endpoint_servicebus() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_digital_twins_endpoint_servicebus().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_digital_twins_endpoint_servicebus()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_digital_twins_endpoint_servicebus
func GetColumns_azurerm_digital_twins_endpoint_servicebus() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dead_letter_storage_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("digital_twins_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("servicebus_primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("servicebus_secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_snapshot
func TableSchemaGenerator_azurerm_snapshot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_snapshot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_snapshot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_snapshot
func GetColumns_azurerm_snapshot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trusted_launch_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_option").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_size_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_hybrid_connection
func TableSchemaGenerator_azurerm_app_service_hybrid_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_hybrid_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_hybrid_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_hybrid_connection
func GetColumns_azurerm_app_service_hybrid_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("port").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("relay_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_key_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_key_value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_bus_suffix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("relay_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_bus_namespace").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_api_version_set
func TableSchemaGenerator_azurerm_api_management_api_version_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_api_version_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_api_version_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_api_version_set
func GetColumns_azurerm_api_management_api_version_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version_query_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version_header_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("versioning_scheme").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_watcher_flow_log
func TableSchemaGenerator_azurerm_network_watcher_flow_log() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_watcher_flow_log().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_watcher_flow_log()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_watcher_flow_log
func GetColumns_azurerm_network_watcher_flow_log() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("traffic_analytics").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_security_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_watcher_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_machine_packet_capture
func TableSchemaGenerator_azurerm_virtual_machine_packet_capture() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_machine_packet_capture().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_machine_packet_capture()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_machine_packet_capture
func GetColumns_azurerm_virtual_machine_packet_capture() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_location").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_bytes_per_packet").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_bytes_per_session").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_watcher_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_capture_duration_in_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_machine_scale_set_extension
func TableSchemaGenerator_azurerm_virtual_machine_scale_set_extension() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_machine_scale_set_extension().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_machine_scale_set_extension()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_machine_scale_set_extension
func GetColumns_azurerm_virtual_machine_scale_set_extension() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protected_settings").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("provision_after_extensions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("publisher").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type_handler_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_upgrade_minor_version").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automatic_upgrade_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("failure_suppression_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("force_update_tag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("settings").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_scale_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protected_settings_from_key_vault").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_tenant_template_deployment
func TableSchemaGenerator_azurerm_tenant_template_deployment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_tenant_template_deployment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_tenant_template_deployment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_tenant_template_deployment
func GetColumns_azurerm_tenant_template_deployment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("debug_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template_spec_version_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("output_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_gateway_host_name_configuration
func TableSchemaGenerator_azurerm_api_management_gateway_host_name_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_gateway_host_name_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_gateway_host_name_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_gateway_host_name_configuration
func GetColumns_azurerm_api_management_gateway_host_name_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tls10_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tls11_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http2_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("request_client_certificate_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_dataset_sql_server_table
func TableSchemaGenerator_azurerm_data_factory_dataset_sql_server_table() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_dataset_sql_server_table().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_dataset_sql_server_table()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_dataset_sql_server_table
func GetColumns_azurerm_data_factory_dataset_sql_server_table() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_column").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_mysql
func TableSchemaGenerator_azurerm_data_factory_linked_service_mysql() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_mysql().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_mysql()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_mysql
func GetColumns_azurerm_data_factory_linked_service_mysql() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_media_live_event
func TableSchemaGenerator_azurerm_media_live_event() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_media_live_event().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_media_live_event()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_media_live_event
func GetColumns_azurerm_media_live_event() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_static_hostname").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cross_site_access_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("preview").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_start_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("transcription_languages").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encoding").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("input").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("media_services_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname_prefix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_servicebus_namespace_disaster_recovery_config
func TableSchemaGenerator_azurerm_servicebus_namespace_disaster_recovery_config() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_servicebus_namespace_disaster_recovery_config().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_servicebus_namespace_disaster_recovery_config()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_servicebus_namespace_disaster_recovery_config
func GetColumns_azurerm_servicebus_namespace_disaster_recovery_config() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("default_primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partner_namespace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alias_authorization_rule_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_namespace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_key_vault_certificate
func TableSchemaGenerator_azurerm_key_vault_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_key_vault_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_key_vault_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_key_vault_certificate
func GetColumns_azurerm_key_vault_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_attribute").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secret_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("versionless_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("versionless_secret_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_data_base64").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_hybrid_runbook_worker_group
func TableSchemaGenerator_azurerm_automation_hybrid_runbook_worker_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_hybrid_runbook_worker_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_hybrid_runbook_worker_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_hybrid_runbook_worker_group
func GetColumns_azurerm_automation_hybrid_runbook_worker_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("credential_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_network_gateway_nat_rule
func TableSchemaGenerator_azurerm_virtual_network_gateway_nat_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_network_gateway_nat_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_network_gateway_nat_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_network_gateway_nat_rule
func GetColumns_azurerm_virtual_network_gateway_nat_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_configuration_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("external_mapping").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internal_mapping").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_sql_function
func TableSchemaGenerator_azurerm_cosmosdb_sql_function() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_sql_function().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_sql_function()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_sql_function
func GetColumns_azurerm_cosmosdb_sql_function() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_frontdoor_custom_https_configuration
func TableSchemaGenerator_azurerm_frontdoor_custom_https_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_frontdoor_custom_https_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_frontdoor_custom_https_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_frontdoor_custom_https_configuration
func GetColumns_azurerm_frontdoor_custom_https_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_https_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_https_provisioning_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_endpoint_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_identity_provider_google
func TableSchemaGenerator_azurerm_api_management_identity_provider_google() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_identity_provider_google().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_identity_provider_google()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_identity_provider_google
func GetColumns_azurerm_api_management_identity_provider_google() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("client_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_automation_rule
func TableSchemaGenerator_azurerm_sentinel_automation_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_automation_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_automation_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_automation_rule
func GetColumns_azurerm_sentinel_automation_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action_incident").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expiration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("order").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action_playbook").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("condition").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_function_javascript_udf
func TableSchemaGenerator_azurerm_stream_analytics_function_javascript_udf() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_function_javascript_udf().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_function_javascript_udf()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_function_javascript_udf
func GetColumns_azurerm_stream_analytics_function_javascript_udf() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("input").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("output").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bot_channel_slack
func TableSchemaGenerator_azurerm_bot_channel_slack() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bot_channel_slack().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bot_channel_slack()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bot_channel_slack
func GetColumns_azurerm_bot_channel_slack() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("bot_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("landing_page_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("signing_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("verification_token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventgrid_domain
func TableSchemaGenerator_azurerm_eventgrid_domain() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventgrid_domain().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventgrid_domain()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventgrid_domain
func GetColumns_azurerm_eventgrid_domain() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("input_mapping_default_values").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("inbound_ip_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("input_schema").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_delete_topic_with_last_subscription").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("input_mapping_fields").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_create_topic_with_first_subscription").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_auth_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_windows_function_app_slot
func TableSchemaGenerator_azurerm_windows_function_app_slot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_windows_function_app_slot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_windows_function_app_slot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_windows_function_app_slot
func GetColumns_azurerm_windows_function_app_slot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("app_settings").ColumnType(schema.ColumnTypeJSON).Description("A map of key-value pairs for [App Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Description("Specifies the name of the Windows Function App Slot.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("builtin_logging_enabled").ColumnType(schema.ColumnTypeBool).Description("Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Description("The Kind value for this Windows Function App Slot.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only").ColumnType(schema.ColumnTypeBool).Description("Can the Function App Slot only be accessed via HTTPS?").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).Description("A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outbound_ip_address_list`. For example `[\"52.23.25.3\", \"52.143.43.12\"]`.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_mode").ColumnType(schema.ColumnTypeString).Description("The mode of the Function App Slot's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("daily_memory_time_quota").ColumnType(schema.ColumnTypeFloat).Description("The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps in Consumption Plans.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_reference_identity_id").ColumnType(schema.ColumnTypeString).Description("The User Assigned Identity to use for Key Vault access.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_address_list").ColumnType(schema.ColumnTypeJSON).Description("A list of outbound IP addresses. For example `[\"52.23.25.3\", \"52.143.43.12\"]`.").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_credential").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_share_force_disabled").ColumnType(schema.ColumnTypeBool).Description("Force disable the content share settings.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_hostname").ColumnType(schema.ColumnTypeString).Description("The default hostname of the Windows Function App Slot.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_key_vault_secret_id").ColumnType(schema.ColumnTypeString).Description("The Key Vault Secret ID, including version, that contains the Connection String to connect to the storage account for this Function App.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backup").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("site_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_domain_verification_id").ColumnType(schema.ColumnTypeString).Description("The identifier used by App Service to perform domain ownership verification via DNS TXT record.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Description("Is the Windows Function App Slot enabled.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("functions_extension_version").ColumnType(schema.ColumnTypeString).Description("The runtime version associated with the Function App Slot.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Description("A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Description("The backend storage account name which will be used by this Function App Slot.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_enabled").ColumnType(schema.ColumnTypeBool).Description("Should the Function App Slot use Client Certificates.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_certificate_exclusion_paths").ColumnType(schema.ColumnTypeString).Description("Paths to exclude when using client certificates, separated by ;").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_uses_managed_identity").ColumnType(schema.ColumnTypeBool).Description("Should the Function App Slot use its Managed Identity to access storage?").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auth_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Description("The access key which will be used to access the storage account for the Function App Slot.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("function_app_id").ColumnType(schema.ColumnTypeString).Description("The ID of the Windows Function App this Slot is a member of.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("possible_outbound_ip_addresses").ColumnType(schema.ColumnTypeString).Description("A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outbound_ip_addresses`. For example `[\"52.23.25.3\", \"52.143.43.12\",\"52.143.43.17\"]`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_traffic_manager_azure_endpoint
func TableSchemaGenerator_azurerm_traffic_manager_azure_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_traffic_manager_azure_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_traffic_manager_azure_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_traffic_manager_azure_endpoint
func GetColumns_azurerm_traffic_manager_azure_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("profile_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("weight").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_header").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("geo_mappings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_authorization_server
func TableSchemaGenerator_azurerm_api_management_authorization_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_authorization_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_authorization_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_authorization_server
func GetColumns_azurerm_api_management_authorization_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("bearer_token_sending_methods").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_authentication_method").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_registration_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("grant_types").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_owner_username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("support_state").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authorization_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authorization_methods").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token_body_parameter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_owner_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_servicebus_queue_authorization_rule
func TableSchemaGenerator_azurerm_servicebus_queue_authorization_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_servicebus_queue_authorization_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_servicebus_queue_authorization_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_servicebus_queue_authorization_rule
func GetColumns_azurerm_servicebus_queue_authorization_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("listen").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("queue_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("manage").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_server_vulnerability_assessment
func TableSchemaGenerator_azurerm_mssql_server_vulnerability_assessment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_server_vulnerability_assessment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_server_vulnerability_assessment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_server_vulnerability_assessment
func GetColumns_azurerm_mssql_server_vulnerability_assessment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("server_security_alert_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_sas_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recurring_scans").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cdn_frontdoor_security_policy
func TableSchemaGenerator_azurerm_cdn_frontdoor_security_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cdn_frontdoor_security_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cdn_frontdoor_security_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cdn_frontdoor_security_policy
func GetColumns_azurerm_cdn_frontdoor_security_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cdn_frontdoor_profile_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("security_policies").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_microsoft_defender_advanced_threat_protection
func TableSchemaGenerator_azurerm_sentinel_data_connector_microsoft_defender_advanced_threat_protection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_microsoft_defender_advanced_threat_protection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_microsoft_defender_advanced_threat_protection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_microsoft_defender_advanced_threat_protection
func GetColumns_azurerm_sentinel_data_connector_microsoft_defender_advanced_threat_protection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_identity_provider_facebook
func TableSchemaGenerator_azurerm_api_management_identity_provider_facebook() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_identity_provider_facebook().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_identity_provider_facebook()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_identity_provider_facebook
func GetColumns_azurerm_api_management_identity_provider_facebook() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_configuration_key
func TableSchemaGenerator_azurerm_app_configuration_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_configuration_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_configuration_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_configuration_key
func GetColumns_azurerm_app_configuration_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("locked").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vault_key_reference").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("configuration_store_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("etag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("label").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_flowlet_data_flow
func TableSchemaGenerator_azurerm_data_factory_flowlet_data_flow() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_flowlet_data_flow().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_flowlet_data_flow()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_flowlet_data_flow
func GetColumns_azurerm_data_factory_flowlet_data_flow() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("transformation").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sink").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script_lines").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_container_registry_task_schedule_run_now
func TableSchemaGenerator_azurerm_container_registry_task_schedule_run_now() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_container_registry_task_schedule_run_now().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_container_registry_task_schedule_run_now()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_container_registry_task_schedule_run_now
func GetColumns_azurerm_container_registry_task_schedule_run_now() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("container_registry_task_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_dps_shared_access_policy
func TableSchemaGenerator_azurerm_iothub_dps_shared_access_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_dps_shared_access_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_dps_shared_access_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_dps_shared_access_policy
func GetColumns_azurerm_iothub_dps_shared_access_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enrollment_write").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("registration_read").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_config").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enrollment_read").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_dps_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("registration_write").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_api_tag
func TableSchemaGenerator_azurerm_api_management_api_tag() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_api_tag().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_api_tag()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_api_tag
func GetColumns_azurerm_api_management_api_tag() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_managed_disk
func TableSchemaGenerator_azurerm_managed_disk() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_managed_disk().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_managed_disk()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_managed_disk
func GetColumns_azurerm_managed_disk() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_mbps_read_write").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edge_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hyper_v_generation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trusted_launch_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_option").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_encryption_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_mbps_read_only").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_size_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_iops_read_write").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_shares").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_access_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_image_reference_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("upload_size_bytes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_iops_read_only").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_access_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("on_demand_bursting_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secure_vm_disk_encryption_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("image_reference_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logical_sector_size").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("security_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_database_extended_auditing_policy
func TableSchemaGenerator_azurerm_mssql_database_extended_auditing_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_database_extended_auditing_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_database_extended_auditing_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_database_extended_auditing_policy
func GetColumns_azurerm_mssql_database_extended_auditing_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_in_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key_is_secondary").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_monitoring_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_table
func TableSchemaGenerator_azurerm_storage_table() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_table().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_table()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_table
func GetColumns_azurerm_storage_table() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("acl").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_function_app_active_slot
func TableSchemaGenerator_azurerm_function_app_active_slot() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_function_app_active_slot().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_function_app_active_slot()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_function_app_active_slot
func GetColumns_azurerm_function_app_active_slot() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("last_successful_swap").ColumnType(schema.ColumnTypeString).Description("The timestamp of the last successful swap with `Production`").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("overwrite_network_config").ColumnType(schema.ColumnTypeBool).Description("The swap action should overwrite the Production slot's network configuration with the configuration from this slot. Defaults to `true`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("slot_id").ColumnType(schema.ColumnTypeString).Description("The ID of the Slot to swap with `Production`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_machine_data_disk_attachment
func TableSchemaGenerator_azurerm_virtual_machine_data_disk_attachment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_machine_data_disk_attachment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_machine_data_disk_attachment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_machine_data_disk_attachment
func GetColumns_azurerm_virtual_machine_data_disk_attachment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("lun").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_disk_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("write_accelerator_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("caching").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_option").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_template_deployment
func TableSchemaGenerator_azurerm_template_deployment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_template_deployment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_template_deployment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_template_deployment
func GetColumns_azurerm_template_deployment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("deployment_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outputs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template_body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters_body").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_resource_group_template_deployment
func TableSchemaGenerator_azurerm_resource_group_template_deployment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_resource_group_template_deployment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_resource_group_template_deployment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_resource_group_template_deployment
func GetColumns_azurerm_resource_group_template_deployment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("debug_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("output_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template_spec_version_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("deployment_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_azure_databricks
func TableSchemaGenerator_azurerm_data_factory_linked_service_azure_databricks() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_azure_databricks().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_azure_databricks()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_azure_databricks
func GetColumns_azurerm_data_factory_linked_service_azure_databricks() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("msi_work_space_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("adb_domain").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_password").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("existing_cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("instance_pool").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("new_cluster_config").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iot_time_series_insights_event_source_iothub
func TableSchemaGenerator_azurerm_iot_time_series_insights_event_source_iothub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iot_time_series_insights_event_source_iothub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iot_time_series_insights_event_source_iothub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iot_time_series_insights_event_source_iothub
func GetColumns_azurerm_iot_time_series_insights_event_source_iothub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("event_source_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_key_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timestamp_property_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("consumer_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("environment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_user
func TableSchemaGenerator_azurerm_api_management_user() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_user().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_user()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_user
func GetColumns_azurerm_api_management_user() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("state").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("last_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("note").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("confirmation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("email").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("first_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_data_lake_gen2_filesystem
func TableSchemaGenerator_azurerm_storage_data_lake_gen2_filesystem() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_data_lake_gen2_filesystem().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_data_lake_gen2_filesystem()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_data_lake_gen2_filesystem
func GetColumns_azurerm_storage_data_lake_gen2_filesystem() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ace").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("group").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("owner").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_workspace_key
func TableSchemaGenerator_azurerm_synapse_workspace_key() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_workspace_key().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_workspace_key()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_workspace_key
func GetColumns_azurerm_synapse_workspace_key() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("active").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("customer_managed_key_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("customer_managed_key_versionless_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_certificate
func TableSchemaGenerator_azurerm_iothub_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_certificate
func GetColumns_azurerm_iothub_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_verified").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_container_registry_webhook
func TableSchemaGenerator_azurerm_container_registry_webhook() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_container_registry_webhook().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_container_registry_webhook()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_container_registry_webhook
func GetColumns_azurerm_container_registry_webhook() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_headers").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("registry_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("actions").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_stream_analytics_output_cosmosdb
func TableSchemaGenerator_azurerm_stream_analytics_output_cosmosdb() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_stream_analytics_output_cosmosdb().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_stream_analytics_output_cosmosdb()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_stream_analytics_output_cosmosdb
func GetColumns_azurerm_stream_analytics_output_cosmosdb() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cosmosdb_account_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cosmosdb_sql_database_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("stream_analytics_job_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("container_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("document_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_storage_insights
func TableSchemaGenerator_azurerm_log_analytics_storage_insights() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_storage_insights().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_storage_insights()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_storage_insights
func GetColumns_azurerm_log_analytics_storage_insights() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("blob_container_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_windows_virtual_machine_scale_set
func TableSchemaGenerator_azurerm_windows_virtual_machine_scale_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_windows_virtual_machine_scale_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_windows_virtual_machine_scale_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_windows_virtual_machine_scale_set
func GetColumns_azurerm_windows_virtual_machine_scale_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_applications").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("do_not_run_extensions_on_overprovisioned_machines").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("single_placement_group").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automatic_instance_repair").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("boot_diagnostics").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("capacity_reservation_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_capabilities").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secret").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extensions_time_budget").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("overprovision").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secure_boot_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proximity_placement_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vtpm_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scale_in").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edge_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_bid_price").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spot_restore").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extension_operations_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extension").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rolling_upgrade_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_automatic_updates").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("platform_fault_domain_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_image_reference").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("winrm_listener").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("instances").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("provision_vm_agent").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_image_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_application").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("terminate_notification").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("termination_notification").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("health_probe_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_unattend_content").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timezone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("unique_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eviction_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("upgrade_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automatic_os_upgrade_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("computer_name_prefix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption_at_host_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scale_in_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_balance").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_desktop_host_pool_registration_info
func TableSchemaGenerator_azurerm_virtual_desktop_host_pool_registration_info() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_desktop_host_pool_registration_info().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_desktop_host_pool_registration_info()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_desktop_host_pool_registration_info
func GetColumns_azurerm_virtual_desktop_host_pool_registration_info() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("hostpool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expiration_date").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_server_microsoft_support_auditing_policy
func TableSchemaGenerator_azurerm_mssql_server_microsoft_support_auditing_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_server_microsoft_support_auditing_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_server_microsoft_support_auditing_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_server_microsoft_support_auditing_policy
func GetColumns_azurerm_mssql_server_microsoft_support_auditing_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("blob_storage_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_monitoring_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_interface_security_group_association
func TableSchemaGenerator_azurerm_network_interface_security_group_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_interface_security_group_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_interface_security_group_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_interface_security_group_association
func GetColumns_azurerm_network_interface_security_group_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_security_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_maintenance_assignment_dedicated_host
func TableSchemaGenerator_azurerm_maintenance_assignment_dedicated_host() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_maintenance_assignment_dedicated_host().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_maintenance_assignment_dedicated_host()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_maintenance_assignment_dedicated_host
func GetColumns_azurerm_maintenance_assignment_dedicated_host() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("dedicated_host_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maintenance_configuration_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_database
func TableSchemaGenerator_azurerm_mssql_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_database
func GetColumns_azurerm_mssql_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sample_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("restore_dropped_database_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("geo_backup_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("min_capacity").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("threat_detection_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_pause_delay_in_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("read_scale").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("long_term_retention_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_size_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("read_replica_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("elastic_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ledger_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("license_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("import").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recover_database_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("restore_point_in_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maintenance_configuration_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("transparent_data_encryption_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_redundant").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("short_term_retention_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("collation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("creation_source_database_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_cosmosdb_mongoapi
func TableSchemaGenerator_azurerm_data_factory_linked_service_cosmosdb_mongoapi() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_cosmosdb_mongoapi().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_cosmosdb_mongoapi()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_cosmosdb_mongoapi
func GetColumns_azurerm_data_factory_linked_service_cosmosdb_mongoapi() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_version_is_32_or_higher").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_media_services_account
func TableSchemaGenerator_azurerm_media_services_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_media_services_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_media_services_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_media_services_account
func GetColumns_azurerm_media_services_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_authentication_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_delivery_access_control").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_integration_account_map
func TableSchemaGenerator_azurerm_logic_app_integration_account_map() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_integration_account_map().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_integration_account_map()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_integration_account_map
func GetColumns_azurerm_logic_app_integration_account_map() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("map_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_service_plan
func TableSchemaGenerator_azurerm_service_plan() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_service_plan().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_service_plan()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_service_plan
func GetColumns_azurerm_service_plan() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("reserved").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_balancing_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_environment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("worker_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("per_site_scaling_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_elastic_worker_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_hpc_cache_access_policy
func TableSchemaGenerator_azurerm_hpc_cache_access_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_hpc_cache_access_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_hpc_cache_access_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_hpc_cache_access_policy
func GetColumns_azurerm_hpc_cache_access_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hpc_cache_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_servicebus_namespace
func TableSchemaGenerator_azurerm_servicebus_namespace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_servicebus_namespace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_servicebus_namespace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_servicebus_namespace
func GetColumns_azurerm_servicebus_namespace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("capacity").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_redundant").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("minimum_tls_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_auth_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("customer_managed_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_connection_service_principal
func TableSchemaGenerator_azurerm_automation_connection_service_principal() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_connection_service_principal().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_connection_service_principal()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_connection_service_principal
func GetColumns_azurerm_automation_connection_service_principal() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("application_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_thumbprint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_management_group_subscription_association
func TableSchemaGenerator_azurerm_management_group_subscription_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_management_group_subscription_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_management_group_subscription_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_management_group_subscription_association
func GetColumns_azurerm_management_group_subscription_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cognitive_account
func TableSchemaGenerator_azurerm_cognitive_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cognitive_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cognitive_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cognitive_account
func GetColumns_azurerm_cognitive_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("customer_managed_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metrics_advisor_aad_client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("outbound_network_access_restricted").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("local_auth_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metrics_advisor_aad_tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_subdomain_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dynamic_throttling_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_question_answering_search_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_question_answering_search_service_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("qna_runtime_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metrics_advisor_super_user_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metrics_advisor_website_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_acls").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_manager_network_group
func TableSchemaGenerator_azurerm_network_manager_network_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_manager_network_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_manager_network_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_manager_network_group
func GetColumns_azurerm_network_manager_network_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_manager_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_desktop_application_group
func TableSchemaGenerator_azurerm_virtual_desktop_application_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_desktop_application_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_desktop_application_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_desktop_application_group
func GetColumns_azurerm_virtual_desktop_application_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("default_desktop_display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("friendly_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_pool_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_api_schema
func TableSchemaGenerator_azurerm_api_management_api_schema() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_api_schema().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_api_schema()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_api_schema
func GetColumns_azurerm_api_management_api_schema() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("definitions").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("components").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_site_recovery_replication_policy
func TableSchemaGenerator_azurerm_site_recovery_replication_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_site_recovery_replication_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_site_recovery_replication_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_site_recovery_replication_policy
func GetColumns_azurerm_site_recovery_replication_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_point_retention_in_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_consistent_snapshot_frequency_in_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_disk_pool
func TableSchemaGenerator_azurerm_disk_pool() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_disk_pool().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_disk_pool()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_disk_pool
func GetColumns_azurerm_disk_pool() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_private_dns_resolver_inbound_endpoint
func TableSchemaGenerator_azurerm_private_dns_resolver_inbound_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_private_dns_resolver_inbound_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_private_dns_resolver_inbound_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_private_dns_resolver_inbound_endpoint
func GetColumns_azurerm_private_dns_resolver_inbound_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_dns_resolver_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_configurations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_redis_enterprise_cluster
func TableSchemaGenerator_azurerm_redis_enterprise_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_redis_enterprise_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_redis_enterprise_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_redis_enterprise_cluster
func GetColumns_azurerm_redis_enterprise_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hostname").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("minimum_tls_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iot_security_solution
func TableSchemaGenerator_azurerm_iot_security_solution() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iot_security_solution().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iot_security_solution()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iot_security_solution
func GetColumns_azurerm_iot_security_solution() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("events_to_export").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_workspace").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disabled_data_sources").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query_for_resources").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_unmasked_ips_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query_subscription_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recommendations_enabled").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_active_directory_domain_service
func TableSchemaGenerator_azurerm_active_directory_domain_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_active_directory_domain_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_active_directory_domain_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_active_directory_domain_service
func GetColumns_azurerm_active_directory_domain_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("domain_configuration_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("filtered_sync_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sync_owner").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notifications").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secure_ldap").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("security").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("deployment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("domain_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("initial_replica_set").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_integration_service_environment
func TableSchemaGenerator_azurerm_integration_service_environment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_integration_service_environment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_integration_service_environment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_integration_service_environment
func GetColumns_azurerm_integration_service_environment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access_endpoint_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connector_endpoint_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_subnet_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workflow_outbound_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connector_outbound_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workflow_endpoint_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iotcentral_application
func TableSchemaGenerator_azurerm_iotcentral_application() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iotcentral_application().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iotcentral_application()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iotcentral_application
func GetColumns_azurerm_iotcentral_application() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sub_domain").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("template").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_monitor_alert_processing_rule_action_group
func TableSchemaGenerator_azurerm_monitor_alert_processing_rule_action_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_monitor_alert_processing_rule_action_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_monitor_alert_processing_rule_action_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_monitor_alert_processing_rule_action_group
func GetColumns_azurerm_monitor_alert_processing_rule_action_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("add_action_group_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("condition").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_function_app_function
func TableSchemaGenerator_azurerm_function_app_function() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_function_app_function().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_function_app_function()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_function_app_function
func GetColumns_azurerm_function_app_function() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("test_data_url").ColumnType(schema.ColumnTypeString).Description("The Test data URL.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("language").ColumnType(schema.ColumnTypeString).Description("The language the Function is written in.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script_root_path_url").ColumnType(schema.ColumnTypeString).Description("The Script root path URL.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("file").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("config_url").ColumnType(schema.ColumnTypeString).Description("The URL of the configuration JSON.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Description("The name of the function.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secrets_file_url").ColumnType(schema.ColumnTypeString).Description("The URL for the Secrets File.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Description("Should this function be enabled. Defaults to `true`.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("function_app_id").ColumnType(schema.ColumnTypeString).Description("The ID of the Function App in which this function should reside.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("invocation_url").ColumnType(schema.ColumnTypeString).Description("The invocation URL.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("script_url").ColumnType(schema.ColumnTypeString).Description("The script URL.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("test_data").ColumnType(schema.ColumnTypeString).Description("The test data for the function.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Description("The function URL.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("config_json").ColumnType(schema.ColumnTypeString).Description("The config for this Function in JSON format.").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_digital_twins_endpoint_eventhub
func TableSchemaGenerator_azurerm_digital_twins_endpoint_eventhub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_digital_twins_endpoint_eventhub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_digital_twins_endpoint_eventhub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_digital_twins_endpoint_eventhub
func GetColumns_azurerm_digital_twins_endpoint_eventhub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dead_letter_storage_secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("digital_twins_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_redis_linked_server
func TableSchemaGenerator_azurerm_redis_linked_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_redis_linked_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_redis_linked_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_redis_linked_server
func GetColumns_azurerm_redis_linked_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("target_redis_cache_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_redis_cache_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_redis_cache_location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_role").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_redis_firewall_rule
func TableSchemaGenerator_azurerm_redis_firewall_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_redis_firewall_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_redis_firewall_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_redis_firewall_rule
func GetColumns_azurerm_redis_firewall_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("end_ip").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("redis_cache_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_ip").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_configuration_feature
func TableSchemaGenerator_azurerm_app_configuration_feature() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_configuration_feature().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_configuration_feature()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_configuration_feature
func GetColumns_azurerm_app_configuration_feature() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("targeting_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("configuration_store_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("etag").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("label").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("locked").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("percentage_filter_value").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timewindow_filter").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_connection_classic_certificate
func TableSchemaGenerator_azurerm_automation_connection_classic_certificate() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_connection_classic_certificate().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_connection_classic_certificate()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_connection_classic_certificate
func GetColumns_azurerm_automation_connection_classic_certificate() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("certificate_asset_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_federated_identity_credential
func TableSchemaGenerator_azurerm_federated_identity_credential() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_federated_identity_credential().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_federated_identity_credential()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_federated_identity_credential
func GetColumns_azurerm_federated_identity_credential() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("parent_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subject").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("audience").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("issuer").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_postgresql_flexible_server_database
func TableSchemaGenerator_azurerm_postgresql_flexible_server_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_postgresql_flexible_server_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_postgresql_flexible_server_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_postgresql_flexible_server_database
func GetColumns_azurerm_postgresql_flexible_server_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("charset").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("collation").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_resource_group_policy_exemption
func TableSchemaGenerator_azurerm_resource_group_policy_exemption() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_resource_group_policy_exemption().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_resource_group_policy_exemption()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_resource_group_policy_exemption
func GetColumns_azurerm_resource_group_policy_exemption() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("exemption_category").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("expires_on").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_assignment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_reference_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_nginx_configuration
func TableSchemaGenerator_azurerm_nginx_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_nginx_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_nginx_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_nginx_configuration
func GetColumns_azurerm_nginx_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("nginx_deployment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("package_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("root_file").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("config_file").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protected_file").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_netapp_volume
func TableSchemaGenerator_azurerm_netapp_volume() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_netapp_volume().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_netapp_volume()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_netapp_volume
func GetColumns_azurerm_netapp_volume() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("security_style").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_quota_in_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("throughput_in_mibps").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_protection_replication").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("create_from_snapshot_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pool_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("export_policy_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("snapshot_directory_visible").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("protocols").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_protection_snapshot_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("azure_vmware_data_store_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_features").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_level").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("volume_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mount_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sql_server
func TableSchemaGenerator_azurerm_sql_server() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sql_server().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sql_server()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sql_server
func GetColumns_azurerm_sql_server() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fully_qualified_domain_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("threat_detection_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("administrator_login").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mariadb_configuration
func TableSchemaGenerator_azurerm_mariadb_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mariadb_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mariadb_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mariadb_configuration
func GetColumns_azurerm_mariadb_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("server_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_azure_advanced_threat_protection
func TableSchemaGenerator_azurerm_sentinel_data_connector_azure_advanced_threat_protection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_azure_advanced_threat_protection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_azure_advanced_threat_protection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_azure_advanced_threat_protection
func GetColumns_azurerm_sentinel_data_connector_azure_advanced_threat_protection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_hdinsight_hadoop_cluster
func TableSchemaGenerator_azurerm_hdinsight_hadoop_cluster() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_hdinsight_hadoop_cluster().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_hdinsight_hadoop_cluster()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_hdinsight_hadoop_cluster
func GetColumns_azurerm_hdinsight_hadoop_cluster() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("network").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metastores").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ssh_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("component_version").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disk_encryption").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("monitor").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tls_min_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("security_profile").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_gen2").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compute_isolation").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extension").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("roles").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_vpn_gateway_nat_rule
func TableSchemaGenerator_azurerm_vpn_gateway_nat_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_vpn_gateway_nat_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_vpn_gateway_nat_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_vpn_gateway_nat_rule
func GetColumns_azurerm_vpn_gateway_nat_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vpn_gateway_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_configuration_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("external_mapping").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internal_mapping").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("external_address_space_mappings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internal_address_space_mappings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_customized_accelerator
func TableSchemaGenerator_azurerm_spring_cloud_customized_accelerator() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_customized_accelerator().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_customized_accelerator()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_customized_accelerator
func GetColumns_azurerm_spring_cloud_customized_accelerator() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("accelerator_tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("icon_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_accelerator_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("git_repository").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_role_assignment
func TableSchemaGenerator_azurerm_role_assignment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_role_assignment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_role_assignment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_role_assignment
func GetColumns_azurerm_role_assignment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role_definition_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("skip_service_principal_aad_check").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("condition").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("condition_version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("delegated_managed_identity_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_automation_hybrid_runbook_worker
func TableSchemaGenerator_azurerm_automation_hybrid_runbook_worker() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_automation_hybrid_runbook_worker().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_automation_hybrid_runbook_worker()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_automation_hybrid_runbook_worker
func GetColumns_azurerm_automation_hybrid_runbook_worker() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("automation_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("last_seen_date_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("registration_date_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("worker_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("worker_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vm_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("worker_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("worker_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_hub_bgp_connection
func TableSchemaGenerator_azurerm_virtual_hub_bgp_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_hub_bgp_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_hub_bgp_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_hub_bgp_connection
func GetColumns_azurerm_virtual_hub_bgp_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("peer_asn").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("peer_ip").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_hub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_connection_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_subnet_route_table_association
func TableSchemaGenerator_azurerm_subnet_route_table_association() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_subnet_route_table_association().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_subnet_route_table_association()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_subnet_route_table_association
func GetColumns_azurerm_subnet_route_table_association() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("route_table_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_eventhub_consumer_group
func TableSchemaGenerator_azurerm_eventhub_consumer_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_eventhub_consumer_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_eventhub_consumer_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_eventhub_consumer_group
func GetColumns_azurerm_eventhub_consumer_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iot_time_series_insights_event_source_eventhub
func TableSchemaGenerator_azurerm_iot_time_series_insights_event_source_eventhub() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iot_time_series_insights_event_source_eventhub().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iot_time_series_insights_event_source_eventhub()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iot_time_series_insights_event_source_eventhub
func GetColumns_azurerm_iot_time_series_insights_event_source_eventhub() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timestamp_property_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("consumer_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("environment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shared_access_key_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_source_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_media_streaming_policy
func TableSchemaGenerator_azurerm_media_streaming_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_media_streaming_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_media_streaming_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_media_streaming_policy
func GetColumns_azurerm_media_streaming_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_content_key_policy_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("common_encryption_cenc").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("media_services_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("common_encryption_cbcs").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("no_encryption_enabled_protocols").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iot_security_device_group
func TableSchemaGenerator_azurerm_iot_security_device_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iot_security_device_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iot_security_device_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iot_security_device_group
func GetColumns_azurerm_iot_security_device_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("range_rule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_workspace
func TableSchemaGenerator_azurerm_log_analytics_workspace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_workspace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_workspace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_workspace
func GetColumns_azurerm_log_analytics_workspace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("daily_quota_gb").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_shared_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internet_query_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internet_ingestion_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_resource_only_permissions").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cmk_for_query_forced").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_shared_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("reservation_capacity_in_gb_per_day").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_in_days").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_office_atp
func TableSchemaGenerator_azurerm_sentinel_data_connector_office_atp() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_office_atp().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_office_atp()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_office_atp
func GetColumns_azurerm_sentinel_data_connector_office_atp() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_integration_runtime_azure
func TableSchemaGenerator_azurerm_data_factory_integration_runtime_azure() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_integration_runtime_azure().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_integration_runtime_azure()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_integration_runtime_azure
func GetColumns_azurerm_data_factory_integration_runtime_azure() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_network_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_to_live_min").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cleanup_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compute_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("core_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_linked_service
func TableSchemaGenerator_azurerm_synapse_linked_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_linked_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_linked_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_linked_service
func GetColumns_azurerm_synapse_linked_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type_properties_json").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kusto_eventhub_data_connection
func TableSchemaGenerator_azurerm_kusto_eventhub_data_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kusto_eventhub_data_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kusto_eventhub_data_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kusto_eventhub_data_connection
func GetColumns_azurerm_kusto_eventhub_data_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("table_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mapping_rule_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("event_system_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compression").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("consumer_group").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_routing_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_resource_group_policy_remediation
func TableSchemaGenerator_azurerm_resource_group_policy_remediation() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_resource_group_policy_remediation().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_resource_group_policy_remediation()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_resource_group_policy_remediation
func GetColumns_azurerm_resource_group_policy_remediation() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("failure_percentage").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location_filters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parallel_deployments").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_assignment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_reference_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_discovery_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_digital_twins_time_series_database_connection
func TableSchemaGenerator_azurerm_digital_twins_time_series_database_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_digital_twins_time_series_database_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_digital_twins_time_series_database_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_digital_twins_time_series_database_connection
func GetColumns_azurerm_digital_twins_time_series_database_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_consumer_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_namespace_endpoint_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kusto_cluster_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kusto_cluster_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("digital_twins_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_namespace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kusto_database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kusto_table_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_spring_cloud_api_portal
func TableSchemaGenerator_azurerm_spring_cloud_api_portal() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_spring_cloud_api_portal().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_spring_cloud_api_portal()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_spring_cloud_api_portal
func GetColumns_azurerm_spring_cloud_api_portal() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("instance_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gateway_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sso").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("https_only_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spring_cloud_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dns_a_record
func TableSchemaGenerator_azurerm_dns_a_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dns_a_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dns_a_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dns_a_record
func GetColumns_azurerm_dns_a_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("records").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_bastion_host
func TableSchemaGenerator_azurerm_bastion_host() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_bastion_host().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_bastion_host()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_bastion_host
func GetColumns_azurerm_bastion_host() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_connect_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("copy_paste_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("file_copy_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scale_units").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("shareable_link_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tunneling_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_point_to_site_vpn_gateway
func TableSchemaGenerator_azurerm_point_to_site_vpn_gateway() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_point_to_site_vpn_gateway().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_point_to_site_vpn_gateway()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_point_to_site_vpn_gateway
func GetColumns_azurerm_point_to_site_vpn_gateway() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("routing_preference_internet_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vpn_server_configuration_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_servers").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scale_unit").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_hub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_app_service_plan
func TableSchemaGenerator_azurerm_app_service_plan() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_app_service_plan().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_app_service_plan()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_app_service_plan
func GetColumns_azurerm_app_service_plan() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_number_of_workers").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("per_site_scaling").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("reserved").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_redundant").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("app_service_environment_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("maximum_elastic_worker_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("is_xenon").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_dataset_azure_blob
func TableSchemaGenerator_azurerm_data_factory_dataset_azure_blob() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_dataset_azure_blob().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_dataset_azure_blob()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_dataset_azure_blob
func GetColumns_azurerm_data_factory_dataset_azure_blob() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schema_column").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("filename").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("linked_service_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dynamic_path_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dynamic_filename_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("folder").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_application_insights_analytics_item
func TableSchemaGenerator_azurerm_application_insights_analytics_item() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_application_insights_analytics_item().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_application_insights_analytics_item()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_application_insights_analytics_item
func GetColumns_azurerm_application_insights_analytics_item() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scope").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_modified").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("application_insights_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_created").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("version").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("function_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_diagnostic
func TableSchemaGenerator_azurerm_api_management_diagnostic() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_diagnostic().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_diagnostic()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_diagnostic
func GetColumns_azurerm_api_management_diagnostic() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_response").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_correlation_protocol").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sampling_percentage").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_response").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frontend_request").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("always_log_errors").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("log_client_ip").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("verbosity").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("backend_request").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identifier").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_logger_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("operation_name_format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_azure_sql_database
func TableSchemaGenerator_azurerm_data_factory_linked_service_azure_sql_database() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_azure_sql_database().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_azure_sql_database()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_azure_sql_database
func GetColumns_azurerm_data_factory_linked_service_azure_sql_database() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_principal_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_password").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_principal_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_managed_identity").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_connection_string").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_sentinel_data_connector_azure_security_center
func TableSchemaGenerator_azurerm_sentinel_data_connector_azure_security_center() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_sentinel_data_connector_azure_security_center().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_sentinel_data_connector_azure_security_center()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_sentinel_data_connector_azure_security_center
func GetColumns_azurerm_sentinel_data_connector_azure_security_center() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("log_analytics_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subscription_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_purview_account
func TableSchemaGenerator_azurerm_purview_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_purview_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_purview_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_purview_account
func GetColumns_azurerm_purview_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("guardian_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scan_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("atlas_kafka_endpoint_primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("atlas_kafka_endpoint_secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("catalog_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_resources").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_security_center_automation
func TableSchemaGenerator_azurerm_security_center_automation() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_security_center_automation().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_security_center_automation()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_security_center_automation
func GetColumns_azurerm_security_center_automation() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("action").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_azure_function
func TableSchemaGenerator_azurerm_data_factory_linked_service_azure_function() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_azure_function().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_azure_function()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_azure_function
func GetColumns_azurerm_data_factory_linked_service_azure_function() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_network_interface
func TableSchemaGenerator_azurerm_network_interface() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_network_interface().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_network_interface()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_network_interface
func GetColumns_azurerm_network_interface() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("virtual_machine_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("applied_dns_servers").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_ip_forwarding").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internal_dns_name_label").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ip_configuration").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mac_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns_servers").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edge_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enable_accelerated_networking").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("internal_domain_name_suffix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_endpoint_servicebus_topic
func TableSchemaGenerator_azurerm_iothub_endpoint_servicebus_topic() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_endpoint_servicebus_topic().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_endpoint_servicebus_topic()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_endpoint_servicebus_topic
func GetColumns_azurerm_iothub_endpoint_servicebus_topic() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("entity_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("authentication_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint_uri").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logz_monitor
func TableSchemaGenerator_azurerm_logz_monitor() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logz_monitor().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logz_monitor()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logz_monitor
func GetColumns_azurerm_logz_monitor() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("logz_organization_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("company_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enterprise_app_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("single_sign_on_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_kusto_eventgrid_data_connection
func TableSchemaGenerator_azurerm_kusto_eventgrid_data_connection() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_kusto_eventgrid_data_connection().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_kusto_eventgrid_data_connection()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_kusto_eventgrid_data_connection
func GetColumns_azurerm_kusto_eventgrid_data_connection() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("cluster_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_consumer_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventhub_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("blob_storage_event_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mapping_rule_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_format").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("skip_first_record").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_routing_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eventgrid_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_identity_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_azure_search
func TableSchemaGenerator_azurerm_data_factory_linked_service_azure_search() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_azure_search().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_azure_search()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_azure_search
func GetColumns_azurerm_data_factory_linked_service_azure_search() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("search_service_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encrypted_credential").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_linked_service_kusto
func TableSchemaGenerator_azurerm_data_factory_linked_service_kusto() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_linked_service_kusto().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_linked_service_kusto()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_linked_service_kusto
func GetColumns_azurerm_data_factory_linked_service_kusto() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_properties").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("use_managed_identity").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_runtime_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kusto_database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_principal_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kusto_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_principal_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_dns_mx_record
func TableSchemaGenerator_azurerm_dns_mx_record() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_dns_mx_record().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_dns_mx_record()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_dns_mx_record
func GetColumns_azurerm_dns_mx_record() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("fqdn").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("record").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_notification_recipient_user
func TableSchemaGenerator_azurerm_api_management_notification_recipient_user() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_notification_recipient_user().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_notification_recipient_user()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_notification_recipient_user
func GetColumns_azurerm_api_management_notification_recipient_user() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("notification_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_batch_account
func TableSchemaGenerator_azurerm_batch_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_batch_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_batch_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_batch_account
func GetColumns_azurerm_batch_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("pool_allocation_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_node_identity").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_reference").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_authentication_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allowed_authentication_modes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_integration_account_agreement
func TableSchemaGenerator_azurerm_logic_app_integration_account_agreement() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_integration_account_agreement().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_integration_account_agreement()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_integration_account_agreement
func GetColumns_azurerm_logic_app_integration_account_agreement() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("agreement_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("guest_identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("guest_partner_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_partner_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_key_vault_certificate_contacts
func TableSchemaGenerator_azurerm_key_vault_certificate_contacts() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_key_vault_certificate_contacts().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_key_vault_certificate_contacts()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_key_vault_certificate_contacts
func GetColumns_azurerm_key_vault_certificate_contacts() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key_vault_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("contact").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_media_asset
func TableSchemaGenerator_azurerm_media_asset() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_media_asset().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_media_asset()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_media_asset
func GetColumns_azurerm_media_asset() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("container").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("alternate_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("media_services_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_sql_pool_vulnerability_assessment
func TableSchemaGenerator_azurerm_synapse_sql_pool_vulnerability_assessment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_sql_pool_vulnerability_assessment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_sql_pool_vulnerability_assessment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_sql_pool_vulnerability_assessment
func GetColumns_azurerm_synapse_sql_pool_vulnerability_assessment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_sas_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recurring_scans").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_pool_security_alert_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_access_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_container_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_linux_virtual_machine_scale_set
func TableSchemaGenerator_azurerm_linux_virtual_machine_scale_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_linux_virtual_machine_scale_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_linux_virtual_machine_scale_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_linux_virtual_machine_scale_set
func GetColumns_azurerm_linux_virtual_machine_scale_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("instances").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("priority").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("proximity_placement_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("upgrade_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("user_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_interface").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("do_not_run_extensions_on_overprovisioned_machines").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("disable_password_authentication").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("host_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automatic_instance_repair").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("plan").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scale_in").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("health_probe_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rolling_upgrade_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extension_operations_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("provision_vm_agent").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("spot_restore").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("os_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("computer_name_prefix").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("max_bid_price").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("single_placement_group").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zones").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("additional_capabilities").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("custom_data").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption_at_host_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("overprovision").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extensions_time_budget").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("platform_fault_domain_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vtpm_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_image_reference").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("termination_notification").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("automatic_os_upgrade_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_disk").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("extension").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_application").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("capacity_reservation_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secure_boot_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("unique_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("boot_diagnostics").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("edge_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("scale_in_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source_image_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_ssh_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("terminate_notification").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("eviction_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("gallery_applications").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_balance").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secret").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_factory_trigger_schedule
func TableSchemaGenerator_azurerm_data_factory_trigger_schedule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_factory_trigger_schedule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_factory_trigger_schedule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_factory_trigger_schedule
func GetColumns_azurerm_data_factory_trigger_schedule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_factory_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("interval").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pipeline_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("start_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pipeline").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("frequency").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("pipeline_parameters").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("activated").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("annotations").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("end_time").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_zone").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_sync_cloud_endpoint
func TableSchemaGenerator_azurerm_storage_sync_cloud_endpoint() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_sync_cloud_endpoint().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_sync_cloud_endpoint()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_sync_cloud_endpoint
func GetColumns_azurerm_storage_sync_cloud_endpoint() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_sync_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("file_share_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_backup_container_storage_account
func TableSchemaGenerator_azurerm_backup_container_storage_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_backup_container_storage_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_backup_container_storage_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_backup_container_storage_account
func GetColumns_azurerm_backup_container_storage_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("recovery_vault_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_data_share
func TableSchemaGenerator_azurerm_data_share() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_data_share().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_data_share()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_data_share
func GetColumns_azurerm_data_share() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("terms").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("snapshot_schedule").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_synapse_integration_runtime_azure
func TableSchemaGenerator_azurerm_synapse_integration_runtime_azure() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_synapse_integration_runtime_azure().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_synapse_integration_runtime_azure()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_synapse_integration_runtime_azure
func GetColumns_azurerm_synapse_integration_runtime_azure() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("core_count").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("synapse_workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("time_to_live_min").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("compute_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_route
func TableSchemaGenerator_azurerm_iothub_route() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_route().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_route()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_route
func GetColumns_azurerm_iothub_route() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("iothub_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("source").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("endpoint_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("condition").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_iothub_device_update_account
func TableSchemaGenerator_azurerm_iothub_device_update_account() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_iothub_device_update_account().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_iothub_device_update_account()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_iothub_device_update_account
func GetColumns_azurerm_iothub_device_update_account() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("host_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_management_group_policy_assignment
func TableSchemaGenerator_azurerm_management_group_policy_assignment() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_management_group_policy_assignment().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_management_group_policy_assignment()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_management_group_policy_assignment
func GetColumns_azurerm_management_group_policy_assignment() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("not_scopes").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enforce").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("non_compliance_message").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_definition_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_virtual_desktop_workspace
func TableSchemaGenerator_azurerm_virtual_desktop_workspace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_virtual_desktop_workspace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_virtual_desktop_workspace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_virtual_desktop_workspace
func GetColumns_azurerm_virtual_desktop_workspace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("friendly_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_database_migration_service
func TableSchemaGenerator_azurerm_database_migration_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_database_migration_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_database_migration_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_database_migration_service
func GetColumns_azurerm_database_migration_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_mssql_managed_instance_failover_group
func TableSchemaGenerator_azurerm_mssql_managed_instance_failover_group() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_mssql_managed_instance_failover_group().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_mssql_managed_instance_failover_group()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_mssql_managed_instance_failover_group
func GetColumns_azurerm_mssql_managed_instance_failover_group() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partner_managed_instance_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("read_write_endpoint_failover_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("managed_instance_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partner_region").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("readonly_endpoint_failover_policy_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_policy_definition
func TableSchemaGenerator_azurerm_policy_definition() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_policy_definition().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_policy_definition()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_policy_definition
func GetColumns_azurerm_policy_definition() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("display_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("role_definition_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("management_group_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("parameters").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_rule").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_active_directory_domain_service_replica_set
func TableSchemaGenerator_azurerm_active_directory_domain_service_replica_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_active_directory_domain_service_replica_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_active_directory_domain_service_replica_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_active_directory_domain_service_replica_set
func GetColumns_azurerm_active_directory_domain_service_replica_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subnet_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("domain_controller_ip_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("domain_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("external_access_ip_address").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_servicebus_namespace_authorization_rule
func TableSchemaGenerator_azurerm_servicebus_namespace_authorization_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_servicebus_namespace_authorization_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_servicebus_namespace_authorization_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_servicebus_namespace_authorization_rule
func GetColumns_azurerm_servicebus_namespace_authorization_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("listen").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("manage").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secondary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_connection_string_alias").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("primary_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_firewall_policy
func TableSchemaGenerator_azurerm_firewall_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_firewall_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_firewall_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_firewall_policy
func GetColumns_azurerm_firewall_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("threat_intelligence_mode").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("firewalls").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_ip_ranges").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rule_collection_groups").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("intrusion_detection").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("threat_intelligence_allowlist").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tls_certificate").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("child_policies").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sql_redirect_allowed").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("auto_learn_private_ranges_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("base_policy_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("dns").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("explicit_proxy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("insights").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_log_analytics_data_export_rule
func TableSchemaGenerator_azurerm_log_analytics_data_export_rule() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_log_analytics_data_export_rule().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_log_analytics_data_export_rule()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_log_analytics_data_export_rule
func GetColumns_azurerm_log_analytics_data_export_rule() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("table_names").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("export_rule_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_notification_hub_namespace
func TableSchemaGenerator_azurerm_notification_hub_namespace() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_notification_hub_namespace().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_notification_hub_namespace()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_notification_hub_namespace
func GetColumns_azurerm_notification_hub_namespace() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("namespace_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("servicebus_endpoint").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_search_shared_private_link_service
func TableSchemaGenerator_azurerm_search_shared_private_link_service() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_search_shared_private_link_service().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_search_shared_private_link_service()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_search_shared_private_link_service
func GetColumns_azurerm_search_shared_private_link_service() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("search_service_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("status").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("subresource_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("target_resource_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("request_message").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_container_registry
func TableSchemaGenerator_azurerm_container_registry() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_container_registry().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_container_registry()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_container_registry
func GetColumns_azurerm_container_registry() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("retention_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("trust_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("identity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("export_policy_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sku").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("georeplications").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_rule_set").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("quarantine_policy_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("admin_password").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("data_endpoint_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("login_server").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("network_rule_bypass_option").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("zone_redundancy_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("anonymous_pull_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("encryption").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("public_network_access_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_media_live_event_output
func TableSchemaGenerator_azurerm_media_live_event_output() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_media_live_event_output().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_media_live_event_output()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_media_live_event_output
func GetColumns_azurerm_media_live_event_output() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("live_event_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("output_snap_time_in_seconds").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("archive_window_duration").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("asset_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("hls_fragments_per_ts_segment").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("manifest_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_logic_app_integration_account_schema
func TableSchemaGenerator_azurerm_logic_app_integration_account_schema() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_logic_app_integration_account_schema().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_logic_app_integration_account_schema()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_logic_app_integration_account_schema
func GetColumns_azurerm_logic_app_integration_account_schema() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("integration_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("metadata").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("file_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_user_assigned_identity
func TableSchemaGenerator_azurerm_user_assigned_identity() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_user_assigned_identity().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_user_assigned_identity()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_user_assigned_identity
func GetColumns_azurerm_user_assigned_identity() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("client_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tags").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("tenant_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("location").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("principal_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_cosmosdb_gremlin_graph
func TableSchemaGenerator_azurerm_cosmosdb_gremlin_graph() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_cosmosdb_gremlin_graph().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_cosmosdb_gremlin_graph()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_cosmosdb_gremlin_graph
func GetColumns_azurerm_cosmosdb_gremlin_graph() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("throughput").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("autoscale_settings").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("unique_key").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("database_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_ttl").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_key_version").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("conflict_resolution_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("index_policy").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_key_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_api_management_product_policy
func TableSchemaGenerator_azurerm_api_management_product_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_api_management_product_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_api_management_product_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_api_management_product_policy
func GetColumns_azurerm_api_management_product_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("product_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("resource_group_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("xml_content").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("xml_link").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_management_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// azurerm_storage_table_entity
func TableSchemaGenerator_azurerm_storage_table_entity() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_azurerm_storage_table_entity().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_azurerm_storage_table_entity()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// azurerm_storage_table_entity
func GetColumns_azurerm_storage_table_entity() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("timeouts").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("entity").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("partition_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("row_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("storage_account_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("table_name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}


